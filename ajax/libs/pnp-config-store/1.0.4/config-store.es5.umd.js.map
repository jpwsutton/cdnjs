{"version":3,"file":"config-store.es5.umd.js","sources":["../../../../packages/config-store/src/configuration.ts","../../../../packages/config-store/src/exceptions.ts","../../../../packages/config-store/src/providers/cachingConfigurationProvider.ts","../../../../packages/config-store/src/providers/spListConfigurationProvider.ts"],"sourcesContent":["import { TypedHash, Dictionary } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<TypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * The settings currently stored in this instance\n     */\n    private _settings: Dictionary<string>;\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor() {\n        this._settings = new Dictionary<string>();\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.add(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.add(key, JSON.stringify(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {TypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: TypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings.merge(hash);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings.merge(value);\n                resolve();\n            }).catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key);\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (typeof o === \"undefined\" || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport class NoCacheAvailableException extends Error {\n\n    constructor(msg = \"Cannot create a caching configuration provider since cache is not available.\") {\n        super(msg);\n        this.name = \"NoCacheAvailableException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\nimport { NoCacheAvailableException } from \"../exceptions\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n    private wrappedProvider: IConfigurationProvider;\n    private store: PnPClientStore;\n    private cacheKey: string;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(wrappedProvider: IConfigurationProvider, cacheKey: string, cacheStore?: PnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n        this.cacheKey = `_configcache_${cacheKey}`;\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n        // Cache not available, pass control to  the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        // Value is found in cache, return it directly\n        const cachedConfig = this.store.get(this.cacheKey);\n        if (cachedConfig) {\n            return new Promise<TypedHash<string>>((resolve) => {\n                resolve(cachedConfig);\n            });\n        }\n\n        // Get and cache value from the wrapped provider\n        const providerPromise = this.wrappedProvider.getConfiguration();\n        providerPromise.then((providedConfig) => {\n            this.store.put(this.cacheKey, providedConfig);\n        });\n        return providerPromise;\n    }\n\n    private selectPnPCache(): PnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw new NoCacheAvailableException();\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { Web } from \"@pnp/sp\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(private sourceWeb: Web, private sourceListTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") {\n    }\n\n    /**\n     * Gets the url of the SharePoint site, where the configuration list is located\n     *\n     * @return {string} Url address of the site\n     */\n    public get web(): Web {\n        return this.sourceWeb;\n    }\n\n    /**\n     * Gets the title of the SharePoint list, which contains the configuration settings\n     *\n     * @return {string} List title\n     */\n    public get listTitle(): string {\n        return this.sourceListTitle;\n    }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName)\n            .get<any[]>().then((data) => data.reduce((c: any, item: any) => {\n\n                return Object.defineProperty(c, item[this.keyFieldName], {\n                    configurable: false,\n                    enumerable: false,\n                    value: item[this.valueFieldName],\n                    writable: false,\n                });\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(): CachingConfigurationProvider {\n        const cacheKey = `splist_${this.web.toUrl()}+${this.listTitle}`;\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n"],"names":["Dictionary","tslib_1.__extends","Logger","PnPClientStorage"],"mappings":"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"}