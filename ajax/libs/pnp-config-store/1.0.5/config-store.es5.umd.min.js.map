{"version":3,"sources":["../../../../packages/config-store/src/configuration.ts","../../../../packages/config-store/src/exceptions.ts","../../../../packages/config-store/src/providers/cachingConfigurationProvider.ts","../../../../packages/config-store/src/providers/spListConfigurationProvider.ts"],"names":["Settings","this","_settings","Dictionary","prototype","add","key","value","addJSON","JSON","stringify","apply","hash","_this","Promise","resolve","reject","merge","e","load","provider","getConfiguration","then","catch","get","getJSON","o","parse","NoCacheAvailableException","msg","_super","call","name","Logger","log","data","level","message","tslib_1.__extends","Error","CachingConfigurationProvider","wrappedProvider","cacheKey","cacheStore","store","selectPnPCache","getWrappedProvider","enabled","getOrPut","providedConfig","put","pnpCache","PnPClientStorage","local","session","SPListConfigurationProvider","web","listTitle","keyFieldName","valueFieldName","lists","getByTitle","items","select","reduce","c","item","asCaching","toUrl"],"mappings":"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","sourcesContent":["import { TypedHash, Dictionary } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<TypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * The settings currently stored in this instance\n     */\n    private _settings: Dictionary<string>;\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor() {\n        this._settings = new Dictionary<string>();\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.add(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.add(key, JSON.stringify(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {TypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: TypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings.merge(hash);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings.merge(value);\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key);\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (typeof o === \"undefined\" || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport class NoCacheAvailableException extends Error {\n\n    constructor(msg = \"Cannot create a caching configuration provider since cache is not available.\") {\n        super(msg);\n        this.name = \"NoCacheAvailableException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\nimport { NoCacheAvailableException } from \"../exceptions\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n\n    private store: PnPClientStore;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: PnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n        // Cache not available, pass control to the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        return this.store.getOrPut(this.cacheKey, () => {\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\n                this.store.put(this.cacheKey, providedConfig);\n                return providedConfig;\n            });\n        });\n    }\n\n    private selectPnPCache(): PnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw new NoCacheAvailableException();\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { Web } from \"@pnp/sp\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(public readonly web: Web, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName).get<any[]>()\n            .then((data) => data.reduce((c: any, item: any) => {\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\n                return c;\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n"]}