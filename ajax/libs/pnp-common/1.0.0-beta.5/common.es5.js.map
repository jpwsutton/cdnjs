{"version":3,"file":"common.es5.js","sources":["../../../../packages/common/src/blobutil.ts","../../../../packages/common/src/collections.ts","../../../../packages/common/src/util.ts","../../../../packages/common/src/configutil.ts","../../../../packages/common/src/decorators.ts","../../../../packages/common/src/exceptions.ts","../../../../packages/common/src/libconfig.ts","../../../../packages/common/src/netutil.ts","../../../../packages/common/src/storage.ts"],"sourcesContent":["/**\r\n * Reads a blob as text\r\n *\r\n * @param blob The data to read\r\n */\r\nexport function readBlobAsText(blob: Blob): Promise<string> {\r\n    return readBlobAs<string>(blob, \"string\");\r\n}\r\n\r\n/**\r\n * Reads a blob into an array buffer\r\n *\r\n * @param blob The data to read\r\n */\r\nexport function readBlobAsArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\r\n    return readBlobAs<ArrayBuffer>(blob, \"buffer\");\r\n}\r\n\r\n/**\r\n * Generic method to read blob's content\r\n *\r\n * @param blob The data to read\r\n * @param mode The read mode\r\n */\r\nfunction readBlobAs<T>(blob: Blob, mode: \"string\" | \"buffer\"): Promise<T> {\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = (e: FileReaderEvent<T>) => {\r\n                resolve(e.target.result);\r\n            };\r\n\r\n            switch (mode) {\r\n                case \"string\":\r\n                    reader.readAsText(blob);\r\n                    break;\r\n                case \"buffer\":\r\n                    reader.readAsArrayBuffer(blob);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Used to cast the event response target\r\n */\r\ninterface FileReaderEventTarget<T> extends EventTarget {\r\n    result: T;\r\n}\r\n\r\n/**\r\n * Used to cast the event response\r\n */\r\ninterface FileReaderEvent<T> extends Event {\r\n    target: FileReaderEventTarget<T>;\r\n    getMessage(): string;\r\n}\r\n","/**\r\n * Interface defining an object with a known property type\r\n */\r\nexport interface TypedHash<T> {\r\n    [key: string]: T;\r\n}\r\n\r\n/**\r\n * Generic dictionary\r\n */\r\nexport class Dictionary<T> {\r\n\r\n    /**\r\n     * Creates a new instance of the Dictionary<T> class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(private keys: string[] = [], private values: T[] = []) {\r\n    }\r\n\r\n    /**\r\n     * Gets a value from the collection using the specified key\r\n     *\r\n     * @param key The key whose value we want to return, returns null if the key does not exist\r\n     */\r\n    public get(key: string): T | null {\r\n        const index = this.keys.indexOf(key);\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        return this.values[index];\r\n    }\r\n\r\n    /**\r\n     * Adds the supplied key and value to the dictionary\r\n     *\r\n     * @param key The key to add\r\n     * @param o The value to add\r\n     */\r\n    public add(key: string, o: T | null): void {\r\n        const index = this.keys.indexOf(key);\r\n        if (index > -1) {\r\n            if (o === null) {\r\n                this.remove(key);\r\n            } else {\r\n                this.values[index] = o;\r\n            }\r\n        } else {\r\n            if (o !== null) {\r\n                this.keys.push(key);\r\n                this.values.push(o);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merges the supplied typed hash into this dictionary instance. Existing values are updated and new ones are created as appropriate.\r\n     */\r\n    public merge(source: TypedHash<T> | Dictionary<T>): void {\r\n        if (\"getKeys\" in source) {\r\n            const sourceAsDictionary = source as Dictionary<T>;\r\n            sourceAsDictionary.getKeys().map(key => {\r\n                this.add(key, sourceAsDictionary.get(key));\r\n            });\r\n        } else {\r\n            const sourceAsHash = source as TypedHash<T>;\r\n            for (const key in sourceAsHash) {\r\n                if (sourceAsHash.hasOwnProperty(key)) {\r\n                    this.add(key, sourceAsHash[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a value from the dictionary\r\n     *\r\n     * @param key The key of the key/value pair to remove. Returns null if the key was not found.\r\n     */\r\n    public remove(key: string): T | null {\r\n        const index = this.keys.indexOf(key);\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const val = this.values[index];\r\n        this.keys.splice(index, 1);\r\n        this.values.splice(index, 1);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Returns all the keys currently in the dictionary as an array\r\n     */\r\n    public getKeys(): string[] {\r\n        return this.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns all the values currently in the dictionary as an array\r\n     */\r\n    public getValues(): T[] {\r\n        return this.values;\r\n    }\r\n\r\n    /**\r\n     * Clears the current dictionary\r\n     */\r\n    public clear(): void {\r\n        this.keys = [];\r\n        this.values = [];\r\n    }\r\n\r\n    /**\r\n     * Gets a count of the items currently in the dictionary\r\n     */\r\n    public count(): number {\r\n        return this.keys.length;\r\n    }\r\n}\r\n","export class Util {\n\n    /**\n     * Gets a callback function which will maintain context across async calls.\n     * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n     *\n     * @param context The object that will be the 'this' value in the callback\n     * @param method The method to which we will apply the context and parameters\n     * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n     */\n    public static getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n        return function () {\n            method.apply(context, params);\n        };\n    }\n\n    /**\n     * Tests if a url param exists\n     *\n     * @param name The name of the url paramter to check\n     */\n    public static urlParamExists(name: string): boolean {\n        name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n        const regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n        return regex.test(location.search);\n    }\n\n    /**\n     * Gets a url param value by name\n     *\n     * @param name The name of the paramter for which we want the value\n     */\n    public static getUrlParamByName(name: string): string {\n        name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n        const regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n        const results = regex.exec(location.search);\n        return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n\n    /**\n     * Gets a url param by name and attempts to parse a bool value\n     *\n     * @param name The name of the paramter for which we want the boolean value\n     */\n    public static getUrlParamBoolByName(name: string): boolean {\n        const p = this.getUrlParamByName(name);\n        const isFalse = (p === \"\" || /false|0/i.test(p));\n        return !isFalse;\n    }\n\n    /**\n     * Inserts the string s into the string target as the index specified by index\n     *\n     * @param target The string into which we will insert s\n     * @param index The location in target to insert s (zero based)\n     * @param s The string to insert into target at position index\n     */\n    public static stringInsert(target: string, index: number, s: string): string {\n        if (index > 0) {\n            return target.substring(0, index) + s + target.substring(index, target.length);\n        }\n        return s + target;\n    }\n\n    /**\n     * Adds a value to a date\n     *\n     * @param date The date to which we will add units, done in local time\n     * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n     * @param units The amount to add to date of the given interval\n     *\n     * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n     */\n    public static dateAdd(date: Date, interval: string, units: number): Date | undefined {\n        let ret: Date | undefined = new Date(date); // don't change original date\n        switch (interval.toLowerCase()) {\n            case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n            case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n            case \"month\": ret.setMonth(ret.getMonth() + units); break;\n            case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n            case \"day\": ret.setDate(ret.getDate() + units); break;\n            case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n            case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n            case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n            default: ret = undefined; break;\n        }\n        return ret;\n    }\n\n    /**\n     * Loads a stylesheet into the current page\n     *\n     * @param path The url to the stylesheet\n     * @param avoidCache If true a value will be appended as a query string to avoid browser caching issues\n     */\n    public static loadStylesheet(path: string, avoidCache: boolean): void {\n        if (avoidCache) {\n            path += \"?\" + encodeURIComponent((new Date()).getTime().toString());\n        }\n        const head = document.getElementsByTagName(\"head\");\n        if (head.length > 0) {\n            const e = document.createElement(\"link\");\n            head[0].appendChild(e);\n            e.setAttribute(\"type\", \"text/css\");\n            e.setAttribute(\"rel\", \"stylesheet\");\n            e.setAttribute(\"href\", path);\n        }\n    }\n\n    /**\n     * Combines an arbitrary set of paths ensuring that the slashes are normalized\n     *\n     * @param paths 0 to n path parts to combine\n     */\n    public static combinePaths(...paths: string[]): string {\n\n        return paths\n            .filter(path => !Util.stringIsNullOrEmpty(path))\n            .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n            .join(\"/\")\n            .replace(/\\\\/g, \"/\");\n    }\n\n    /**\n     * Gets a random string of chars length\n     *\n     * @param chars The length of the random string to generate\n     */\n    public static getRandomString(chars: number): string {\n        const text = new Array(chars);\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        for (let i = 0; i < chars; i++) {\n            text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text.join(\"\");\n    }\n\n    /**\n     * Gets a random GUID value\n     *\n     * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n     */\n    /* tslint:disable no-bitwise */\n    public static getGUID(): string {\n        let d = new Date().getTime();\n        const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            const r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return guid;\n    }\n    /* tslint:enable */\n\n    /**\n     * Determines if a given value is a function\n     *\n     * @param candidateFunction The thing to test for being a function\n     */\n    public static isFunction(candidateFunction: any): boolean {\n        return typeof candidateFunction === \"function\";\n    }\n\n    /**\n     * Determines if an object is both defined and not null\n     * @param obj Object to test\n     */\n    public static objectDefinedNotNull(obj: any): boolean {\n        return typeof obj !== \"undefined\" && obj !== null;\n    }\n\n    /**\n     * @returns whether the provided parameter is a JavaScript Array or not.\n    */\n    public static isArray(array: any): boolean {\n\n        if (Array.isArray) {\n            return Array.isArray(array);\n        }\n\n        return array && typeof array.length === \"number\" && array.constructor === Array;\n    }\n\n\n    /**\n     * Determines if a string is null or empty or undefined\n     *\n     * @param s The string to test\n     */\n    public static stringIsNullOrEmpty(s: string): boolean {\n        return typeof s === \"undefined\" || s === null || s.length < 1;\n    }\n\n    /**\n     * Provides functionality to extend the given object by doing a shallow copy\n     *\n     * @param target The object to which properties will be copied\n     * @param source The source object from which properties will be copied\n     * @param noOverwrite If true existing properties on the target are not overwritten from the source\n     *\n     */\n    public static extend(target: any, source: any, noOverwrite = false): any {\n\n        if (!Util.objectDefinedNotNull(source)) {\n            return target;\n        }\n\n        // ensure we don't overwrite things we don't want overwritten\n        const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n        return Object.getOwnPropertyNames(source)\n            .filter((v: string) => check(target, v))\n            .reduce((t: any, v: string) => {\n                t[v] = source[v];\n                return t;\n            }, target);\n    }\n\n    /**\n     * Determines if a given url is absolute\n     *\n     * @param url The url to check to see if it is absolute\n     */\n    public static isUrlAbsolute(url: string): boolean {\n        return /^https?:\\/\\/|^\\/\\//i.test(url);\n    }\n}\n","import { ConfigOptions } from \"./netutil\";\r\nimport { Util } from \"./util\";\r\n\r\nexport function mergeOptions(target: ConfigOptions, source: ConfigOptions): void {\r\n\r\n    if (Util.objectDefinedNotNull(source)) {\r\n        const headers = Util.extend(target.headers || {}, source.headers);\r\n        target = Util.extend(target, source);\r\n        target.headers = headers;\r\n    }\r\n}\r\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport function deprecated(deprecationVersion: string, message: string) {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const method = descriptor.value;\r\n\r\n        descriptor.value = function (this: any, ...args: any[]) {\r\n            Logger.log({\r\n                data: {\r\n                    descriptor: descriptor,\r\n                    propertyKey: propertyKey,\r\n                    target: target,\r\n                },\r\n                level: LogLevel.Warning,\r\n                message: `(${deprecationVersion}) ${message}`,\r\n            });\r\n\r\n            return method.apply(this, args);\r\n        };\r\n    };\r\n}\r\n\r\nexport function beta(message = \"This feature is flagged as beta and is subject to change.\") {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const method = descriptor.value;\r\n\r\n        descriptor.value = function (this: any, ...args: any[]) {\r\n            Logger.log({\r\n                data: {\r\n                    descriptor: descriptor,\r\n                    propertyKey: propertyKey,\r\n                    target: target,\r\n                },\r\n                level: LogLevel.Warning,\r\n                message: message,\r\n            });\r\n\r\n            return method.apply(this, args);\r\n        };\r\n    };\r\n}\r\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport class UrlException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"UrlException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n","import { TypedHash, Dictionary } from \"./collections\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\n\nexport interface LibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: any;\n}\n\nexport class CommonRuntimeConfigKeys {\n    public static readonly defaultCachingStore = \"defaultCachingStore\";\n    public static readonly defaultCachingTimeoutSeconds = \"defaultCachingTimeoutSeconds\";\n    public static readonly globalCacheDisable = \"globalCacheDisable\";\n    public static readonly enableCacheExpiration = \"enableCacheExpiration\";\n    public static readonly cacheExpirationIntervalMilliseconds = \"cacheExpirationIntervalMilliseconds\";\n    public static readonly spfxContext = \"spfxContext\";\n}\n\nexport class RuntimeConfigImpl {\n\n    private _v: Dictionary<any>;\n\n    constructor() {\n\n        this._v = new Dictionary();\n\n        // setup defaults\n        this._v.add(CommonRuntimeConfigKeys.defaultCachingStore, \"session\");\n        this._v.add(CommonRuntimeConfigKeys.defaultCachingTimeoutSeconds, 60);\n        this._v.add(CommonRuntimeConfigKeys.globalCacheDisable, false);\n        this._v.add(CommonRuntimeConfigKeys.enableCacheExpiration, false);\n        this._v.add(CommonRuntimeConfigKeys.cacheExpirationIntervalMilliseconds, 750);\n        this._v.add(CommonRuntimeConfigKeys.spfxContext, null);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public extend(config: TypedHash<any>): void {\n\n        Object.keys(config).forEach((key: string) => {\n            this._v.add(key, config[key]);\n        });\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(CommonRuntimeConfigKeys.defaultCachingStore);\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(CommonRuntimeConfigKeys.defaultCachingTimeoutSeconds);\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(CommonRuntimeConfigKeys.globalCacheDisable);\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(CommonRuntimeConfigKeys.enableCacheExpiration);\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(CommonRuntimeConfigKeys.cacheExpirationIntervalMilliseconds);\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(CommonRuntimeConfigKeys.spfxContext);\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","export interface ConfigOptions {\r\n    headers?: string[][] | { [key: string]: string };\r\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\r\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\r\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\r\n}\r\n\r\nexport interface FetchOptions extends ConfigOptions {\r\n    method?: string;\r\n    body?: any;\r\n}\r\n\r\nexport interface RequestClient {\r\n    fetch(url: string, options?: FetchOptions): Promise<Response>;\r\n    fetchRaw(url: string, options?: FetchOptions): Promise<Response>;\r\n    get(url: string, options?: FetchOptions): Promise<Response>;\r\n    post(url: string, options?: FetchOptions): Promise<Response>;\r\n    patch(url: string, options?: FetchOptions): Promise<Response>;\r\n    delete(url: string, options?: FetchOptions): Promise<Response>;\r\n}\r\n\r\nexport function mergeHeaders(target: Headers, source: any): void {\r\n    if (typeof source !== \"undefined\" && source !== null) {\r\n        const temp = <any>new Request(\"\", { headers: source });\r\n        temp.headers.forEach((value: string, name: string) => {\r\n            target.append(name, value);\r\n        });\r\n    }\r\n}\r\n","import { Util } from \"./util\";\nimport { Dictionary } from \"./collections\";\nimport { RuntimeConfig } from \"./libconfig\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements PnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n        this.enabled = this.test();\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            Logger.write(`Enabling cache expiration.`, LogLevel.Info);\n            this.cacheExpirationHandler();\n        }\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (o == null) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n\n            Logger.write(`Removing item with key '${key}' from cache due to expiration.`, LogLevel.Info);\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n        if (!this.enabled) {\n            return getter();\n        }\n\n        return new Promise((resolve) => {\n\n            const o = this.get<T>(key);\n\n            if (o == null) {\n                getter().then((d) => {\n                    this.put(key, d, expire);\n                    resolve(d);\n                });\n            } else {\n                resolve(o);\n            }\n        });\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public deleteExpired(): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            if (!this.enabled) {\n                resolve();\n            }\n\n            try {\n\n                for (let i = 0; i < this.store.length; i++) {\n                    const key = this.store.key(i);\n                    if (key !== null) {\n                        // test the stored item to see if we stored it\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                            // get those items as get will delete from cache if they are expired\n                            this.get(key);\n                        }\n                    }\n                }\n\n                resolve();\n\n            } catch (e) { reject(e); }\n        });\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"test\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (typeof expire === \"undefined\") {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = Util.dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return JSON.stringify({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        Logger.write(\"Called cache expiration handler.\", LogLevel.Verbose);\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(Util.getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(e => {\n\n            // we've got some error - so just stop the loop and report the error\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: \"Error deleting expired cache entries, see data for details. Timeout not reset.\",\n            });\n        });\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface PnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut(key: string, getter: Function, expire?: Date): any;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Dictionary<string>()) { }\n\n    public get length(): number {\n        return this._store.count();\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return this._store.getKeys()[index];\n    }\n\n    public removeItem(key: string): void {\n        this._store.remove(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.add(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: PnPClientStore | null = null, private _session: PnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): PnPClientStore {\n\n        if (this._local === null) {\n            this._local = typeof localStorage !== \"undefined\" ? new PnPClientStorageWrapper(localStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): PnPClientStore {\n\n        if (this._session === null) {\n            this._session = typeof sessionStorage !== \"undefined\" ? new PnPClientStorageWrapper(sessionStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._session;\n    }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}