{"version":3,"sources":["../../../../packages/common/src/blobutil.ts","../../../../packages/common/src/collections.ts","../../../../packages/common/src/util.ts","../../../../packages/common/src/exceptions.ts","../../../../packages/common/src/libconfig.ts","../../../../packages/common/src/storage.ts","../../../../packages/common/src/configutil.ts","../../../../packages/common/src/decorators.ts","../../../../packages/common/src/netutil.ts"],"names":["readBlobAs","blob","mode","Promise","resolve","reject","reader","FileReader","onload","e","target","result","readAsText","readAsArrayBuffer","Dictionary","keys","values","this","prototype","get","key","index","indexOf","add","o","remove","push","merge","source","_this","sourceAsDictionary_1","getKeys","map","sourceAsHash","hasOwnProperty","val","splice","getValues","clear","count","length","Util","getCtxCallback","context","method","params","_i","arguments","apply","urlParamExists","name","replace","RegExp","test","location","search","getUrlParamByName","results","exec","decodeURIComponent","getUrlParamBoolByName","p","stringInsert","s","substring","dateAdd","date","interval","units","ret","Date","toLowerCase","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setTime","getTime","undefined","loadStylesheet","path","avoidCache","encodeURIComponent","toString","head","document","getElementsByTagName","createElement","appendChild","setAttribute","combinePaths","paths","filter","stringIsNullOrEmpty","join","getRandomString","chars","text","Array","possible","i","charAt","Math","floor","random","getGUID","d","c","r","isFunction","candidateFunction","objectDefinedNotNull","obj","isArray","array","constructor","extend","noOverwrite","check","Object","getOwnPropertyNames","v","reduce","t","isUrlAbsolute","url","NodeFetchClientUnsupportedException","_super","msg","call","Logger","log","data","level","LogLevel","Error","message","__extends","FunctionExpectedException","UrlException","CommonRuntimeConfigKeys","defaultCachingStore","defaultCachingTimeoutSeconds","globalCacheDisable","enableCacheExpiration","cacheExpirationIntervalMilliseconds","spfxContext","RuntimeConfigImpl","_v","config","forEach","defineProperty","RuntimeConfig","PnPClientStorageWrapper","store","defaultTimeoutMinutes","enabled","write","Info","cacheExpirationHandler","getItem","persistable","JSON","parse","expiration","delete","value","put","expire","setItem","createPersistable","removeItem","getOrPut","getter","then","deleteExpired","defaultTimeout","stringify","pnp","Verbose","_","setTimeout","catch","MemoryStorage","_store","PnPClientStorage","_local","_session","localStorage","sessionStorage","headers","deprecationVersion","propertyKey","descriptor","args","Warning","Request","append"],"mappings":"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","sourcesContent":["/**\r\n * Reads a blob as text\r\n *\r\n * @param blob The data to read\r\n */\r\nexport function readBlobAsText(blob: Blob): Promise<string> {\r\n    return readBlobAs<string>(blob, \"string\");\r\n}\r\n\r\n/**\r\n * Reads a blob into an array buffer\r\n *\r\n * @param blob The data to read\r\n */\r\nexport function readBlobAsArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\r\n    return readBlobAs<ArrayBuffer>(blob, \"buffer\");\r\n}\r\n\r\n/**\r\n * Generic method to read blob's content\r\n *\r\n * @param blob The data to read\r\n * @param mode The read mode\r\n */\r\nfunction readBlobAs<T>(blob: Blob, mode: \"string\" | \"buffer\"): Promise<T> {\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = (e: FileReaderEvent<T>) => {\r\n                resolve(e.target.result);\r\n            };\r\n\r\n            switch (mode) {\r\n                case \"string\":\r\n                    reader.readAsText(blob);\r\n                    break;\r\n                case \"buffer\":\r\n                    reader.readAsArrayBuffer(blob);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Used to cast the event response target\r\n */\r\ninterface FileReaderEventTarget<T> extends EventTarget {\r\n    result: T;\r\n}\r\n\r\n/**\r\n * Used to cast the event response\r\n */\r\ninterface FileReaderEvent<T> extends Event {\r\n    target: FileReaderEventTarget<T>;\r\n    getMessage(): string;\r\n}\r\n","/**\r\n * Interface defining an object with a known property type\r\n */\r\nexport interface TypedHash<T> {\r\n    [key: string]: T;\r\n}\r\n\r\n/**\r\n * Generic dictionary\r\n */\r\nexport class Dictionary<T> {\r\n\r\n    /**\r\n     * Creates a new instance of the Dictionary<T> class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(private keys: string[] = [], private values: T[] = []) {\r\n    }\r\n\r\n    /**\r\n     * Gets a value from the collection using the specified key\r\n     *\r\n     * @param key The key whose value we want to return, returns null if the key does not exist\r\n     */\r\n    public get(key: string): T | null {\r\n        const index = this.keys.indexOf(key);\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        return this.values[index];\r\n    }\r\n\r\n    /**\r\n     * Adds the supplied key and value to the dictionary\r\n     *\r\n     * @param key The key to add\r\n     * @param o The value to add\r\n     */\r\n    public add(key: string, o: T | null): void {\r\n        const index = this.keys.indexOf(key);\r\n        if (index > -1) {\r\n            if (o === null) {\r\n                this.remove(key);\r\n            } else {\r\n                this.values[index] = o;\r\n            }\r\n        } else {\r\n            if (o !== null) {\r\n                this.keys.push(key);\r\n                this.values.push(o);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merges the supplied typed hash into this dictionary instance. Existing values are updated and new ones are created as appropriate.\r\n     */\r\n    public merge(source: TypedHash<T> | Dictionary<T>): void {\r\n        if (\"getKeys\" in source) {\r\n            const sourceAsDictionary = source as Dictionary<T>;\r\n            sourceAsDictionary.getKeys().map(key => {\r\n                this.add(key, sourceAsDictionary.get(key));\r\n            });\r\n        } else {\r\n            const sourceAsHash = source as TypedHash<T>;\r\n            for (const key in sourceAsHash) {\r\n                if (sourceAsHash.hasOwnProperty(key)) {\r\n                    this.add(key, sourceAsHash[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a value from the dictionary\r\n     *\r\n     * @param key The key of the key/value pair to remove. Returns null if the key was not found.\r\n     */\r\n    public remove(key: string): T | null {\r\n        const index = this.keys.indexOf(key);\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const val = this.values[index];\r\n        this.keys.splice(index, 1);\r\n        this.values.splice(index, 1);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Returns all the keys currently in the dictionary as an array\r\n     */\r\n    public getKeys(): string[] {\r\n        return this.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns all the values currently in the dictionary as an array\r\n     */\r\n    public getValues(): T[] {\r\n        return this.values;\r\n    }\r\n\r\n    /**\r\n     * Clears the current dictionary\r\n     */\r\n    public clear(): void {\r\n        this.keys = [];\r\n        this.values = [];\r\n    }\r\n\r\n    /**\r\n     * Gets a count of the items currently in the dictionary\r\n     */\r\n    public count(): number {\r\n        return this.keys.length;\r\n    }\r\n}\r\n","export class Util {\n\n    /**\n     * Gets a callback function which will maintain context across async calls.\n     * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n     *\n     * @param context The object that will be the 'this' value in the callback\n     * @param method The method to which we will apply the context and parameters\n     * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n     */\n    public static getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n        return function () {\n            method.apply(context, params);\n        };\n    }\n\n    /**\n     * Tests if a url param exists\n     *\n     * @param name The name of the url paramter to check\n     */\n    public static urlParamExists(name: string): boolean {\n        name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n        const regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n        return regex.test(location.search);\n    }\n\n    /**\n     * Gets a url param value by name\n     *\n     * @param name The name of the paramter for which we want the value\n     */\n    public static getUrlParamByName(name: string): string {\n        name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n        const regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n        const results = regex.exec(location.search);\n        return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n\n    /**\n     * Gets a url param by name and attempts to parse a bool value\n     *\n     * @param name The name of the paramter for which we want the boolean value\n     */\n    public static getUrlParamBoolByName(name: string): boolean {\n        const p = this.getUrlParamByName(name);\n        const isFalse = (p === \"\" || /false|0/i.test(p));\n        return !isFalse;\n    }\n\n    /**\n     * Inserts the string s into the string target as the index specified by index\n     *\n     * @param target The string into which we will insert s\n     * @param index The location in target to insert s (zero based)\n     * @param s The string to insert into target at position index\n     */\n    public static stringInsert(target: string, index: number, s: string): string {\n        if (index > 0) {\n            return target.substring(0, index) + s + target.substring(index, target.length);\n        }\n        return s + target;\n    }\n\n    /**\n     * Adds a value to a date\n     *\n     * @param date The date to which we will add units, done in local time\n     * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n     * @param units The amount to add to date of the given interval\n     *\n     * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n     */\n    public static dateAdd(date: Date, interval: string, units: number): Date | undefined {\n        let ret: Date | undefined = new Date(date); // don't change original date\n        switch (interval.toLowerCase()) {\n            case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n            case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n            case \"month\": ret.setMonth(ret.getMonth() + units); break;\n            case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n            case \"day\": ret.setDate(ret.getDate() + units); break;\n            case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n            case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n            case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n            default: ret = undefined; break;\n        }\n        return ret;\n    }\n\n    /**\n     * Loads a stylesheet into the current page\n     *\n     * @param path The url to the stylesheet\n     * @param avoidCache If true a value will be appended as a query string to avoid browser caching issues\n     */\n    public static loadStylesheet(path: string, avoidCache: boolean): void {\n        if (avoidCache) {\n            path += \"?\" + encodeURIComponent((new Date()).getTime().toString());\n        }\n        const head = document.getElementsByTagName(\"head\");\n        if (head.length > 0) {\n            const e = document.createElement(\"link\");\n            head[0].appendChild(e);\n            e.setAttribute(\"type\", \"text/css\");\n            e.setAttribute(\"rel\", \"stylesheet\");\n            e.setAttribute(\"href\", path);\n        }\n    }\n\n    /**\n     * Combines an arbitrary set of paths ensuring that the slashes are normalized\n     *\n     * @param paths 0 to n path parts to combine\n     */\n    public static combinePaths(...paths: string[]): string {\n\n        return paths\n            .filter(path => !Util.stringIsNullOrEmpty(path))\n            .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n            .join(\"/\")\n            .replace(/\\\\/g, \"/\");\n    }\n\n    /**\n     * Gets a random string of chars length\n     *\n     * @param chars The length of the random string to generate\n     */\n    public static getRandomString(chars: number): string {\n        const text = new Array(chars);\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        for (let i = 0; i < chars; i++) {\n            text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text.join(\"\");\n    }\n\n    /**\n     * Gets a random GUID value\n     *\n     * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n     */\n    /* tslint:disable no-bitwise */\n    public static getGUID(): string {\n        let d = new Date().getTime();\n        const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            const r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return guid;\n    }\n    /* tslint:enable */\n\n    /**\n     * Determines if a given value is a function\n     *\n     * @param candidateFunction The thing to test for being a function\n     */\n    public static isFunction(candidateFunction: any): boolean {\n        return typeof candidateFunction === \"function\";\n    }\n\n    /**\n     * Determines if an object is both defined and not null\n     * @param obj Object to test\n     */\n    public static objectDefinedNotNull(obj: any): boolean {\n        return typeof obj !== \"undefined\" && obj !== null;\n    }\n\n    /**\n     * @returns whether the provided parameter is a JavaScript Array or not.\n    */\n    public static isArray(array: any): boolean {\n\n        if (Array.isArray) {\n            return Array.isArray(array);\n        }\n\n        return array && typeof array.length === \"number\" && array.constructor === Array;\n    }\n\n\n    /**\n     * Determines if a string is null or empty or undefined\n     *\n     * @param s The string to test\n     */\n    public static stringIsNullOrEmpty(s: string): boolean {\n        return typeof s === \"undefined\" || s === null || s.length < 1;\n    }\n\n    /**\n     * Provides functionality to extend the given object by doing a shallow copy\n     *\n     * @param target The object to which properties will be copied\n     * @param source The source object from which properties will be copied\n     * @param noOverwrite If true existing properties on the target are not overwritten from the source\n     *\n     */\n    public static extend(target: any, source: any, noOverwrite = false): any {\n\n        if (!Util.objectDefinedNotNull(source)) {\n            return target;\n        }\n\n        // ensure we don't overwrite things we don't want overwritten\n        const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n        return Object.getOwnPropertyNames(source)\n            .filter((v: string) => check(target, v))\n            .reduce((t: any, v: string) => {\n                t[v] = source[v];\n                return t;\n            }, target);\n    }\n\n    /**\n     * Determines if a given url is absolute\n     *\n     * @param url The url to check to see if it is absolute\n     */\n    public static isUrlAbsolute(url: string): boolean {\n        return /^https?:\\/\\/|^\\/\\//i.test(url);\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport class NodeFetchClientUnsupportedException extends Error {\r\n\r\n    constructor(msg = \"Using NodeFetchClient in the browser is not supported.\") {\r\n        super(msg);\r\n        this.name = \"NodeFetchClientUnsupportedException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class FunctionExpectedException extends Error {\r\n\r\n    constructor(msg = \"Expected a function.\") {\r\n        super(msg);\r\n        this.name = \"FunctionExpectedException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class UrlException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"UrlException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n","import { TypedHash, Dictionary } from \"./collections\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\n\nexport interface LibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: any;\n}\n\nexport class CommonRuntimeConfigKeys {\n    public static readonly defaultCachingStore = \"defaultCachingStore\";\n    public static readonly defaultCachingTimeoutSeconds = \"defaultCachingTimeoutSeconds\";\n    public static readonly globalCacheDisable = \"globalCacheDisable\";\n    public static readonly enableCacheExpiration = \"enableCacheExpiration\";\n    public static readonly cacheExpirationIntervalMilliseconds = \"cacheExpirationIntervalMilliseconds\";\n    public static readonly spfxContext = \"spfxContext\";\n}\n\nexport class RuntimeConfigImpl {\n\n    private _v: Dictionary<any>;\n\n    constructor() {\n\n        this._v = new Dictionary();\n\n        // setup defaults\n        this._v.add(CommonRuntimeConfigKeys.defaultCachingStore, \"session\");\n        this._v.add(CommonRuntimeConfigKeys.defaultCachingTimeoutSeconds, 60);\n        this._v.add(CommonRuntimeConfigKeys.globalCacheDisable, false);\n        this._v.add(CommonRuntimeConfigKeys.enableCacheExpiration, false);\n        this._v.add(CommonRuntimeConfigKeys.cacheExpirationIntervalMilliseconds, 750);\n        this._v.add(CommonRuntimeConfigKeys.spfxContext, null);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public extend(config: TypedHash<any>): void {\n\n        Object.keys(config).forEach((key: string) => {\n            this._v.add(key, config[key]);\n        });\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(CommonRuntimeConfigKeys.defaultCachingStore);\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(CommonRuntimeConfigKeys.defaultCachingTimeoutSeconds);\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(CommonRuntimeConfigKeys.globalCacheDisable);\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(CommonRuntimeConfigKeys.enableCacheExpiration);\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(CommonRuntimeConfigKeys.cacheExpirationIntervalMilliseconds);\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(CommonRuntimeConfigKeys.spfxContext);\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","import { Util } from \"./util\";\nimport { Dictionary } from \"./collections\";\nimport { RuntimeConfig } from \"./libconfig\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements PnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n        this.enabled = this.test();\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            Logger.write(`Enabling cache expiration.`, LogLevel.Info);\n            this.cacheExpirationHandler();\n        }\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (o == null) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n\n            Logger.write(`Removing item with key '${key}' from cache due to expiration.`, LogLevel.Info);\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n        if (!this.enabled) {\n            return getter();\n        }\n\n        return new Promise((resolve) => {\n\n            const o = this.get<T>(key);\n\n            if (o == null) {\n                getter().then((d) => {\n                    this.put(key, d, expire);\n                    resolve(d);\n                });\n            } else {\n                resolve(o);\n            }\n        });\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public deleteExpired(): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            if (!this.enabled) {\n                resolve();\n            }\n\n            try {\n\n                for (let i = 0; i < this.store.length; i++) {\n                    const key = this.store.key(i);\n                    if (key !== null) {\n                        // test the stored item to see if we stored it\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                            // get those items as get will delete from cache if they are expired\n                            this.get(key);\n                        }\n                    }\n                }\n\n                resolve();\n\n            } catch (e) { reject(e); }\n        });\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"test\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (typeof expire === \"undefined\") {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = Util.dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return JSON.stringify({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        Logger.write(\"Called cache expiration handler.\", LogLevel.Verbose);\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(Util.getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(e => {\n\n            // we've got some error - so just stop the loop and report the error\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: \"Error deleting expired cache entries, see data for details. Timeout not reset.\",\n            });\n        });\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface PnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut(key: string, getter: Function, expire?: Date): any;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Dictionary<string>()) { }\n\n    public get length(): number {\n        return this._store.count();\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return this._store.getKeys()[index];\n    }\n\n    public removeItem(key: string): void {\n        this._store.remove(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.add(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: PnPClientStore | null = null, private _session: PnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): PnPClientStore {\n\n        if (this._local === null) {\n            this._local = typeof localStorage !== \"undefined\" ? new PnPClientStorageWrapper(localStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): PnPClientStore {\n\n        if (this._session === null) {\n            this._session = typeof sessionStorage !== \"undefined\" ? new PnPClientStorageWrapper(sessionStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._session;\n    }\n}\n","import { ConfigOptions } from \"./netutil\";\r\nimport { Util } from \"./util\";\r\n\r\nexport function mergeOptions(target: ConfigOptions, source: ConfigOptions): void {\r\n\r\n    if (Util.objectDefinedNotNull(source)) {\r\n        const headers = Util.extend(target.headers || {}, source.headers);\r\n        target = Util.extend(target, source);\r\n        target.headers = headers;\r\n    }\r\n}\r\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport function deprecated(deprecationVersion: string, message: string) {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const method = descriptor.value;\r\n\r\n        descriptor.value = function (this: any, ...args: any[]) {\r\n            Logger.log({\r\n                data: {\r\n                    descriptor: descriptor,\r\n                    propertyKey: propertyKey,\r\n                    target: target,\r\n                },\r\n                level: LogLevel.Warning,\r\n                message: `(${deprecationVersion}) ${message}`,\r\n            });\r\n\r\n            return method.apply(this, args);\r\n        };\r\n    };\r\n}\r\n\r\nexport function beta(message = \"This feature is flagged as beta and is subject to change.\") {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const method = descriptor.value;\r\n\r\n        descriptor.value = function (this: any, ...args: any[]) {\r\n            Logger.log({\r\n                data: {\r\n                    descriptor: descriptor,\r\n                    propertyKey: propertyKey,\r\n                    target: target,\r\n                },\r\n                level: LogLevel.Warning,\r\n                message: message,\r\n            });\r\n\r\n            return method.apply(this, args);\r\n        };\r\n    };\r\n}\r\n","export interface ConfigOptions {\r\n    headers?: string[][] | { [key: string]: string };\r\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\r\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\r\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\r\n}\r\n\r\nexport interface FetchOptions extends ConfigOptions {\r\n    method?: string;\r\n    body?: any;\r\n}\r\n\r\nexport interface RequestClient {\r\n    fetch(url: string, options?: FetchOptions): Promise<Response>;\r\n    fetchRaw(url: string, options?: FetchOptions): Promise<Response>;\r\n    get(url: string, options?: FetchOptions): Promise<Response>;\r\n    post(url: string, options?: FetchOptions): Promise<Response>;\r\n    patch(url: string, options?: FetchOptions): Promise<Response>;\r\n    delete(url: string, options?: FetchOptions): Promise<Response>;\r\n}\r\n\r\nexport function mergeHeaders(target: Headers, source: any): void {\r\n    if (typeof source !== \"undefined\" && source !== null) {\r\n        const temp = <any>new Request(\"\", { headers: source });\r\n        temp.headers.forEach((value: string, name: string) => {\r\n            target.append(name, value);\r\n        });\r\n    }\r\n}\r\n"]}