{"version":3,"file":"common.es5.umd.js","sources":["../../../../packages/common/src/decorators.ts","../../../../packages/common/src/util.ts","../../../../packages/common/src/netutil.ts","../../../../packages/common/src/adalclient.ts","../../../../packages/common/src/blobutil.ts","../../../../packages/common/src/collections.ts","../../../../packages/common/src/exceptions.ts","../../../../packages/common/src/libconfig.ts","../../../../packages/common/src/storage.ts"],"sourcesContent":["import { LogLevel, Logger } from \"@pnp/logging\";\n\nexport function deprecatedClass(deprecationVersion: string, message: string) {\n\n    return (target: any): void => {\n        Logger.log({\n            data: {\n                target: target,\n            },\n            level: LogLevel.Warning,\n            message: `(${deprecationVersion}) ${message}`,\n        });\n    };\n}\n\nexport function deprecated(deprecationVersion: string, message: string) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor): any => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: `(${deprecationVersion}) ${message}`,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n\nexport function beta(message = \"This feature is flagged as beta and is subject to change.\") {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: message,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n","import { TypedHash } from \"./collections\";\nimport { deprecatedClass } from \"./decorators\";\n\n/**\n * Gets a callback function which will maintain context across async calls.\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n *\n * @param context The object that will be the 'this' value in the callback\n * @param method The method to which we will apply the context and parameters\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n */\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n    return function () {\n        method.apply(context, params);\n    };\n}\n\nexport type DateAddInterval = \"year\" | \"quarter\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\n\n/**\n * Adds a value to a date\n *\n * @param date The date to which we will add units, done in local time\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n * @param units The amount to add to date of the given interval\n *\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n */\nexport function dateAdd(date: Date, interval: DateAddInterval, units: number): Date | undefined {\n    let ret: Date | undefined = new Date(date); // don't change original date\n    switch (interval.toLowerCase()) {\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n        case \"day\": ret.setDate(ret.getDate() + units); break;\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n        default: ret = undefined; break;\n    }\n    return ret;\n}\n\n/**\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\n *\n * @param paths 0 to n path parts to combine\n */\nexport function combinePaths(...paths: string[]): string {\n\n    return paths\n        .filter(path => !stringIsNullOrEmpty(path))\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n        .join(\"/\")\n        .replace(/\\\\/g, \"/\");\n}\n\n/**\n * Gets a random string of chars length\n * \n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n *\n * @param chars The length of the random string to generate\n */\nexport function getRandomString(chars: number): string {\n    const text = new Array(chars);\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < chars; i++) {\n        text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text.join(\"\");\n}\n\n/**\n * Gets a random GUID value\n *\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\n/* tslint:disable no-bitwise */\nexport function getGUID(): string {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return guid;\n}\n/* tslint:enable */\n\n/**\n * Determines if a given value is a function\n *\n * @param cf The thing to test for functionness\n */\nexport function isFunc(cf: any): boolean {\n    return typeof cf === \"function\";\n}\n\n/**\n * Determines if an object is both defined and not null\n * @param obj Object to test\n */\nexport function objectDefinedNotNull(obj: any): boolean {\n    return typeof obj !== \"undefined\" && obj !== null;\n}\n\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n*/\nexport function isArray(array: any): boolean {\n\n    if (Array.isArray) {\n        return Array.isArray(array);\n    }\n\n    return array && typeof array.length === \"number\" && array.constructor === Array;\n}\n\n/**\n * Provides functionality to extend the given object by doing a shallow copy\n *\n * @param target The object to which properties will be copied\n * @param source The source object from which properties will be copied\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\n * @param filter If provided allows additional filtering on what properties are copied (propName: string) => boolean\n *\n */\nexport function extend<T extends TypedHash<any> = any, S extends TypedHash<any> = any>(target: T, source: S, noOverwrite = false, filter?: (propName: string) => boolean): T & S {\n\n    if (!objectDefinedNotNull(source)) {\n        return <T & S>target;\n    }\n\n    // ensure we don't overwrite things we don't want overwritten\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n    // allow filtering of copied properties\n    const check2: (p: string) => boolean = isFunc(filter) ? filter : () => true;\n\n    // final filter we will use\n    const f = (v: string) => check(target, v) && check2(v);\n\n    return Object.getOwnPropertyNames(source)\n        .filter(f)\n        .reduce((t: any, v: string) => {\n            t[v] = source[v];\n            return t;\n        }, target);\n}\n\n/**\n * Determines if a given url is absolute\n *\n * @param url The url to check to see if it is absolute\n */\nexport function isUrlAbsolute(url: string): boolean {\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\n}\n\n/**\n * Determines if a string is null or empty or undefined\n *\n * @param s The string to test\n */\nexport function stringIsNullOrEmpty(s: string): boolean {\n    return typeof s === \"undefined\" || s === null || s.length < 1;\n}\n\n/**\n * Gets an attribute value from an html/xml string block. NOTE: if the input attribute value has\n * RegEx special characters they will be escaped in the returned string\n * \n * @param html HTML to search\n * @param attrName The name of the attribute to find\n */\nexport function getAttrValueFromString(html: string, attrName: string): string {\n\n    // make the input safe for regex\n    html = html.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    const reg = new RegExp(`${attrName}\\\\s*?=\\\\s*?(\"|')([^\\\\1]*?)\\\\1`, \"i\");\n    const match = reg.exec(html);\n    return match !== null && match.length > 0 ? match[2] : null;\n}\n\n/**\n * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\n * \n * @param guid The candidate guid\n */\nexport function sanitizeGuid(guid: string): string {\n\n    if (stringIsNullOrEmpty(guid)) {\n        return guid;\n    }\n\n    const matches = /([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})/i.exec(guid);\n\n    return matches === null ? guid : matches[1];\n}\n\ndeprecatedClass(\"1.1.0\", \"The Util class will be removed two major releases from the stated version. Please migrate to the individual exposed methods.\");\nexport class Util {\n\n    /**\n     * Gets a callback function which will maintain context across async calls.\n     * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n     *\n     * @param context The object that will be the 'this' value in the callback\n     * @param method The method to which we will apply the context and parameters\n     * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n     */\n    public static getCtxCallback = getCtxCallback;\n\n\n    /**\n     * Adds a value to a date\n     *\n     * @param date The date to which we will add units, done in local time\n     * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n     * @param units The amount to add to date of the given interval\n     *\n     * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n     */\n    public static dateAdd = dateAdd;\n\n    /**\n     * Combines an arbitrary set of paths ensuring and normalizes the slashes\n     *\n     * @param paths 0 to n path parts to combine\n     */\n    public static combinePaths = combinePaths;\n\n    /**\n     * Gets a random string of chars length\n     *\n     * @param chars The length of the random string to generate\n     */\n    public static getRandomString = getRandomString;\n\n    /**\n     * Gets a random GUID value\n     *\n     * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n     */\n    public static getGUID = getGUID;\n\n    /**\n     * Determines if a given value is a function\n     *\n     * @param cf The thing to test for functionness\n     */\n    public static isFunc = isFunc;\n\n    /**\n     * Determines if an object is both defined and not null\n     * @param obj Object to test\n     */\n    public static objectDefinedNotNull = objectDefinedNotNull;\n\n    /**\n     * @returns whether the provided parameter is a JavaScript Array or not.\n    */\n    public static isArray = isArray;\n\n    /**\n     * Provides functionality to extend the given object by doing a shallow copy\n     *\n     * @param target The object to which properties will be copied\n     * @param source The source object from which properties will be copied\n     * @param noOverwrite If true existing properties on the target are not overwritten from the source\n     *\n     */\n    public static extend = extend;\n\n    /**\n     * Determines if a given url is absolute\n     *\n     * @param url The url to check to see if it is absolute\n     */\n    public static isUrlAbsolute = isUrlAbsolute;\n\n    /**\n     * Determines if a string is null or empty or undefined\n     *\n     * @param s The string to test\n     */\n    public static stringIsNullOrEmpty = stringIsNullOrEmpty;\n\n    /**\n     * Gets an attribute value from an html/xml string block\n     * \n     * @param html HTML to search\n     * @param attrName The name of the attribute to find\n     */\n    public static getAttrValueFromString = getAttrValueFromString;\n\n    /**\n     * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\n     * \n     * @param guid The candidate guid id\n     */\n    public static sanitizeGuid = sanitizeGuid;\n}\n","import { extend, objectDefinedNotNull } from \"./util\";\n\ndeclare var global: { fetch(url: string, options: any): Promise<Response> };\n\nexport interface ConfigOptions {\n    headers?: string[][] | { [key: string]: string } | Headers;\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\n}\n\nexport interface FetchOptions extends ConfigOptions {\n    method?: string;\n    body?: any;\n}\n\nexport interface HttpClientImpl {\n    fetch(url: string, options: FetchOptions): Promise<Response>;\n}\n\nexport interface RequestClient {\n    fetch(url: string, options?: FetchOptions): Promise<Response>;\n    fetchRaw(url: string, options?: FetchOptions): Promise<Response>;\n    get(url: string, options?: FetchOptions): Promise<Response>;\n    post(url: string, options?: FetchOptions): Promise<Response>;\n    patch(url: string, options?: FetchOptions): Promise<Response>;\n    delete(url: string, options?: FetchOptions): Promise<Response>;\n}\n\nexport function mergeHeaders(target: Headers, source: any): void {\n    if (typeof source !== \"undefined\" && source !== null) {\n        const temp = <any>new Request(\"\", { headers: source });\n        temp.headers.forEach((value: string, name: string) => {\n            target.append(name, value);\n        });\n    }\n}\n\nexport function mergeOptions(target: ConfigOptions, source: ConfigOptions): void {\n\n    if (objectDefinedNotNull(source)) {\n        const headers = extend(target.headers || {}, source.headers);\n        target = extend(target, source);\n        target.headers = headers;\n    }\n}\n\n/**\n * Makes requests using the global/window fetch API\n */\nexport class FetchClient implements HttpClientImpl {\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n        return global.fetch(url, options);\n    }\n}\n\n/**\n * Makes requests using the fetch API adding the supplied token to the Authorization header\n */\nexport class BearerTokenFetchClient extends FetchClient {\n\n    constructor(private _token: string) {\n        super();\n    }\n\n    public get token() {\n        return this._token;\n    }\n\n    public set token(token: string) {\n        this._token = token;\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        mergeHeaders(headers, options.headers);\n\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\n\n        options.headers = headers;\n\n        return super.fetch(url, options);\n    }\n}\n","import * as AuthenticationContext from \"adal-angular\";\nimport { BearerTokenFetchClient, FetchOptions } from \"./netutil\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\nimport { combinePaths, isUrlAbsolute } from \"./util\";\n\n/**\n * Azure AD Client for use in the browser\n */\nexport class AdalClient extends BearerTokenFetchClient {\n\n    /**\n     * Our auth context\n     */\n    private static _authContext: AuthenticationContext | null = null;\n\n    /**\n     * Callback used by the adal auth system\n     */\n    private _displayCallback: (url: string) => void | null;\n\n    /**\n     * Promise used to ensure the user is logged in\n     */\n    private _loginPromise: Promise<void> | null;\n\n    /**\n     * Creates a new instance of AdalClient\n     * @param clientId Azure App Id\n     * @param tenant Office 365 tenant (Ex: {tenant}.onmicrosoft.com)\n     * @param redirectUri The redirect url used to authenticate the \n     */\n    constructor(public clientId: string, public tenant: string, public redirectUri: string) {\n        super(null);\n    }\n\n    /**\n     * Creates a new AdalClient using the values of the supplied SPFx context\n     * \n     * @param spfxContext Current SPFx context\n     * @param clientId Optional client id to use instead of the built-in SPFx id\n     * @description Using this method and the default clientId requires that the features described in\n     * this article https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient are activated in the tenant. If not you can\n     * creat your own app, grant permissions and use that clientId here along with the SPFx context\n     */\n    public static fromSPFxContext(spfxContext: ISPFXContext | any, cliendId = \"c58637bb-e2e1-4312-8a00-04b5ffcd3403\"): AdalClient {\n\n        // this \"magic\" client id is the one to which permissions are granted behind the scenes\n        // this redirectUrl is the page as used by spfx\n        return new AdalClient(cliendId, spfxContext.pageContext.aadInfo.tenantId.toString(), combinePaths(window.location.origin, \"/_forms/spfxsinglesignon.aspx\"));\n    }\n\n    /**\n     * Conducts the fetch opertation against the AAD secured resource\n     * \n     * @param url Absolute URL for the request\n     * @param options Any fetch options passed to the underlying fetch implementation\n     */\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n\n        if (!isUrlAbsolute(url)) {\n            throw new Error(\"You must supply absolute urls to AdalClient.fetch.\");\n        }\n\n        // the url we are calling is the resource\n        return this.getToken(this.getResource(url)).then(token => {\n            this.token = token;\n            return super.fetch(url, options);\n        });\n    }\n\n    /**\n     * Gets a token based on the current user\n     * \n     * @param resource The resource for which we are requesting a token\n     */\n    public getToken(resource: string): Promise<string> {\n\n        return new Promise((resolve, reject) => {\n\n            this.ensureAuthContext().then(_ => this.login()).then(_ => {\n\n                AdalClient._authContext.acquireToken(resource, (message: string, token: string) => {\n\n                    if (message) {\n                        return reject(new Error(message));\n                    }\n\n                    resolve(token);\n                });\n\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Ensures we have created and setup the adal AuthenticationContext instance\n     */\n    private ensureAuthContext(): Promise<void> {\n\n        return new Promise(resolve => {\n\n            if (AdalClient._authContext === null) {\n                AdalClient._authContext = AuthenticationContext.inject({\n                    clientId: this.clientId,\n                    displayCall: (url: string) => {\n                        if (this._displayCallback) {\n                            this._displayCallback(url);\n                        }\n                    },\n                    navigateToLoginRequestUrl: false,\n                    redirectUri: this.redirectUri,\n                    tenant: this.tenant,\n                });\n            }\n\n            resolve();\n        });\n    }\n\n    /**\n     * Ensures the current user is logged in\n     */\n    private login(): Promise<void> {\n\n        if (this._loginPromise) {\n            return this._loginPromise;\n        }\n\n        this._loginPromise = new Promise((resolve, reject) => {\n\n            if (AdalClient._authContext.getCachedUser()) {\n                return resolve();\n            }\n\n            this._displayCallback = (url: string) => {\n\n                const popupWindow = window.open(url, \"login\", \"width=483, height=600\");\n\n                if (!popupWindow) {\n                    return reject(new Error(\"Could not open pop-up window for auth. Likely pop-ups are blocked by the browser.\"));\n                }\n\n                if (popupWindow && popupWindow.focus) {\n                    popupWindow.focus();\n                }\n\n                const pollTimer = window.setInterval(() => {\n\n                    if (!popupWindow || popupWindow.closed || popupWindow.closed === undefined) {\n                        window.clearInterval(pollTimer);\n                    }\n\n                    try {\n                        if (popupWindow.document.URL.indexOf(this.redirectUri) !== -1) {\n                            window.clearInterval(pollTimer);\n                            AdalClient._authContext.handleWindowCallback(popupWindow.location.hash);\n                            popupWindow.close();\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 30);\n            };\n\n            // this triggers the login process\n            this.ensureAuthContext().then(_ => {\n                (<any>AdalClient._authContext)._loginInProgress = false;\n                AdalClient._authContext.login();\n                this._displayCallback = null;\n            });\n        });\n\n        return this._loginPromise;\n    }\n\n    /**\n     * Parses out the root of the request url to use as the resource when getting the token\n     * \n     * After: https://gist.github.com/jlong/2428561\n     * @param url The url to parse\n     */\n    private getResource(url: string): string {\n        const parser = <HTMLAnchorElement>document.createElement(\"a\");\n        parser.href = url;\n        return `${parser.protocol}//${parser.hostname}`;\n    }\n}\n","/**\n * Reads a blob as text\n *\n * @param blob The data to read\n */\nexport function readBlobAsText(blob: Blob): Promise<string> {\n    return readBlobAs<string>(blob, \"string\");\n}\n\n/**\n * Reads a blob into an array buffer\n *\n * @param blob The data to read\n */\nexport function readBlobAsArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n    return readBlobAs<ArrayBuffer>(blob, \"buffer\");\n}\n\n/**\n * Generic method to read blob's content\n *\n * @param blob The data to read\n * @param mode The read mode\n */\nfunction readBlobAs<T>(blob: Blob, mode: \"string\" | \"buffer\"): Promise<T> {\n\n    return new Promise<T>((resolve, reject) => {\n\n        try {\n\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n                resolve(e.target.result);\n            };\n\n            switch (mode) {\n                case \"string\":\n                    reader.readAsText(blob);\n                    break;\n                case \"buffer\":\n                    reader.readAsArrayBuffer(blob);\n                    break;\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n","/**\n * Interface defining an object with a known property type\n */\nexport interface TypedHash<T> {\n    [key: string]: T;\n}\n\n/**\n * Generic dictionary\n */\nexport class Dictionary<T> {\n\n    /**\n     * Creates a new instance of the Dictionary<T> class\n     *\n     * @constructor\n     */\n    constructor(private keys: string[] = [], private values: T[] = []) {\n    }\n\n    /**\n     * Gets a value from the collection using the specified key\n     *\n     * @param key The key whose value we want to return, returns null if the key does not exist\n     */\n    public get(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        return this.values[index];\n    }\n\n    /**\n     * Adds the supplied key and value to the dictionary\n     *\n     * @param key The key to add\n     * @param o The value to add\n     */\n    public add(key: string, o: T | null): void {\n        const index = this.keys.indexOf(key);\n        if (index > -1) {\n            if (o === null) {\n                this.remove(key);\n            } else {\n                this.values[index] = o;\n            }\n        } else {\n            if (o !== null) {\n                this.keys.push(key);\n                this.values.push(o);\n            }\n        }\n    }\n\n    /**\n     * Merges the supplied typed hash into this dictionary instance. Existing values are updated and new ones are created as appropriate.\n     */\n    public merge(source: TypedHash<T> | Dictionary<T>): void {\n        if (\"getKeys\" in source) {\n            const sourceAsDictionary = source as Dictionary<T>;\n            sourceAsDictionary.getKeys().map(key => {\n                this.add(key, sourceAsDictionary.get(key));\n            });\n        } else {\n            const sourceAsHash = source as TypedHash<T>;\n            for (const key in sourceAsHash) {\n                if (sourceAsHash.hasOwnProperty(key)) {\n                    this.add(key, sourceAsHash[key]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Removes a value from the dictionary\n     *\n     * @param key The key of the key/value pair to remove. Returns null if the key was not found.\n     */\n    public remove(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        const val = this.values[index];\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n        return val;\n    }\n\n    /**\n     * Returns all the keys currently in the dictionary as an array\n     */\n    public getKeys(): string[] {\n        return this.keys;\n    }\n\n    /**\n     * Returns all the values currently in the dictionary as an array\n     */\n    public getValues(): T[] {\n        return this.values;\n    }\n\n    /**\n     * Clears the current dictionary\n     */\n    public clear(): void {\n        this.keys = [];\n        this.values = [];\n    }\n\n    /**\n     * Gets a count of the items currently in the dictionary\n     */\n    public get count(): number {\n        return this.keys.length;\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport class UrlException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"UrlException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n","import { TypedHash, Dictionary } from \"./collections\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\n\nexport interface LibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: any;\n}\n\nexport function setup(config: LibraryConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class RuntimeConfigImpl {\n\n    private _v: Dictionary<any>;\n\n    constructor() {\n\n        this._v = new Dictionary();\n\n        // setup defaults\n        this._v.add(\"defaultCachingStore\", \"session\");\n        this._v.add(\"defaultCachingTimeoutSeconds\", 60);\n        this._v.add(\"globalCacheDisable\", false);\n        this._v.add(\"enableCacheExpiration\", false);\n        this._v.add(\"cacheExpirationIntervalMilliseconds\", 750);\n        this._v.add(\"spfxContext\", null);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public extend(config: TypedHash<any>): void {\n\n        Object.keys(config).forEach((key: string) => {\n            this._v.add(key, config[key]);\n        });\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(\"defaultCachingStore\");\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(\"defaultCachingTimeoutSeconds\");\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(\"globalCacheDisable\");\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(\"enableCacheExpiration\");\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(\"cacheExpirationIntervalMilliseconds\");\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(\"spfxContext\");\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","import { dateAdd, getCtxCallback } from \"./util\";\nimport { Dictionary } from \"./collections\";\nimport { RuntimeConfig } from \"./libconfig\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements PnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n        this.enabled = this.test();\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            Logger.write(`Enabling cache expiration.`, LogLevel.Info);\n            this.cacheExpirationHandler();\n        }\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (o == null) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n\n            Logger.write(`Removing item with key '${key}' from cache due to expiration.`, LogLevel.Info);\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n        if (!this.enabled) {\n            return getter();\n        }\n\n        return new Promise((resolve) => {\n\n            const o = this.get<T>(key);\n\n            if (o == null) {\n                getter().then((d) => {\n                    this.put(key, d, expire);\n                    resolve(d);\n                });\n            } else {\n                resolve(o);\n            }\n        });\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public deleteExpired(): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            if (!this.enabled) {\n                resolve();\n            }\n\n            try {\n\n                for (let i = 0; i < this.store.length; i++) {\n                    const key = this.store.key(i);\n                    if (key !== null) {\n                        // test the stored item to see if we stored it\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                            // get those items as get will delete from cache if they are expired\n                            this.get(key);\n                        }\n                    }\n                }\n\n                resolve();\n\n            } catch (e) { reject(e); }\n        });\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"test\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (typeof expire === \"undefined\") {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return JSON.stringify({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        Logger.write(\"Called cache expiration handler.\", LogLevel.Verbose);\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(e => {\n\n            // we've got some error - so just stop the loop and report the error\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: \"Error deleting expired cache entries, see data for details. Timeout not reset.\",\n            });\n        });\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface PnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T>;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Dictionary<string>()) { }\n\n    public get length(): number {\n        return this._store.count;\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return this._store.getKeys()[index];\n    }\n\n    public removeItem(key: string): void {\n        this._store.remove(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.add(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: PnPClientStore | null = null, private _session: PnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): PnPClientStore {\n\n        if (this._local === null) {\n            this._local = typeof localStorage !== \"undefined\" ? new PnPClientStorageWrapper(localStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): PnPClientStore {\n\n        if (this._session === null) {\n            this._session = typeof sessionStorage !== \"undefined\" ? new PnPClientStorageWrapper(sessionStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._session;\n    }\n}\n"],"names":["Logger","tslib_1.__extends","AuthenticationContext.inject"],"mappings":"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"}