{"version":3,"sources":["../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/net/graphclient.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/v1.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"names":["config","RuntimeConfig","extend","GroupType","NoGraphClientAvailableException","_super","msg","_this","call","this","name","Logger","log","data","level","message","tslib_1.__extends","Error","GraphRuntimeConfig","GraphRuntimeConfigImpl","Object","defineProperty","prototype","graphPart","get","headers","fetchClientFactory","spfxContext","graphHttpClient","GraphHttpClient","_impl","fetch","url","options","Headers","mergeHeaders","opts","Util","fetchRaw","rawHeaders","retry","ctx","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","method","post","patch","delete","GraphQueryable","baseUrl","path","urlStr","_parentUrl","_url","combinePaths","q","_options","as","factory","o","toUrlAndQuery","toUrl","_query","getKeys","map","key","join","getParent","parentUrl","clone","additionalPath","includeBatch","toRequestContext","verb","parser","pipeline","PipelineMethods","default","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","hasBatch","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","GraphQueryableCollection","filter","add","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","keys","query","asc","i","push","top","toString","skip","num","skipToken","token","GraphQueryableSearchableCollection","search","GraphQueryableInstance","Members","id","postCore","body","JSON","stringify","@odata.id","getById","Member","Owners","Calendar","Calendars","Events","Event","properties","r","event","update","patchCore","deleteCore","Attachments","Attachment","addFile","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","reply","forward","info","Senders","remove","remover","Plans","Plan","Photo","getBlob","BlobFileParser","getBuffer","BufferFileParser","setContent","content","Groups","Group","mailNickname","groupType","additionalProperties","postBody","displayName","mailEnabled","Office365","securityEnabled","Security","groupTypes","group","addFavorite","getMemberGroups","securityEnabledOnly","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","view","toISOString","V1","GraphRest","setup","_setup","graph","GraphBatchParseException","GraphBatch","batchUrl","executeImpl","write","batchId","Date","getTime","requests","client","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","_parseResponse","parsedResponse","responses","reduce","chain","index","request","objectDefinedNotNull","_","parse","stringIsNullOrEmpty","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","Array","fill","responseId","parseInt","Response","tslib_1.__decorate","beta","ODataBatch"],"mappings":"8YAoBsBA,GAClBC,EAAAA,cAAcC,OAAOF,GAGzB,ICfYG,EDeZC,EAAA,SAAAC,GAEI,SAAAD,EAAYE,QAAA,IAAAA,IAAAA,EAAA,uHAAZ,IAAAC,EACIF,EAAAG,KAAAC,KAAMH,IAAIG,YACVF,EAAKG,KAAO,kCACZC,EAAAA,OAAOC,KAAMC,KAAM,KAAMC,MAAK,EAAkBC,QAASR,EAAKQ,YAEtE,OAPqDC,EAAAA,UAAAA,EAAAA,GAOrDZ,EAPA,CAAqDa,OAsC1CC,EAAqB,IA7BhC,WAAA,SAAAC,KA2BA,OAzBIC,OAAAC,eAAWF,EAAAG,UAAA,eAAX,WAEI,IAAMC,EAAYtB,EAAAA,cAAcuB,IAAI,SACpC,YAAyB,IAAdD,QAA0D,IAAtBA,EAAUE,QAC9CF,EAAUE,4CAMzBL,OAAAC,eAAWF,EAAAG,UAAA,0BAAX,WAEI,IAAMC,EAAYtB,EAAAA,cAAcuB,IAAI,SAEpC,QAAyB,IAAdD,QAAqE,IAAjCA,EAAUG,mBACrD,OAAOH,EAAUG,mBAIrB,QAAyC,IAA9BzB,EAAAA,cAAc0B,YACrB,OAAO,WAAM,OAAA1B,EAAAA,cAAc0B,YAAYC,iBAG3C,MAAM,IAAIxB,mCAElBe,EA3BA,IExBAU,EAAA,WAII,SAAAA,IAEIpB,KAAKqB,MAAQZ,EAAmBQ,qBAqFxC,OAlFWG,EAAAP,UAAAS,MAAP,SAAaC,EAAaC,QAAA,IAAAA,IAAAA,MAEtB,IAAMR,EAAU,IAAIS,QAGpBC,EAAAA,aAAaV,EAASP,EAAmBO,SAGzCU,EAAAA,aAAaV,EAASQ,EAAQR,SAE9B,IAAMW,EAAOC,EAAAA,KAAKnC,OAAO+B,GAAWR,QAASA,IAE7C,OAAOhB,KAAK6B,SAASN,EAAKI,IAGvBP,EAAAP,UAAAgB,SAAP,SAAgBN,EAAaC,GAA7B,IAAA1B,EAAAE,UAA6B,IAAAwB,IAAAA,MAGzB,IAAMM,EAAa,IAAIL,QACvBC,EAAAA,aAAaI,EAAYN,EAAQR,SACjCQ,EAAUI,EAAAA,KAAKnC,OAAO+B,GAAWR,QAASc,IAE1C,IAAMC,EAAQ,SAACC,GAEXlC,EAAKuB,MAAMC,MAAMC,KAASC,GAASS,KAAK,SAACC,GAAa,OAAAF,EAAIG,QAAQD,KAAWE,MAAM,SAACF,GAIxD,MAApBA,EAASG,QAAsC,MAApBH,EAASG,QACpCL,EAAIM,OAAOJ,GAIf,IAAMK,EAAQP,EAAIO,MAGlBP,EAAIO,OAAS,EACbP,EAAIQ,WAGAR,EAAIS,YAAcT,EAAIQ,UACtBR,EAAIM,OAAOJ,GAIfQ,WAAWd,EAAAA,KAAKe,eAAe7C,EAAMiC,EAAOC,GAAMO,MAI1D,OAAO,IAAIK,QAAQ,SAACT,EAASG,GAEzB,IAAMO,GACFL,SAAU,EACVD,MAAO,IACPD,OAAQA,EACRH,QAASA,EACTM,WAAY,GAGhBV,EAAMhC,KAAKD,EAAM+C,MAIlBzB,EAAAP,UAAAE,IAAP,SAAWQ,EAAaC,QAAA,IAAAA,IAAAA,MACpB,IAAMG,EAAOC,EAAAA,KAAKnC,OAAO+B,GAAWsB,OAAQ,QAC5C,OAAO9C,KAAKsB,MAAMC,EAAKI,IAGpBP,EAAAP,UAAAkC,KAAP,SAAYxB,EAAaC,QAAA,IAAAA,IAAAA,MACrB,IAAMG,EAAOC,EAAAA,KAAKnC,OAAO+B,GAAWsB,OAAQ,SAC5C,OAAO9C,KAAKsB,MAAMC,EAAKI,IAGpBP,EAAAP,UAAAmC,MAAP,SAAazB,EAAaC,QAAA,IAAAA,IAAAA,MACtB,IAAMG,EAAOC,EAAAA,KAAKnC,OAAO+B,GAAWsB,OAAQ,UAC5C,OAAO9C,KAAKsB,MAAMC,EAAKI,IAGpBP,EAAAP,UAAAoC,OAAP,SAAc1B,EAAaC,QAAA,IAAAA,IAAAA,MACvB,IAAMG,EAAOC,EAAAA,KAAKnC,OAAO+B,GAAWsB,OAAQ,WAC5C,OAAO9C,KAAKsB,MAAMC,EAAKI,IAE/BP,EA3FA,GCaA8B,EAAA,SAAAtD,GASI,SAAAsD,EAAYC,EAAkCC,GAA9C,IAAAtD,EACIF,EAAAG,KAAAC,OAAOA,KAEP,GAAuB,iBAAZmD,EAAsB,CAE7B,IAAME,EAASF,EACfrD,EAAKwD,WAAaD,EAClBvD,EAAKyD,KAAO3B,EAAAA,KAAK4B,aAAaH,EAAQD,OACnC,CAEH,IAAMK,EAAIN,EACVrD,EAAKwD,WAAaG,EAAEF,KACpBzD,EAAK4D,SAAWD,EAAEC,SAClB5D,EAAKyD,KAAO3B,EAAAA,KAAK4B,aAAa1D,EAAKwD,WAAYF,YAkF3D,OAxGoC7C,EAAAA,UAAAA,EAAAA,GA+BzB2C,EAAArC,UAAA8C,GAAP,SAAaC,GACT,IAAMC,EAAO,IAAID,EAAQ5D,KAAKuD,KAAM,MACpC,OAAO3B,EAAAA,KAAKnC,OAAOoE,EAAG7D,MAAM,IAOzBkD,EAAArC,UAAAiD,cAAP,WAAA,IAAAhE,EAAAE,KAEI,OAAOA,KAAK+D,QAAU,IAAI/D,KAAKgE,OAAOC,UAAUC,IAAI,SAAAC,GAAO,OAAGA,EAAG,IAAIrE,EAAKkE,OAAOjD,IAAIoD,KAAQC,KAAK,MAQ5FlB,EAAArC,UAAAwD,UAAV,SACIT,EACAT,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAmCnD,KAAKsE,WAGjC,IAAIV,EAAQT,EAASC,IAStBF,EAAArC,UAAA0D,MAAV,SAA0CX,EAAuCY,EAAyBC,GAGtG,YAHsG,IAAAA,IAAAA,GAAA,GAI3F,IAAIb,EAAQ5D,KAAMwE,IAcvBtB,EAAArC,UAAA6D,iBAAV,SACIC,EACAnD,EACAoD,EACAC,GAGA,YALA,IAAArD,IAAAA,WAEA,IAAAqD,IAAAA,EAAwEC,EAAAA,gBAAgBC,SAGjFnC,QAAQT,SACX6C,MAAOhF,KAAKgF,MACZC,gBAAiB,aACjBC,eAAgBlF,KAAKmF,gBACrBC,cAAe,WAAM,OAAA,IAAIhE,GACzBiE,UAAWrF,KAAKsF,SAChBC,SAAUvF,KAAKwF,YACfhE,QAASA,EACToD,OAAQA,EACRC,SAAUA,EACVY,mBAAoBzF,KAAK8D,gBACzB4B,UAAW9D,EAAAA,KAAK+D,UAChBhB,KAAMA,KAGlBzB,EAxGA,CAAoC0C,EAAAA,gBA8GpCC,EAAA,SAAAjG,GAAA,SAAAiG,mDA6FA,OA7F8CtF,EAAAA,UAAAA,EAAAA,GAMnCsF,EAAAhF,UAAAiF,OAAP,SAAcA,GAEV,OADA9F,KAAKgE,OAAO+B,IAAI,UAAWD,GACpB9F,MAQJ6F,EAAAhF,UAAAmF,OAAP,eAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAIV,OAHID,EAAQG,OAAS,GACjBpG,KAAKgE,OAAO+B,IAAI,UAAWE,EAAQ7B,KAAK,MAErCpE,MAQJ6F,EAAAhF,UAAAwF,OAAP,eAAc,IAAAC,KAAAJ,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAI,EAAAJ,GAAAC,UAAAD,GAIV,OAHII,EAAQF,OAAS,GACjBpG,KAAKgE,OAAO+B,IAAI,UAAWO,EAAQlC,KAAK,MAErCpE,MASJ6F,EAAAhF,UAAA0F,QAAP,SAAeA,EAAiBC,QAAA,IAAAA,IAAAA,GAAA,GAI5B,IAAK,IAHCC,EAAOzG,KAAKgE,OAAOC,UACnByC,KACAC,EAAMH,EAAY,OAAS,QACxBI,EAAI,EAAGA,EAAIH,EAAKL,OAAQQ,IAC7B,GAAgB,aAAZH,EAAKG,GAAmB,CACxBF,EAAMG,KAAK7G,KAAKgE,OAAOjD,IAAI,aAC3B,MAOR,OAJA2F,EAAMG,KAAK,GAAGN,EAAUI,GAExB3G,KAAKgE,OAAO+B,IAAI,WAAYW,EAAMtC,KAAK,MAEhCpE,MAQJ6F,EAAAhF,UAAAiG,IAAP,SAAWA,GAEP,OADA9G,KAAKgE,OAAO+B,IAAI,OAAQe,EAAIC,YACrB/G,MAQJ6F,EAAAhF,UAAAmG,KAAP,SAAYC,GAER,OADAjH,KAAKgE,OAAO+B,IAAI,OAAQkB,EAAIF,YACrB/G,MAMJ6F,EAAAhF,UAAAqG,UAAP,SAAiBC,GAEb,OADAnH,KAAKgE,OAAO+B,IAAI,aAAcoB,GACvBnH,MAMXW,OAAAC,eAAWiF,EAAAhF,UAAA,aAAX,WAEI,OADAb,KAAKgE,OAAO+B,IAAI,SAAU,QACnB/F,sCAEf6F,EA7FA,CAA8C3C,GA+F9CkE,EAAA,SAAAxH,GAAA,SAAAwH,mDASA,OATwD7G,EAAAA,UAAAA,EAAAA,GAK7C6G,EAAAvG,UAAAwG,OAAP,SAAcX,GAEV,OADA1G,KAAKgE,OAAO+B,IAAI,UAAWW,GACpB1G,MAEfoH,EATA,CAAwDvB,GAexDyB,EAAA,SAAA1H,GAAA,SAAA0H,mDAyBA,OAzB4C/G,EAAAA,UAAAA,EAAAA,GAOjC+G,EAAAzG,UAAAmF,OAAP,eAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAIV,OAHID,EAAQG,OAAS,GACjBpG,KAAKgE,OAAO+B,IAAI,UAAWE,EAAQ7B,KAAK,MAErCpE,MAQJsH,EAAAzG,UAAAwF,OAAP,eAAc,IAAAC,KAAAJ,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAI,EAAAJ,GAAAC,UAAAD,GAIV,OAHII,EAAQF,OAAS,GACjBpG,KAAKgE,OAAO+B,IAAI,UAAWO,EAAQlC,KAAK,MAErCpE,MAEfsH,EAzBA,CAA4CpE,GChP5CqE,EAAA,SAAA3H,GAEI,SAAA2H,EAAYpE,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,WAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KA2B5B,OA9B6BO,EAAAA,UAAAA,EAAAA,GAalBgH,EAAA1G,UAAAkF,IAAP,SAAWyB,GAEP,OAAOxH,KAAKuE,MAAMgD,EAAS,QAAQE,UAC/BC,KAAMC,KAAKC,WACPC,YAAaL,OAUlBD,EAAA1G,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAIO,EAAO/H,KAAMwH,IAEhCD,EA9BA,CAA6B1B,GAgC7BkC,EAAA,SAAAnI,GAAA,SAAAmI,mDAEA,OAF4BxH,EAAAA,UAAAA,EAAAA,GAE5BwH,EAFA,CAA4BT,GAI5BU,EAAA,SAAApI,GACI,SAAAoI,EAAY7E,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAE5B,OAJ4BO,EAAAA,UAAAA,EAAAA,GAI5ByH,EAJA,CAA4BT,GC1B5BU,GAPA,SAAArI,GAEI,SAAAsI,EAAY/E,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,aAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAHGO,EAAAA,UAAAA,EAAAA,GAA/B,CAA+BsF,GAO/B,SAAAjG,GAAA,SAAAqI,mDAKA,OAL8B1H,EAAAA,UAAAA,EAAAA,GAE1BI,OAAAC,eAAWqH,EAAApH,UAAA,cAAX,WACI,OAAO,IAAIsH,EAAOnI,uCAE1BiI,EALA,CAA8BX,IAO9Ba,EAAA,SAAAvI,GAEI,SAAAuI,EAAYhF,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAuB5B,OA1B4BO,EAAAA,UAAAA,EAAAA,GAMjB4H,EAAAtH,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAIY,EAAMpI,KAAMwH,IAQpBW,EAAAtH,UAAAkF,IAAP,SAAWsC,GAAX,IAAAvI,EAAAE,KAEI,OAAOA,KAAKyH,UACRC,KAAMC,KAAKC,UAAUS,KACtBpG,KAAK,SAAAqG,GACJ,OACIlI,KAAMkI,EACNC,MAAOzI,EAAKgI,QAAQQ,EAAEd,QAItCW,EA1BA,CAA4BtC,GAiC5BuC,EAAA,SAAAxI,GAAA,SAAAwI,mDA4BA,OA5B2B7H,EAAAA,UAAAA,EAAAA,GAehB6H,EAAAvH,UAAA2H,OAAP,SAAcH,GAEV,OAAOrI,KAAKyI,WACRf,KAAMC,KAAKC,UAAUS,MAOtBD,EAAAvH,UAAAoC,OAAP,WACI,OAAOjD,KAAK0I,cAEpBN,EA5BA,CAA2Bd,GCjD3BqB,EAAA,SAAA/I,GAEI,SAAA+I,EAAYxF,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,eAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KA4B5B,OA/BiCO,EAAAA,UAAAA,EAAAA,GAWtBoI,EAAA9H,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAIoB,EAAW5I,KAAMwH,IASzBmB,EAAA9H,UAAAgI,QAAP,SAAe5I,EAAc6I,GAEzB,OAAO9I,KAAKyH,UACRC,KAAMC,KAAKC,WACPmB,cAAe,kCACfC,aAAcF,EACd7I,KAAMA,OAItB0I,EA/BA,CAAiC9C,GAiCjC+C,EAAA,SAAAhJ,GAAA,SAAAgJ,mDACA,OADgCrI,EAAAA,UAAAA,EAAAA,GAChCqI,EADA,CAAgCtB,GCtBhC2B,EAAA,SAAArJ,GAEI,SAAAqJ,EAAY9F,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,iBAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAuB5B,OA1BmCO,EAAAA,UAAAA,EAAAA,GAWxB0I,EAAApI,UAAAkF,IAAP,SAAWsC,GAEP,OAAOrI,KAAKyH,UACRC,KAAMC,KAAKC,UAAUS,MAStBY,EAAApI,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAI0B,EAAalJ,KAAMwH,IAEtCyB,EA1BA,CAAmCpD,GA4BnCsD,EAAA,SAAAvJ,GAEI,SAAAuJ,EAAYhG,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,WAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAwB5B,OA3B6BO,EAAAA,UAAAA,EAAAA,GAWlB4I,EAAAtI,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAI4B,EAAOpJ,KAAMwH,IASrB2B,EAAAtI,UAAAkF,IAAP,SAAWsC,GAEP,OAAOrI,KAAKyH,UACRC,KAAMC,KAAKC,UAAUS,MAGjCc,EA3BA,CAA6BtD,GA6B7BwD,EAAA,SAAAzJ,GAEI,SAAAyJ,EAAYlG,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAwB5B,OA3B2BO,EAAAA,UAAAA,EAAAA,GAWhB8I,EAAAxI,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAI8B,EAAKtJ,KAAMwH,IASnB6B,EAAAxI,UAAAkF,IAAP,SAAWsC,GAEP,OAAOrI,KAAKyH,UACRC,KAAMC,KAAKC,UAAUS,MAGjCgB,EA3BA,CAA2BxD,GA6B3BqD,EAAA,SAAAtJ,GAAA,SAAAsJ,mDAyBA,OAzBkC3I,EAAAA,UAAAA,EAAAA,GAK9BI,OAAAC,eAAWsI,EAAArI,UAAA,eAAX,WACI,OAAO,IAAIsI,EAAQnJ,uCAMhBkJ,EAAArI,UAAA2H,OAAP,SAAcH,GAEV,OAAOrI,KAAKyI,WACRf,KAAMC,KAAKC,UAAUS,MAOtBa,EAAArI,UAAAoC,OAAP,WACI,OAAOjD,KAAK0I,cAEpBQ,EAzBA,CAAkC5B,GA2BlC8B,EAAA,SAAAxJ,GAAA,SAAAwJ,mDA6BA,OA7B4B7I,EAAAA,UAAAA,EAAAA,GAKxBI,OAAAC,eAAWwI,EAAAvI,UAAA,aAAX,WACI,OAAO,IAAIwI,EAAMrJ,uCAQdoJ,EAAAvI,UAAA0I,MAAP,SAAaxG,GAET,OAAO/C,KAAKuE,MAAM6E,EAAQ,SAAS3B,UAC/BC,KAAMC,KAAKC,WACP7E,KAAMA,OAQXqG,EAAAvI,UAAAoC,OAAP,WACI,OAAOjD,KAAK0I,cAEpBU,EA7BA,CAA4B9B,GA+B5BgC,EAAA,SAAA1J,GAAA,SAAA0J,mDAmCA,OAnC0B/I,EAAAA,UAAAA,EAAAA,GAEtBI,OAAAC,eAAW0I,EAAAzI,UAAA,mBAAX,WACI,OAAO,IAAI8H,EAAY3I,uCAMpBsJ,EAAAzI,UAAAoC,OAAP,WACI,OAAOjD,KAAK0I,cAMTY,EAAAzI,UAAA2I,QAAP,SAAeC,GACX,OAAOzJ,KAAKuE,MAAM+E,EAAM,WAAW7B,UAC/BC,KAAMC,KAAKC,UAAU6B,MAStBH,EAAAzI,UAAA0I,MAAP,SAAaxG,GAET,OAAO/C,KAAKuE,MAAM+E,EAAM,SAAS7B,UAC7BC,KAAMC,KAAKC,WACP7E,KAAMA,OAItBuG,EAnCA,CAA0BhC,GAqC1BoC,EAAA,SAAA9J,GAEI,SAAA8J,EAAYvG,EAAkCC,UAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KA2B5B,OA9B6BO,EAAAA,UAAAA,EAAAA,GAUlBmJ,EAAA7I,UAAAkF,IAAP,SAAWyB,GAEP,OAAOxH,KAAKuE,MAAMmF,EAAS,QAAQjC,UAC/BC,KAAMC,KAAKC,WACPC,YAAaL,OAUlBkC,EAAA7I,UAAA8I,OAAP,SAAcnC,GAEV,IAAMoC,EAAU5J,KAAKuE,MAAMmF,EAAS,QAEpC,OADAE,EAAQlD,MAAMX,IAAI,MAAOyB,GAClBoC,EAAQlB,cAEvBgB,EA9BA,CAA6B7D,GCjM7BgE,EAAA,SAAAjK,GAEI,SAAAiK,EAAY1G,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,iBAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAW5B,OAd2BO,EAAAA,UAAAA,EAAAA,GAWhBsJ,EAAAhJ,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAIsC,EAAK9J,KAAMwH,IAE9BqC,EAdA,CAA2BhE,GAgB3BiE,EAAA,SAAAlK,GAAA,SAAAkK,mDAGA,OAH0BvJ,EAAAA,UAAAA,EAAAA,GAG1BuJ,EAHA,CAA0BxC,GCf1ByC,EAAA,SAAAnK,GAEI,SAAAmK,EAAY5G,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KA4B5B,OA/B2BO,EAAAA,UAAAA,EAAAA,GAShBwJ,EAAAlJ,UAAAmJ,QAAP,WACI,OAAOhK,KAAKuE,MAAMwF,EAAO,UAAU,GAAOhJ,IAAI,IAAIkJ,EAAAA,iBAM/CF,EAAAlJ,UAAAqJ,UAAP,WACI,OAAOlK,KAAKuE,MAAMwF,EAAO,UAAU,GAAOhJ,IAAI,IAAIoJ,EAAAA,mBAQ/CJ,EAAAlJ,UAAAuJ,WAAP,SAAkBC,GAEd,OAAOrK,KAAKuE,MAAMwF,EAAO,UAAU,GAAOtB,WACtCf,KAAM2C,KAGlBN,EA/BA,CAA2BzC,IRM3B,SAAY5H,GAIRA,EAAAA,EAAA,UAAA,GAAA,YAIAA,EAAAA,EAAA,QAAA,GAAA,UAIAA,EAAAA,EAAA,SAAA,GAAA,WAZJ,CAAYA,IAAAA,OAmBZ,IAAA4K,EAAA,SAAA1K,GAEI,SAAA0K,EAAYnH,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KA8C5B,OAjD4BO,EAAAA,UAAAA,EAAAA,GAWjB+J,EAAAzJ,UAAAiH,QAAP,SAAeN,GACX,OAAO,IAAI+C,EAAMvK,KAAMwH,IAWpB8C,EAAAzJ,UAAAkF,IAAP,SAAW9F,EAAcuK,EAAsBC,EAAsBC,GAArE,IAAA5K,EAAAE,UAAqE,IAAA0K,IAAAA,MAEjE,IAAIC,EAAW/I,EAAAA,KAAKnC,QAChBmL,YAAa3K,EACb4K,YAAaJ,IAAc/K,EAAUoL,UACrCN,aAAcA,EACdO,gBAAiBN,IAAc/K,EAAUoL,WAC1CJ,GAUH,OAPID,IAAc/K,EAAUsL,WAExBL,EAAW/I,EAAAA,KAAKnC,OAAOkL,GACnBM,YAAaR,IAAc/K,EAAUoL,UAAY,UAAY,wBAI9D9K,KAAKyH,UACRC,KAAMC,KAAKC,UAAU+C,KACtB1I,KAAK,SAAAqG,GACJ,OACIlI,KAAMkI,EACN4C,MAAOpL,EAAKgI,QAAQQ,EAAEd,QAItC8C,EAjDA,CAA4BzE,GAsD5B0E,EAAA,SAAA3K,GAAA,SAAA2K,mDAsJA,OAtJ2BhK,EAAAA,UAAAA,EAAAA,GAKvBI,OAAAC,eAAW2J,EAAA1J,UAAA,iBAAX,WACI,OAAO,IAAIoH,EAASjI,KAAM,6CAM9BW,OAAAC,eAAW2J,EAAA1J,UAAA,cAAX,WACI,OAAO,IAAIsH,EAAOnI,uCAMtBW,OAAAC,eAAW2J,EAAA1J,UAAA,cAAX,WACI,OAAO,IAAImH,EAAOhI,uCAMtBW,OAAAC,eAAW2J,EAAA1J,UAAA,aAAX,WACI,OAAO,IAAIgJ,EAAM7J,uCAMrBW,OAAAC,eAAW2J,EAAA1J,UAAA,eAAX,WACI,OAAO,IAAI0G,EAAQvH,uCAMvBW,OAAAC,eAAW2J,EAAA1J,UAAA,qBAAX,WACI,OAAO,IAAIoI,EAAcjJ,uCAM7BW,OAAAC,eAAW2J,EAAA1J,UAAA,uBAAX,WACI,OAAO,IAAI6I,EAAQ1J,KAAM,oDAM7BW,OAAAC,eAAW2J,EAAA1J,UAAA,uBAAX,WACI,OAAO,IAAI6I,EAAQ1J,KAAM,oDAM7BW,OAAAC,eAAW2J,EAAA1J,UAAA,aAAX,WACI,OAAO,IAAIkJ,EAAM/J,uCAMduK,EAAA1J,UAAAsK,YAAP,WAEI,OAAOnL,KAAKuE,MAAMgG,EAAO,eAAe9C,YAQrC8C,EAAA1J,UAAAuK,gBAAP,SAAuBC,GAEnB,YAFmB,IAAAA,IAAAA,GAAA,GAEZrL,KAAKuE,MAAMgG,EAAO,mBAAmB9C,UACxCC,KAAMC,KAAKC,WACPyD,oBAAqBA,OAQ1Bd,EAAA1J,UAAAoC,OAAP,WACI,OAAOjD,KAAK0I,cAQT6B,EAAA1J,UAAA2H,OAAP,SAAcH,GAEV,OAAOrI,KAAKyI,WACRf,KAAMC,KAAKC,UAAUS,MAOtBkC,EAAA1J,UAAAyK,eAAP,WAEI,OAAOtL,KAAKuE,MAAMgG,EAAO,kBAAkB9C,YAMxC8C,EAAA1J,UAAA0K,iBAAP,WACI,OAAOvL,KAAKuE,MAAMgG,EAAO,oBAAoB9C,YAO1C8C,EAAA1J,UAAA2K,gBAAP,WACI,OAAOxL,KAAKuE,MAAMgG,EAAO,mBAAmB9C,YAOzC8C,EAAA1J,UAAA4K,kBAAP,WACI,OAAOzL,KAAKuE,MAAMgG,EAAO,qBAAqB9C,YAS3C8C,EAAA1J,UAAA6K,gBAAP,SAAuBC,EAAaC,GAEhC,IAAMC,EAAO7L,KAAKuE,MAAMgG,EAAO,gBAG/B,OAFAsB,EAAKnF,MAAMX,IAAI,gBAAiB4F,EAAMG,eACtCD,EAAKnF,MAAMX,IAAI,cAAe6F,EAAIE,eAC3BD,EAAK9K,OAEpBwJ,EAtJA,CAA2BjD,GS1E3ByE,EAAA,SAAAnM,GAQI,SAAAmM,EAAY5I,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,QAC1CxD,EAAAG,KAAAC,KAAMmD,EAASC,IAAKpD,KAU5B,OAnBwBO,EAAAA,UAAAA,EAAAA,GAYpBI,OAAAC,eAAWmL,EAAAlL,UAAA,cAAX,WACI,OAAO,IAAIyJ,EAAOtK,uCAM1B+L,EAnBA,CAAwB7I,GCFxB8I,EAAA,WAAA,SAAAA,KASA,OAPIrL,OAAAC,eAAWoL,EAAAnL,UAAA,UAAX,WACI,OAAO,IAAIkL,EAAG,qCAGXC,EAAAnL,UAAAoL,MAAP,SAAa1M,GACT2M,EAAO3M,IAEfyM,EATA,GAWWG,EAAQ,IAAIH,ECmBvBI,EAAA,SAAAxM,GAEI,SAAAwM,EAAYvM,GAAZ,IAAAC,EACIF,EAAAG,KAAAC,KAAMH,IAAIG,YACVF,EAAKG,KAAO,2BACZC,EAAAA,OAAOC,KAAMC,QAAUC,MAAK,EAAkBC,QAAS,IAAIR,EAAKG,KAAI,MAAMH,EAAKQ,YAEvF,OAP8CC,EAAAA,UAAAA,EAAAA,GAO9C6L,EAPA,CAA8C5L,OAS9C6L,EAAA,SAAAzM,GAEI,SAAAyM,EAAoBC,QAAA,IAAAA,IAAAA,EAAA,2CAApB,IAAAxM,EACIF,EAAAG,KAAAC,OAAOA,YADSF,EAAAwM,SAAAA,IAyIxB,OA3IgC/L,EAAAA,UAAAA,EAAAA,GAOlB8L,EAAAxL,UAAA0L,YAAV,WADA,IAAAzM,EAAAE,KAGIE,EAAAA,OAAOsM,MAAM,IAAIxM,KAAKyM,QAAO,OAAM,IAAKC,MAAQC,UAAS,0BAA0B3M,KAAK4M,SAASxG,OAAM,aAAY,GAEnH,IAAMyG,EAAS,IAAIzL,EAEb0L,GACFF,SAAU5M,KAAK+M,kBAGbC,GACFtF,KAAQC,KAAKC,UAAUkF,GACvB9L,SACIiM,OAAU,mBACVC,eAAgB,oBAEpBpK,OAAU,QAKd,OAFA5C,EAAAA,OAAOsM,MAAM,IAAIxM,KAAKyM,QAAO,OAAM,IAAKC,MAAQC,UAAS,2BAA0B,GAI5EE,EAAOvL,MAAMtB,KAAKsM,SAAUU,GAC9B/K,KAAK,SAAAqG,GAAK,OAAAA,EAAE6E,SACZlL,KAAKjC,KAAKoN,gBACVnL,KAAK,SAACoL,GAIH,OAFAnN,EAAAA,OAAOsM,MAAM,IAAI1M,EAAK2M,QAAO,OAAM,IAAKC,MAAQC,UAAS,gCAA+B,GAEjFU,EAAeC,UAAUC,OAAO,SAACC,EAAOtL,EAAUuL,GAErD,IAAMC,EAAU5N,EAAK8M,SAASa,GAE9B,GAAI7L,EAAAA,KAAK+L,qBAAqBD,GAI1B,OAFAxN,EAAAA,OAAOsM,MAAM,IAAI1M,EAAK2M,QAAO,OAAM,IAAKC,MAAQC,UAAS,+BAA+Be,EAAQ5K,OAAM,IAAI4K,EAAQnM,IAAG,IAAG,GAEjHiM,EAAMvL,KAAK,SAAA2L,GAAK,OAAAF,EAAQ9I,OAAOiJ,MAAM3L,GAAUD,KAAKyL,EAAQvL,SAASC,MAAMsL,EAAQpL,UAK1F,IAAKV,EAAAA,KAAKkM,oBAAoBT,EAAeU,UACzC,MAAM,IAAI3B,EAAyB,kEAGvC,OAKOoB,GAGZ5K,QAAQT,cAIfkK,EAAAxL,UAAAkM,eAAR,WAEI,OAAO/M,KAAK4M,SAAS1I,IAAI,SAAC8J,EAASP,GAE/B,IAAIQ,GACAzG,GAAI,MAAKiG,EACT3K,OAAQkL,EAAQlL,OAChBvB,IAAKyM,EAAQzM,KAGbP,KA4BJ,YAzB0C,IAA/BP,EAAmBO,SAA0D,OAA/BP,EAAmBO,UAExEA,EAAUY,EAAAA,KAAKnC,OAAOuB,EAASP,EAAmBO,eAGvB,IAApBgN,EAAQxM,eAGwB,IAA5BwM,EAAQxM,QAAQR,SAAuD,OAA5BgN,EAAQxM,QAAQR,UAClEA,EAAUY,EAAAA,KAAKnC,OAAOuB,EAASgN,EAAQxM,QAAQR,eAIf,IAAzBgN,EAAQxM,QAAQkG,MAAiD,OAAzBsG,EAAQxM,QAAQkG,OAE/DuG,EAAkBrM,EAAAA,KAAKnC,OAAOwO,GAC1BvG,KAAMsG,EAAQxM,QAAQkG,SAKlCuG,EAAkBrM,EAAAA,KAAKnC,OAAOwO,GAC1BjN,QAASA,OAObqL,EAAAxL,UAAAuM,eAAR,SAAuBc,GAAvB,IAAApO,EAAAE,KAEI,OAAO,IAAI4C,QAAQ,SAACT,GAIhB,IAAK,IAFCgM,EAA8B,IAAIC,MAAMtO,EAAK8M,SAASxG,QAAQiI,KAAK,MAEhEzH,EAAI,EAAGA,EAAIsH,EAAcZ,UAAUlH,SAAUQ,EAAG,CAErD,IAAM1E,EAAWgM,EAAcZ,UAAU1G,GAGnC0H,EAAaC,SAASrM,EAASsF,GAAI,IAAM,EAEvB,MAApBtF,EAASG,OAET8L,EAAgBG,GAAc,IAAIE,SAGlCL,EAAgBG,GAAc,IAAIE,SAAS,MACvCxN,QAASkB,EAASlB,QAClBqB,OAAQH,EAASG,SAK7BF,GACI4L,SAAUG,EAAcH,SACxBT,UAAWa,OAhIvBM,EAAAA,YADCC,EAAAA,KAAK,6EAqIVrC,EA3IA,CAAgCsC,EAAAA","sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig } from \"@pnp/common\";\r\nimport { GraphHttpClientImpl } from \"../net/graphclient\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport interface GraphConfigurationPart {\r\n    graph?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: TypedHash<string>;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => GraphHttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\r\n\r\nexport function setup(config: GraphConfiguration): void {\r\n    RuntimeConfig.extend(config);\r\n}\r\n\r\nexport class NoGraphClientAvailableException extends Error {\r\n\r\n    constructor(msg = \"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\") {\r\n        super(msg);\r\n        this.name = \"NoGraphClientAvailableException\";\r\n        Logger.log({ data: null, level: LogLevel.Error, message: this.message });\r\n    }\r\n}\r\n\r\nexport class GraphRuntimeConfigImpl {\r\n\r\n    public get headers(): TypedHash<string> {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.headers !== \"undefined\") {\r\n            return graphPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get fetchClientFactory(): () => GraphHttpClientImpl {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        // use a configured factory firt\r\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.fetchClientFactory !== \"undefined\") {\r\n            return graphPart.fetchClientFactory;\r\n        }\r\n\r\n        // then try and use spfx context if available\r\n        if (typeof RuntimeConfig.spfxContext !== \"undefined\") {\r\n            return () => RuntimeConfig.spfxContext.graphHttpClient;\r\n        }\r\n\r\n        throw new NoGraphClientAvailableException();\r\n    }\r\n}\r\n\r\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\r\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<string | number | boolean> = {}): Promise<GroupAddResult> {\n\n        let postBody = Util.extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = Util.extend(postBody, {\n                groupTypes: [groupType === GroupType.Office365 ? \"Unified\" : \"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get caldendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: JSON.stringify({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.add(\"startDateTime\", start.toISOString());\n        view.query.add(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import {\n    Util,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n// import { APIUrlException } from \"../utils/exceptions\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: GraphHttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        const opts = Util.extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, {}, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: {} | PromiseLike<{}>) => void;\n    retryCount: number;\n}\n\nexport interface GraphHttpClientImpl {\n    fetch(url: string, configuration: any, options: FetchOptions): Promise<Response>;\n}\n","import {\n    Util,\n    FetchOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n    PipelineMethods,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphclient\";\nimport { GraphBatch } from \"./batch\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable extends ODataQueryable<GraphBatch> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = Util.combinePaths(urlStr, path);\n        } else {\n\n            const q = baseUrl as GraphQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        return this.toUrl() + `?${this._query.getKeys().map(key => `${key}=${this._query.get(key)}`).join(\"&\")}`;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            return new factory(this, additionalPath);\n        }\n\n        return new factory(this, additionalPath);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>> = PipelineMethods.default): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: Util.getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection extends GraphQueryable {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this._query.add(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this._query.add(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this._query.add(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this._query.add(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance extends GraphQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: JSON.stringify({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: JSON.stringify(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.add(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobFileParser, BufferFileParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobFileParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BufferFileParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport { Groups } from \"./groups\";\n// import { Me } from \"./me\";\n\n/**\n * Root object wrapping v1 functionality for MS Graph\n *\n */\nexport class V1 extends GraphQueryable {\n\n    /**\n     * Creates a new instance of the V1 class\n     *\n     * @param baseUrl The url or Queryable which forms the parent of this fields collection\n     * @param path Optional additional path\n     */\n    constructor(baseUrl: string | GraphQueryable, path = \"v1.0\") {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    // public get me(): Me {\n    //     return new Me(this);\n    // }\n}\n","import { V1 } from \"./v1\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nexport class GraphRest {\n\n    public get v1(): V1 {\n        return new V1(\"\");\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest();\n","import { ODataBatch } from \"@pnp/odata\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { Util, beta } from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\r\nimport { GraphHttpClient } from \"./net/graphclient\";\r\n\r\ninterface GraphBatchRequestFragment {\r\n    id: string;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface GraphBatchRequest {\r\n    requests: GraphBatchRequestFragment[];\r\n}\r\n\r\ninterface GraphBatchResponseFragment {\r\n    id: string;\r\n    status: number;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface GraphBatchResponse {\r\n    responses: GraphBatchResponseFragment[];\r\n    nextLink?: string;\r\n}\r\n\r\nexport class GraphBatchParseException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"GraphBatchParseException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class GraphBatch extends ODataBatch {\r\n\r\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\r\n        super();\r\n    }\r\n\r\n    @beta(\"Graph batching functionality is in beta.\")\r\n    protected executeImpl(): Promise<void> {\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\r\n\r\n        const client = new GraphHttpClient();\r\n\r\n        const batchRequest: GraphBatchRequest = {\r\n            requests: this.formatRequests(),\r\n        };\r\n\r\n        const batchOptions = {\r\n            \"body\": JSON.stringify(batchRequest),\r\n            \"headers\": {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            \"method\": \"POST\",\r\n        };\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\r\n\r\n        let nextLinkFlag = false;\r\n\r\n        return client.fetch(this.batchUrl, batchOptions)\r\n            .then(r => r.json())\r\n            .then(this._parseResponse)\r\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\r\n\r\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\r\n\r\n                return parsedResponse.responses.reduce((chain, response, index) => {\r\n\r\n                    const request = this.requests[index];\r\n\r\n                    if (Util.objectDefinedNotNull(request)) {\r\n\r\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\r\n\r\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\r\n\r\n                    } else {\r\n\r\n                        // do we have a next url? if no this is an error\r\n                        if (!Util.stringIsNullOrEmpty(parsedResponse.nextLink)) {\r\n                            throw new GraphBatchParseException(\"Could not properly parse responses to match requests in batch.\");\r\n                        }\r\n\r\n                        nextLinkFlag = true;\r\n                        // keep the chain moving, but don't add anything for this request yet\r\n                        // here we need to process the next link - so what do we do?\r\n                        // need to append a .then()\r\n                        // TODO::\r\n                        return chain;\r\n                    }\r\n\r\n                }, Promise.resolve());\r\n            });\r\n    }\r\n\r\n    private formatRequests(): GraphBatchRequestFragment[] {\r\n\r\n        return this.requests.map((reqInfo, index) => {\r\n\r\n            let requestFragment: GraphBatchRequestFragment = {\r\n                id: `${++index}`,\r\n                method: reqInfo.method,\r\n                url: reqInfo.url,\r\n            };\r\n\r\n            let headers = {};\r\n\r\n            // merge global config headers\r\n            if (typeof GraphRuntimeConfig.headers !== \"undefined\" && GraphRuntimeConfig.headers !== null) {\r\n\r\n                headers = Util.extend(headers, GraphRuntimeConfig.headers);\r\n            }\r\n\r\n            if (typeof reqInfo.options !== \"undefined\") {\r\n\r\n                // merge per request headers\r\n                if (typeof reqInfo.options.headers !== \"undefined\" && reqInfo.options.headers !== null) {\r\n                    headers = Util.extend(headers, reqInfo.options.headers);\r\n                }\r\n\r\n                // add a request body\r\n                if (typeof reqInfo.options.body !== \"undefined\" && reqInfo.options.body !== null) {\r\n\r\n                    requestFragment = Util.extend(requestFragment, {\r\n                        body: reqInfo.options.body,\r\n                    });\r\n                }\r\n            }\r\n\r\n            requestFragment = Util.extend(requestFragment, {\r\n                headers: headers,\r\n            });\r\n\r\n            return requestFragment;\r\n        });\r\n    }\r\n\r\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\r\n\r\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\r\n\r\n                const response = graphResponse.responses[i];\r\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\r\n                // the array of requests and make it easier to map them by index\r\n                const responseId = parseInt(response.id, 10) - 1;\r\n\r\n                if (response.status === 204) {\r\n\r\n                    parsedResponses[responseId] = new Response();\r\n                } else {\r\n\r\n                    parsedResponses[responseId] = new Response(null, {\r\n                        headers: response.headers,\r\n                        status: response.status,\r\n                    });\r\n                }\r\n            }\r\n\r\n            resolve({\r\n                nextLink: graphResponse.nextLink,\r\n                responses: parsedResponses,\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n"]}