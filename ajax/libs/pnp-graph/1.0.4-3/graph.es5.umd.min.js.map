{"version":3,"sources":["../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/me.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"names":["GroupType","NoGraphClientAvailableException","_super","msg","_this","call","this","name","Logger","log","data","level","message","tslib_1.__extends","Error","GraphRuntimeConfig","GraphRuntimeConfigImpl","Object","defineProperty","prototype","graphPart","RuntimeConfig","get","headers","fetchClientFactory","spfxContext","AdalClient","fromSPFxContext","GraphHttpClient","_impl","fetch","url","options","Headers","mergeHeaders","has","append","opts","extend","fetchRaw","rawHeaders","retry","ctx","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","method","post","patch","delete","GraphEndpoints","ensure","endpoint","all","Beta","V1","regex","RegExp","replaces","filter","s","test","map","replace","join","GraphQueryable","baseUrl","path","urlStr","_parentUrl","_url","combinePaths","as","factory","o","toUrlAndQuery","toUrl","isUrlAbsolute","_query","getKeys","key","getParent","parentUrl","clone","additionalPath","includeBatch","configure","_options","inBatch","_batch","setEndpoint","toRequestContext","verb","parser","pipeline","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","hasBatch","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","GraphQueryableCollection","add","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","query","k","push","top","toString","skip","num","skipToken","token","GraphQueryableSearchableCollection","search","GraphQueryableInstance","Members","id","postCore","body","JSON","stringify","@odata.id","getById","Member","Owners","Calendar","Calendars","Events","Event","properties","r","event","update","patchCore","deleteCore","Attachments","Attachment","addFile","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","reply","forward","info","Senders","remove","remover","Plans","Plan","Photo","getBlob","BlobParser","getBuffer","BufferParser","setContent","content","Teams","create","description","teamProperties","groupProps","graph","groups","Office365","gar","group","createTeam","team","Team","ODataDefaultParser","getCore","Groups","Group","mailNickname","groupType","additionalProperties","postBody","displayName","mailEnabled","securityEnabled","Security","groupTypes","addFavorite","putCore","getMemberGroups","securityEnabledOnly","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","view","toISOString","OneNote","Notebooks","Sections","Pages","Notebook","notebook","Section","section","Me","Users","User","GraphRest","setup","config","GraphBatchParseException","GraphBatch","batchUrl","executeImpl","write","batchId","Date","getTime","requests","client","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","_parseResponse","parsedResponse","responses","reduce","chain","index","request","objectDefinedNotNull","_","parse","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","Array","fill","i","responseId","parseInt","Response","tslib_1.__decorate","beta","ODataBatch"],"mappings":"+YAuBA,ICZYA,EDYZC,EAAA,SAAAC,GAEI,SAAAD,EAAYE,QAAA,IAAAA,IAAAA,EAAA,uHAAZ,IAAAC,EACIF,EAAAG,KAAAC,KAAMH,IAAIG,YACVF,EAAKG,KAAO,kCACZC,EAAAA,OAAOC,KAAMC,KAAM,KAAMC,MAAK,EAAkBC,QAASR,EAAKQ,YAEtE,OAPqDC,EAAAA,UAAAA,EAAAA,GAOrDZ,EAPA,CAAqDa,OAsC1CC,EAAqB,IA7BhC,WAAA,SAAAC,KA2BA,OAzBIC,OAAAC,eAAWF,EAAAG,UAAA,eAAX,WAEI,IAAMC,EAAYC,EAAAA,cAAcC,IAAI,SACpC,OAAkB,OAAdF,QAA2C,IAAdA,QAA0D,IAAtBA,EAAUG,QACpEH,EAAUG,4CAMzBN,OAAAC,eAAWF,EAAAG,UAAA,0BAAX,WAEI,IAAMC,EAAYC,EAAAA,cAAcC,IAAI,SAEpC,GAAkB,OAAdF,QAA8D,IAAjCA,EAAUI,mBACvC,OAAOJ,EAAUI,mBAIrB,QAAyC,IAA9BH,EAAAA,cAAcI,YACrB,OAAO,WAAM,OAAAC,EAAAA,WAAWC,gBAAgBN,EAAAA,cAAcI,cAG1D,MAAM,IAAIxB,mCAElBe,EA3BA,IEtBAY,EAAA,WAII,SAAAA,IAEItB,KAAKuB,MAAQd,EAAmBS,qBAyFxC,OAtFWI,EAAAT,UAAAW,MAAP,SAAaC,EAAaC,QAAA,IAAAA,IAAAA,MAEtB,IAAMT,EAAU,IAAIU,QAGpBC,EAAAA,aAAaX,EAASR,EAAmBQ,SAGzCW,EAAAA,aAAaX,EAASS,EAAQT,SAEzBA,EAAQY,IAAI,iBACbZ,EAAQa,OAAO,eAAgB,oBAGnC,IAAMC,EAAOC,EAAAA,OAAON,GAAWT,QAASA,IAExC,OAAOjB,KAAKiC,SAASR,EAAKM,IAGvBT,EAAAT,UAAAoB,SAAP,SAAgBR,EAAaC,GAA7B,IAAA5B,EAAAE,UAA6B,IAAA0B,IAAAA,MAGzB,IAAMQ,EAAa,IAAIP,QACvBC,EAAAA,aAAaM,EAAYR,EAAQT,SACjCS,EAAUM,EAAAA,OAAON,GAAWT,QAASiB,IAErC,IAAMC,EAAQ,SAACC,GAEXtC,EAAKyB,MAAMC,MAAMC,EAAKC,GAASW,KAAK,SAACC,GAAa,OAAAF,EAAIG,QAAQD,KAAWE,MAAM,SAACF,GAIpD,MAApBA,EAASG,QAAsC,MAApBH,EAASG,QACpCL,EAAIM,OAAOJ,GAIf,IAAMK,EAAQP,EAAIO,MAGlBP,EAAIO,OAAS,EACbP,EAAIQ,WAGAR,EAAIS,YAAcT,EAAIQ,UACtBR,EAAIM,OAAOJ,GAIfQ,WAAWC,EAAAA,eAAejD,EAAMqC,EAAOC,GAAMO,MAIrD,OAAO,IAAIK,QAAQ,SAACT,EAASG,GAEzB,IAAMO,GACFL,SAAU,EACVD,MAAO,IACPD,OAAQA,EACRH,QAASA,EACTM,WAAY,GAGhBV,EAAMpC,KAAKD,EAAMmD,MAIlB3B,EAAAT,UAAAG,IAAP,SAAWS,EAAaC,QAAA,IAAAA,IAAAA,MACpB,IAAMK,EAAOC,EAAAA,OAAON,GAAWwB,OAAQ,QACvC,OAAOlD,KAAKwB,MAAMC,EAAKM,IAGpBT,EAAAT,UAAAsC,KAAP,SAAY1B,EAAaC,QAAA,IAAAA,IAAAA,MACrB,IAAMK,EAAOC,EAAAA,OAAON,GAAWwB,OAAQ,SACvC,OAAOlD,KAAKwB,MAAMC,EAAKM,IAGpBT,EAAAT,UAAAuC,MAAP,SAAa3B,EAAaC,QAAA,IAAAA,IAAAA,MACtB,IAAMK,EAAOC,EAAAA,OAAON,GAAWwB,OAAQ,UACvC,OAAOlD,KAAKwB,MAAMC,EAAKM,IAGpBT,EAAAT,UAAAwC,OAAP,SAAc5B,EAAaC,QAAA,IAAAA,IAAAA,MACvB,IAAMK,EAAOC,EAAAA,OAAON,GAAWwB,OAAQ,WACvC,OAAOlD,KAAKwB,MAAMC,EAAKM,IAE/BT,EA/FA,GCVAgC,EAAA,WAAA,SAAAA,KAgBA,OAPkBA,EAAAC,OAAd,SAAqB9B,EAAa+B,GAC9B,IAAMC,GAAOH,EAAeI,KAAMJ,EAAeK,IAC7CC,EAAQ,IAAIC,OAAOL,EAAU,KAC3BM,EAAWL,EAAIM,OAAO,SAAAC,GAAK,OAACJ,EAAMK,KAAKD,KAAIE,IAAI,SAAAF,GAAK,OAAAA,EAAEG,QAAQ,IAAK,SAEzE,OADAP,EAAQ,IAAIC,OAAO,MAAMC,EAASM,KAAK,KAAI,KAAM,MAC1C3C,EAAI0C,QAAQP,EAAO,IAAIJ,EAAQ,MAZ5BF,EAAAI,KAAO,OACPJ,EAAAK,GAAK,OAavBL,EAhBA,GCyBAe,EAAA,SAAAzE,GASI,SAAAyE,EAAYC,EAAkCC,GAA9C,IAAAzE,EACIF,EAAAG,KAAAC,OAAOA,KAEP,GAAuB,iBAAZsE,EAAsB,CAE7B,IAAME,EAASF,EACfxE,EAAK2E,WAAaD,EAClB1E,EAAK4E,KAAOC,EAAAA,aAAaH,EAAQD,QAEjCzE,EAAKkC,OAAOsC,EAA2BC,YAiGnD,OAnHmDhE,EAAAA,UAAAA,EAAAA,GA2BxC8D,EAAAxD,UAAA+D,GAAP,SAAaC,GACT,IAAMC,EAAO,IAAID,EAAQ7E,KAAK0E,KAAM,MACpC,OAAO1C,EAAAA,OAAO8C,EAAG9E,MAAM,IAOpBqE,EAAAxD,UAAAkE,cAAP,WAAA,IAAAjF,EAAAE,KAEQyB,EAAMzB,KAAKgF,QAMf,OAJKC,EAAAA,cAAcxD,KACfA,EAAMkD,EAAAA,aAAa,8BAA+BlD,IAG/CA,EAAM,IAAIzB,KAAKkF,OAAOC,UAAUjB,IAAI,SAAAkB,GAAO,OAAGA,EAAG,IAAItF,EAAKoF,OAAOlE,IAAIoE,KAAQhB,KAAK,MAQnFC,EAAAxD,UAAAwE,UAAV,SACIR,EACAP,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAmCtE,KAAKsF,WAGjC,IAAIT,EAAQP,EAASC,IAStBF,EAAAxD,UAAA0E,MAAV,SAA0CV,EAAuCW,EAAyBC,QAAA,IAAAA,IAAAA,GAAA,GAEtG,IAAIF,EAAQ,IAAIV,EAAQ7E,KAAMwF,GAQ9B,OAPAD,EAAMG,UAAU1F,KAAK2F,UAGjBF,IACAF,EAAQA,EAAMK,QAAQ5F,KAAK6F,SAGxBN,GAGDlB,EAAAxD,UAAAiF,YAAV,SAAsBtC,GAGlB,OADAxD,KAAK0E,KAAOpB,EAAeC,OAAOvD,KAAK0E,KAAMlB,GACtCxD,MAWDqE,EAAAxD,UAAAkF,iBAAV,SACIC,EACAtE,EACAuE,EACAC,GAGA,YALA,IAAAxE,IAAAA,MAKOsB,QAAQT,SACX4D,MAAOnG,KAAKmG,MACZC,gBAAiB,aACjBC,eAAgBrG,KAAKsG,gBACrBC,cAAe,WAAM,OAAA,IAAIjF,GACzBkF,UAAWxG,KAAKyG,SAChBC,SAAU1G,KAAK2G,YACfjF,QAASA,EACTuE,OAAQA,EACRC,SAAUA,EACVU,mBAAoB5G,KAAK+E,gBACzB8B,UAAWC,EAAAA,UACXd,KAAMA,KAGlB3B,EAnHA,CAAmD0C,EAAAA,gBAyHnDC,EAAA,SAAApH,GAAA,SAAAoH,mDAmFA,OAnF+DzG,EAAAA,UAAAA,EAAAA,GAMpDyG,EAAAnG,UAAAkD,OAAP,SAAcA,GAEV,OADA/D,KAAKkF,OAAO+B,IAAI,UAAWlD,GACpB/D,MAQJgH,EAAAnG,UAAAqG,OAAP,eAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAIV,OAHID,EAAQG,OAAS,GACjBtH,KAAKkF,OAAO+B,IAAI,UAAWE,EAAQ/C,KAAK,MAErCpE,MAQJgH,EAAAnG,UAAA0G,OAAP,eAAc,IAAAC,KAAAJ,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAI,EAAAJ,GAAAC,UAAAD,GAIV,OAHII,EAAQF,OAAS,GACjBtH,KAAKkF,OAAO+B,IAAI,UAAWO,EAAQpD,KAAK,MAErCpE,MASJgH,EAAAnG,UAAA4G,QAAP,SAAeA,EAAiBC,GAAhC,IAAA5H,EAAAE,UAAgC,IAAA0H,IAAAA,GAAA,GAC5B,IAAMC,EAAQ3H,KAAKkF,OAAOC,UAAUpB,OAAO,SAAA6D,GAAK,MAAM,aAANA,IAAkB1D,IAAI,SAAA0D,GAAK,OAAA9H,EAAKoF,OAAOlE,IAAI4G,KAG3F,OAFAD,EAAME,KAAQJ,EAAO,KAAIC,EAAY,MAAQ,SAC7C1H,KAAKkF,OAAO+B,IAAI,WAAYU,EAAMvD,KAAK,MAChCpE,MAQJgH,EAAAnG,UAAAiH,IAAP,SAAWA,GAEP,OADA9H,KAAKkF,OAAO+B,IAAI,OAAQa,EAAIC,YACrB/H,MAQJgH,EAAAnG,UAAAmH,KAAP,SAAYC,GAER,OADAjI,KAAKkF,OAAO+B,IAAI,OAAQgB,EAAIF,YACrB/H,MAMJgH,EAAAnG,UAAAqH,UAAP,SAAiBC,GAEb,OADAnI,KAAKkF,OAAO+B,IAAI,aAAckB,GACvBnI,MAMXW,OAAAC,eAAWoG,EAAAnG,UAAA,aAAX,WAEI,OADAb,KAAKkF,OAAO+B,IAAI,SAAU,QACnBjH,sCAEfgH,EAnFA,CAA+D3C,GAqF/D+D,EAAA,SAAAxI,GAAA,SAAAwI,mDASA,OATwD7H,EAAAA,UAAAA,EAAAA,GAK7C6H,EAAAvH,UAAAwH,OAAP,SAAcV,GAEV,OADA3H,KAAKkF,OAAO+B,IAAI,UAAWU,GACpB3H,MAEfoI,EATA,CAAwDpB,GAexDsB,EAAA,SAAA1I,GAAA,SAAA0I,mDAyBA,OAzB2D/H,EAAAA,UAAAA,EAAAA,GAOhD+H,EAAAzH,UAAAqG,OAAP,eAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAIV,OAHID,EAAQG,OAAS,GACjBtH,KAAKkF,OAAO+B,IAAI,UAAWE,EAAQ/C,KAAK,MAErCpE,MAQJsI,EAAAzH,UAAA0G,OAAP,eAAc,IAAAC,KAAAJ,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAI,EAAAJ,GAAAC,UAAAD,GAIV,OAHII,EAAQF,OAAS,GACjBtH,KAAKkF,OAAO+B,IAAI,UAAWO,EAAQpD,KAAK,MAErCpE,MAEfsI,EAzBA,CAA2DjE,GCpP3DkE,EAAA,SAAA3I,GAEI,SAAA2I,EAAYjE,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,WAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA2B5B,OA9B6BO,EAAAA,UAAAA,EAAAA,GAalBgI,EAAA1H,UAAAoG,IAAP,SAAWuB,GAEP,OAAOxI,KAAKuF,MAAMgD,EAAS,QAAQE,UAC/BC,KAAMC,KAAKC,WACPC,YAAaL,OAUlBD,EAAA1H,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAIO,EAAO/I,KAAMwI,IAEhCD,EA9BA,CAA6BvB,GAgC7B+B,EAAA,SAAAnJ,GAAA,SAAAmJ,mDAEA,OAF4BxI,EAAAA,UAAAA,EAAAA,GAE5BwI,EAFA,CAA4BT,GAI5BU,EAAA,SAAApJ,GACI,SAAAoJ,EAAY1E,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAE5B,OAJ4BO,EAAAA,UAAAA,EAAAA,GAI5ByI,EAJA,CAA4BT,GC1B5BU,GAPA,SAAArJ,GAEI,SAAAsJ,EAAY5E,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,aAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAHGO,EAAAA,UAAAA,EAAAA,GAA/B,CAA+ByG,GAO/B,SAAApH,GAAA,SAAAqJ,mDAKA,OAL8B1I,EAAAA,UAAAA,EAAAA,GAE1BI,OAAAC,eAAWqI,EAAApI,UAAA,cAAX,WACI,OAAO,IAAIsI,EAAOnJ,uCAE1BiJ,EALA,CAA8BX,IAO9Ba,EAAA,SAAAvJ,GAEI,SAAAuJ,EAAY7E,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAuB5B,OA1B4BO,EAAAA,UAAAA,EAAAA,GAMjB4I,EAAAtI,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAIY,EAAMpJ,KAAMwI,IAQpBW,EAAAtI,UAAAoG,IAAP,SAAWoC,GAAX,IAAAvJ,EAAAE,KAEI,OAAOA,KAAKyI,UACRC,KAAMC,KAAKC,UAAUS,KACtBhH,KAAK,SAAAiH,GACJ,OACIlJ,KAAMkJ,EACNC,MAAOzJ,EAAKgJ,QAAQQ,EAAEd,QAItCW,EA1BA,CAA4BnC,GAiC5BoC,EAAA,SAAAxJ,GAAA,SAAAwJ,mDA4BA,OA5B2B7I,EAAAA,UAAAA,EAAAA,GAehB6I,EAAAvI,UAAA2I,OAAP,SAAcH,GAEV,OAAOrJ,KAAKyJ,WACRf,KAAMC,KAAKC,UAAUS,MAOtBD,EAAAvI,UAAAwC,OAAP,WACI,OAAOrD,KAAK0J,cAEpBN,EA5BA,CAA2Bd,GCjD3BqB,EAAA,SAAA/J,GAEI,SAAA+J,EAAYrF,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,eAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA4B5B,OA/BiCO,EAAAA,UAAAA,EAAAA,GAWtBoJ,EAAA9I,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAIoB,EAAW5J,KAAMwI,IASzBmB,EAAA9I,UAAAgJ,QAAP,SAAe5J,EAAc6J,GAEzB,OAAO9J,KAAKyI,UACRC,KAAMC,KAAKC,WACPmB,cAAe,kCACfC,aAAcF,EACd7J,KAAMA,OAItB0J,EA/BA,CAAiC3C,GAiCjC4C,EAAA,SAAAhK,GAAA,SAAAgK,mDACA,OADgCrJ,EAAAA,UAAAA,EAAAA,GAChCqJ,EADA,CAAgCtB,GCtBhC2B,EAAA,SAAArK,GAEI,SAAAqK,EAAY3F,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,iBAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAuB5B,OA1BmCO,EAAAA,UAAAA,EAAAA,GAWxB0J,EAAApJ,UAAAoG,IAAP,SAAWoC,GAEP,OAAOrJ,KAAKyI,UACRC,KAAMC,KAAKC,UAAUS,MAStBY,EAAApJ,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI0B,EAAalK,KAAMwI,IAEtCyB,EA1BA,CAAmCjD,GA4BnCmD,EAAA,SAAAvK,GAEI,SAAAuK,EAAY7F,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,WAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAwB5B,OA3B6BO,EAAAA,UAAAA,EAAAA,GAWlB4J,EAAAtJ,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI4B,EAAOpK,KAAMwI,IASrB2B,EAAAtJ,UAAAoG,IAAP,SAAWoC,GAEP,OAAOrJ,KAAKyI,UACRC,KAAMC,KAAKC,UAAUS,MAGjCc,EA3BA,CAA6BnD,GA6B7BqD,EAAA,SAAAzK,GAEI,SAAAyK,EAAY/F,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAwB5B,OA3B2BO,EAAAA,UAAAA,EAAAA,GAWhB8J,EAAAxJ,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI8B,EAAKtK,KAAMwI,IASnB6B,EAAAxJ,UAAAoG,IAAP,SAAWoC,GAEP,OAAOrJ,KAAKyI,UACRC,KAAMC,KAAKC,UAAUS,MAGjCgB,EA3BA,CAA2BrD,GA6B3BkD,EAAA,SAAAtK,GAAA,SAAAsK,mDAyBA,OAzBkC3J,EAAAA,UAAAA,EAAAA,GAK9BI,OAAAC,eAAWsJ,EAAArJ,UAAA,eAAX,WACI,OAAO,IAAIsJ,EAAQnK,uCAMhBkK,EAAArJ,UAAA2I,OAAP,SAAcH,GAEV,OAAOrJ,KAAKyJ,WACRf,KAAMC,KAAKC,UAAUS,MAOtBa,EAAArJ,UAAAwC,OAAP,WACI,OAAOrD,KAAK0J,cAEpBQ,EAzBA,CAAkC5B,GA2BlC8B,EAAA,SAAAxK,GAAA,SAAAwK,mDA6BA,OA7B4B7J,EAAAA,UAAAA,EAAAA,GAKxBI,OAAAC,eAAWwJ,EAAAvJ,UAAA,aAAX,WACI,OAAO,IAAIwJ,EAAMrK,uCAQdoK,EAAAvJ,UAAA0J,MAAP,SAAapH,GAET,OAAOnD,KAAKuF,MAAM6E,EAAQ,SAAS3B,UAC/BC,KAAMC,KAAKC,WACPzF,KAAMA,OAQXiH,EAAAvJ,UAAAwC,OAAP,WACI,OAAOrD,KAAK0J,cAEpBU,EA7BA,CAA4B9B,GA+B5BgC,EAAA,SAAA1K,GAAA,SAAA0K,mDAmCA,OAnC0B/J,EAAAA,UAAAA,EAAAA,GAEtBI,OAAAC,eAAW0J,EAAAzJ,UAAA,mBAAX,WACI,OAAO,IAAI8I,EAAY3J,uCAMpBsK,EAAAzJ,UAAAwC,OAAP,WACI,OAAOrD,KAAK0J,cAMTY,EAAAzJ,UAAA2J,QAAP,SAAeC,GACX,OAAOzK,KAAKuF,MAAM+E,EAAM,WAAW7B,UAC/BC,KAAMC,KAAKC,UAAU6B,MAStBH,EAAAzJ,UAAA0J,MAAP,SAAapH,GAET,OAAOnD,KAAKuF,MAAM+E,EAAM,SAAS7B,UAC7BC,KAAMC,KAAKC,WACPzF,KAAMA,OAItBmH,EAnCA,CAA0BhC,GAqC1BoC,EAAA,SAAA9K,GAEI,SAAA8K,EAAYpG,EAAkCC,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA2B5B,OA9B6BO,EAAAA,UAAAA,EAAAA,GAUlBmK,EAAA7J,UAAAoG,IAAP,SAAWuB,GAEP,OAAOxI,KAAKuF,MAAMmF,EAAS,QAAQjC,UAC/BC,KAAMC,KAAKC,WACPC,YAAaL,OAUlBkC,EAAA7J,UAAA8J,OAAP,SAAcnC,GAEV,IAAMoC,EAAU5K,KAAKuF,MAAMmF,EAAS,QAEpC,OADAE,EAAQjD,MAAMV,IAAI,MAAOuB,GAClBoC,EAAQlB,cAEvBgB,EA9BA,CAA6B1D,GCjM7B6D,EAAA,SAAAjL,GAEI,SAAAiL,EAAYvG,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,iBAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAW5B,OAd2BO,EAAAA,UAAAA,EAAAA,GAWhBsK,EAAAhK,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAIsC,EAAK9K,KAAMwI,IAE9BqC,EAdA,CAA2B7D,GAgB3B8D,EAAA,SAAAlL,GAAA,SAAAkL,mDAGA,OAH0BvK,EAAAA,UAAAA,EAAAA,GAG1BuK,EAHA,CAA0BxC,GCf1ByC,EAAA,SAAAnL,GAEI,SAAAmL,EAAYzG,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA4B5B,OA/B2BO,EAAAA,UAAAA,EAAAA,GAShBwK,EAAAlK,UAAAmK,QAAP,WACI,OAAOhL,KAAKuF,MAAMwF,EAAO,UAAU,GAAO/J,IAAI,IAAIiK,EAAAA,aAM/CF,EAAAlK,UAAAqK,UAAP,WACI,OAAOlL,KAAKuF,MAAMwF,EAAO,UAAU,GAAO/J,IAAI,IAAImK,EAAAA,eAQ/CJ,EAAAlK,UAAAuK,WAAP,SAAkBC,GAEd,OAAOrL,KAAKuF,MAAMwF,EAAO,UAAU,GAAOtB,WACtCf,KAAM2C,KAGlBN,EA/BA,CAA2BzC,GC0B3BgD,EAAA,WAAA,SAAAA,KAmBA,OAdWA,EAAAzK,UAAA0K,OAAP,SAActL,EAAcuL,EAAkBC,QAAlB,IAAAD,IAAAA,EAAA,SAAkB,IAAAC,IAAAA,MAE1C,IAAMC,EAAaF,GAAeA,EAAYlE,OAAS,GAAMkE,YAAaA,MAE1E,OAAOG,EAAMC,OAAO3E,IAAIhH,EAAMA,EAAMP,EAAAA,UAAUmM,UAAWH,GAAYrJ,KAAK,SAACyJ,GACvE,OAAOA,EAAIC,MAAMC,WAAWP,GAAgBpJ,KAAK,SAAAjC,GAC7C,OACIA,KAAMA,EACN2L,MAAOD,EAAIC,MACXE,KAAM,IAAIC,EAAKJ,EAAIC,aAKvCT,EAnBA,GAwBAY,EAAA,SAAAtM,GAEI,SAAAsM,EAAY5H,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,QAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA8B5B,OAjC0BO,EAAAA,UAAAA,EAAAA,GAYf2L,EAAArL,UAAA2I,OAAP,SAAcH,GAAd,IAAAvJ,EAAAE,KAEI,OAAOA,KAAKuF,MAAM2G,EAAM,IAAIpG,YAAYxC,EAAeI,MAAM+F,WACzDf,KAAMC,KAAKC,UAAUS,KACtBhH,KAAK,SAAAjC,GACJ,OACIA,KAAMA,EACN6L,KAAMnM,MAWXoM,EAAArL,UAAAG,IAAP,SAA+BiF,EAAmDvE,GAC9E,YAD2B,IAAAuE,IAAAA,EAAA,IAA6BkG,EAAAA,yBAAsB,IAAAzK,IAAAA,MACvE1B,KAAKuF,MAAM2G,EAAM,IAAIpG,YAAYxC,EAAeI,MAAM0I,QAAQnG,EAAQvE,IAErFwK,EAjCA,CAA0B5D,IV1Cd5I,EAAAA,EAAAA,YAAAA,EAAAA,eAIRA,EAAA,UAAA,GAAA,YAIAA,EAAAA,EAAA,QAAA,GAAA,UAIAA,EAAAA,EAAA,SAAA,GAAA,WAOJ,IAAA2M,EAAA,SAAAzM,GAEI,SAAAyM,EAAY/H,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KA8C5B,OAjD4BO,EAAAA,UAAAA,EAAAA,GAWjB8L,EAAAxL,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI8D,EAAMtM,KAAMwI,IAWpB6D,EAAAxL,UAAAoG,IAAP,SAAWhH,EAAcsM,EAAsBC,EAAsBC,GAArE,IAAA3M,EAAAE,UAAqE,IAAAyM,IAAAA,MAEjE,IAAIC,EAAW1K,EAAAA,QACX2K,YAAa1M,EACb2M,YAAaJ,IAAc9M,EAAAA,UAAUmM,UACrCU,aAAcA,EACdM,gBAAiBL,IAAc9M,EAAAA,UAAUmM,WAC1CY,GAUH,OAPID,IAAc9M,EAAAA,UAAUoN,WAExBJ,EAAW1K,EAAAA,OAAO0K,GACdK,WAAYP,IAAc9M,EAAAA,UAAUmM,WAAa,YAAc,wBAIhE7L,KAAKyI,UACRC,KAAMC,KAAKC,UAAU8D,KACtBrK,KAAK,SAAAiH,GACJ,OACIlJ,KAAMkJ,EACNyC,MAAOjM,EAAKgJ,QAAQQ,EAAEd,QAItC6D,EAjDA,CAA4BrF,GAsD5BsF,EAAA,SAAA1M,GAAA,SAAA0M,mDAwKA,OAxK2B/L,EAAAA,UAAAA,EAAAA,GAKvBI,OAAAC,eAAW0L,EAAAzL,UAAA,gBAAX,WACI,OAAO,IAAIoI,EAASjJ,KAAM,6CAM9BW,OAAAC,eAAW0L,EAAAzL,UAAA,cAAX,WACI,OAAO,IAAIsI,EAAOnJ,uCAMtBW,OAAAC,eAAW0L,EAAAzL,UAAA,cAAX,WACI,OAAO,IAAImI,EAAOhJ,uCAMtBW,OAAAC,eAAW0L,EAAAzL,UAAA,aAAX,WACI,OAAO,IAAIgK,EAAM7K,uCAMrBW,OAAAC,eAAW0L,EAAAzL,UAAA,eAAX,WACI,OAAO,IAAI0H,EAAQvI,uCAMvBW,OAAAC,eAAW0L,EAAAzL,UAAA,qBAAX,WACI,OAAO,IAAIoJ,EAAcjK,uCAM7BW,OAAAC,eAAW0L,EAAAzL,UAAA,uBAAX,WACI,OAAO,IAAI6J,EAAQ1K,KAAM,oDAM7BW,OAAAC,eAAW0L,EAAAzL,UAAA,uBAAX,WACI,OAAO,IAAI6J,EAAQ1K,KAAM,oDAM7BW,OAAAC,eAAW0L,EAAAzL,UAAA,aAAX,WACI,OAAO,IAAIkK,EAAM/K,uCAMrBW,OAAAC,eAAW0L,EAAAzL,UAAA,YAAX,WACI,OAAO,IAAIqL,EAAKlM,uCAMbsM,EAAAzL,UAAAmM,YAAP,WACI,OAAOhN,KAAKuF,MAAM+G,EAAO,eAAe7D,YAQrC6D,EAAAzL,UAAAmL,WAAP,SAAkB3C,GAEd,OAAOrJ,KAAKuF,MAAM+G,EAAO,QAAQxG,YAAYxC,EAAeI,MAAMuJ,SAC9DvE,KAAMC,KAAKC,UAAUS,MAStBiD,EAAAzL,UAAAqM,gBAAP,SAAuBC,GAEnB,YAFmB,IAAAA,IAAAA,GAAA,GAEZnN,KAAKuF,MAAM+G,EAAO,mBAAmB7D,UACxCC,KAAMC,KAAKC,WACPuE,oBAAqBA,OAQ1Bb,EAAAzL,UAAAwC,OAAP,WACI,OAAOrD,KAAK0J,cAQT4C,EAAAzL,UAAA2I,OAAP,SAAcH,GAEV,OAAOrJ,KAAKyJ,WACRf,KAAMC,KAAKC,UAAUS,MAOtBiD,EAAAzL,UAAAuM,eAAP,WAEI,OAAOpN,KAAKuF,MAAM+G,EAAO,kBAAkB7D,YAMxC6D,EAAAzL,UAAAwM,iBAAP,WACI,OAAOrN,KAAKuF,MAAM+G,EAAO,oBAAoB7D,YAO1C6D,EAAAzL,UAAAyM,gBAAP,WACI,OAAOtN,KAAKuF,MAAM+G,EAAO,mBAAmB7D,YAOzC6D,EAAAzL,UAAA0M,kBAAP,WACI,OAAOvN,KAAKuF,MAAM+G,EAAO,qBAAqB7D,YAS3C6D,EAAAzL,UAAA2M,gBAAP,SAAuBC,EAAaC,GAEhC,IAAMC,EAAO3N,KAAKuF,MAAM+G,EAAO,gBAG/B,OAFAqB,EAAKhG,MAAMV,IAAI,gBAAiBwG,EAAMG,eACtCD,EAAKhG,MAAMV,IAAI,cAAeyG,EAAIE,eAC3BD,EAAK3M,OAEpBsL,EAxKA,CAA2BhE,GWzE3BuF,EAAA,SAAAjO,GAEI,SAAAiO,EAAYvJ,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,WAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAc5B,OAjB6BO,EAAAA,UAAAA,EAAAA,GAMzBI,OAAAC,eAAWiN,EAAAhN,UAAA,iBAAX,WACI,OAAO,IAAIiN,EAAU9N,uCAGzBW,OAAAC,eAAWiN,EAAAhN,UAAA,gBAAX,WACI,OAAO,IAAIkN,EAAS/N,uCAGxBW,OAAAC,eAAWiN,EAAAhN,UAAA,aAAX,WACI,OAAO,IAAImN,EAAMhO,uCAEzB6N,EAjBA,CAA6BvF,GAuB7BwF,EAAA,SAAAlO,GAEI,SAAAkO,EAAYxJ,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,aAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAgC5B,OAnC+BO,EAAAA,UAAAA,EAAAA,GAWpBuN,EAAAjN,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAIyF,EAASjO,KAAMwI,IAQvBsF,EAAAjN,UAAAoG,IAAP,SAAW0F,GAAX,IAAA7M,EAAAE,KAEU0M,GACFC,YAAaA,GAGjB,OAAO3M,KAAKyI,UACRC,KAAMC,KAAKC,UAAU8D,KACtBrK,KAAK,SAAAiH,GACJ,OACIlJ,KAAMkJ,EACN4E,SAAUpO,EAAKgJ,QAAQQ,EAAEd,QAIzCsF,EAnCA,CAA+B9G,GAyC/BiH,EAAA,SAAArO,GACI,SAAAqO,EAAY3J,EAAkCC,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAM5B,OAR8BO,EAAAA,UAAAA,EAAAA,GAK1BI,OAAAC,eAAWqN,EAAApN,UAAA,gBAAX,WACI,OAAO,IAAIkN,EAAS/N,uCAE5BiO,EARA,CAA8B3F,GAc9ByF,EAAA,SAAAnO,GAEI,SAAAmO,EAAYzJ,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,YAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAgC5B,OAnC8BO,EAAAA,UAAAA,EAAAA,GAWnBwN,EAAAlN,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI2F,EAAQnO,KAAMwI,IAQtBuF,EAAAlN,UAAAoG,IAAP,SAAW0F,GAAX,IAAA7M,EAAAE,KAEU0M,GACFC,YAAaA,GAGjB,OAAO3M,KAAKyI,UACRC,KAAMC,KAAKC,UAAU8D,KACtBrK,KAAK,SAAAiH,GACJ,OACIlJ,KAAMkJ,EACN8E,QAAStO,EAAKgJ,QAAQQ,EAAEd,QAIxCuF,EAnCA,CAA8B/G,GAyC9BmH,EAAA,SAAAvO,GACI,SAAAuO,EAAY7J,EAAkCC,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAE5B,OAJ6BO,EAAAA,UAAAA,EAAAA,GAI7B4N,EAJA,CAA6B7F,GAU7B0F,EAAA,SAAApO,GAEI,SAAAoO,EAAY1J,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAE5B,OAL2BO,EAAAA,UAAAA,EAAAA,GAK3ByN,EALA,CAA2BhH,GCzI3BqH,EAAA,SAAAzO,GAEI,SAAAyO,EAAY/J,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,MAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAS5B,OAZwBO,EAAAA,UAAAA,EAAAA,GASpBI,OAAAC,eAAWyN,EAAAxN,UAAA,eAAX,WACI,OAAO,IAAIgN,EAAQ7N,uCAE3BqO,EAZA,CAAwB/F,GCGxBgG,EAAA,SAAA1O,GAEI,SAAA0O,EAAYhK,EAAkCC,eAAA,IAAAA,IAAAA,EAAA,SAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAW5B,OAd2BO,EAAAA,UAAAA,EAAAA,GAWhB+N,EAAAzN,UAAAiI,QAAP,SAAeN,GACX,OAAO,IAAI+F,EAAKvO,KAAMwI,IAE9B8F,EAdA,CAA2BtH,GAmB3BuH,EAAA,SAAA3O,GAAA,SAAA2O,mDAAkD,OAAxBhO,EAAAA,UAAAA,EAAAA,GAAwBgO,EAAlD,CAA0BjG,GCd1BkG,EAAA,SAAA5O,GAEI,SAAA4O,EAAYlK,EAAkCC,UAC1C3E,EAAAG,KAAAC,KAAMsE,EAASC,IAAKvE,KAsB5B,OAzB+BO,EAAAA,UAAAA,EAAAA,GAM3BI,OAAAC,eAAW4N,EAAA3N,UAAA,cAAX,WACI,OAAO,IAAIwL,EAAOrM,uCAGtBW,OAAAC,eAAW4N,EAAA3N,UAAA,aAAX,WACI,OAAO,IAAIyK,mCAGf3K,OAAAC,eAAW4N,EAAA3N,UAAA,UAAX,WACI,OAAO,IAAIwN,EAAGrO,uCAGlBW,OAAAC,eAAW4N,EAAA3N,UAAA,aAAX,WACI,OAAO,IAAIyN,EAAMtO,uCAGdwO,EAAA3N,UAAA4N,MAAP,SAAaC,OfdKA,EAAAA,EeePA,EfdX3N,EAAAA,cAAciB,OAAO0M,IegBzBF,EAzBA,CAA+BnK,GA2BpBsH,EAAQ,IAAI6C,EAAU,QCFjCG,EAAA,SAAA/O,GAEI,SAAA+O,EAAY9O,GAAZ,IAAAC,EACIF,EAAAG,KAAAC,KAAMH,IAAIG,YACVF,EAAKG,KAAO,2BACZC,EAAAA,OAAOC,KAAMC,QAAUC,MAAK,EAAkBC,QAAS,IAAIR,EAAKG,KAAI,MAAMH,EAAKQ,YAEvF,OAP8CC,EAAAA,UAAAA,EAAAA,GAO9CoO,EAPA,CAA8CnO,OAS9CoO,EAAA,SAAAhP,GAEI,SAAAgP,EAAoBC,QAAA,IAAAA,IAAAA,EAAA,2CAApB,IAAA/O,EACIF,EAAAG,KAAAC,OAAOA,YADSF,EAAA+O,SAAAA,IAyIxB,OA3IgCtO,EAAAA,UAAAA,EAAAA,GAOlBqO,EAAA/N,UAAAiO,YAAV,WADA,IAAAhP,EAAAE,KAGIE,EAAAA,OAAO6O,MAAM,IAAI/O,KAAKgP,QAAO,OAAM,IAAKC,MAAQC,UAAS,0BAA0BlP,KAAKmP,SAAS7H,OAAM,aAAY,GAEnH,IAAM8H,EAAS,IAAI9N,EAEb+N,GACFF,SAAUnP,KAAKsP,kBAGbC,GACF7G,KAAQC,KAAKC,UAAUyG,GACvBpO,SACIuO,OAAU,mBACVC,eAAgB,oBAEpBvM,OAAU,QAOd,OAJAhD,EAAAA,OAAO6O,MAAM,IAAI/O,KAAKgP,QAAO,OAAM,IAAKC,MAAQC,UAAS,2BAA0B,GAI5EE,EAAO5N,MAAMxB,KAAK6O,SAAUU,GAC9BlN,KAAK,SAAAiH,GAAK,OAAAA,EAAEoG,SACZrN,KAAKrC,KAAK2P,gBACVtN,KAAK,SAACuN,GAIH,OAFA1P,EAAAA,OAAO6O,MAAM,IAAIjP,EAAKkP,QAAO,OAAM,IAAKC,MAAQC,UAAS,gCAA+B,GAEjFU,EAAeC,UAAUC,OAAO,SAACC,EAAOzN,EAAU0N,GAErD,IAAMC,EAAUnQ,EAAKqP,SAASa,GAE9B,GAAIE,EAAAA,qBAAqBD,GAIrB,OAFA/P,EAAAA,OAAO6O,MAAM,IAAIjP,EAAKkP,QAAO,OAAM,IAAKC,MAAQC,UAAS,+BAA+Be,EAAQ/M,OAAM,IAAI+M,EAAQxO,IAAG,IAAG,GAEjHsO,EAAM1N,KAAK,SAAA8N,GAAK,OAAAF,EAAQhK,OAAOmK,MAAM9N,GAAUD,KAAK4N,EAAQ1N,SAASC,MAAMyN,EAAQvN,UAK1F,GAAIkN,EAAeS,SACf,MAAM,IAAI1B,EAAyB,kEAQvC,OAAOoB,GAGZ/M,QAAQT,cAIfqM,EAAA/N,UAAAyO,eAAR,WAEI,OAAOtP,KAAKmP,SAASjL,IAAI,SAACoM,EAASN,GAE/B,IAAIO,GACA/H,GAAI,MAAKwH,EACT9M,OAAQoN,EAAQpN,OAChBzB,IAAK6O,EAAQ7O,KAGbR,KA4BJ,YAzB0C,IAA/BR,EAAmBQ,SAA0D,OAA/BR,EAAmBQ,UAExEA,EAAUe,EAAAA,OAAOf,EAASR,EAAmBQ,eAGlB,IAApBqP,EAAQ5O,eAGwB,IAA5B4O,EAAQ5O,QAAQT,SAAuD,OAA5BqP,EAAQ5O,QAAQT,UAClEA,EAAUe,EAAAA,OAAOf,EAASqP,EAAQ5O,QAAQT,eAIV,IAAzBqP,EAAQ5O,QAAQgH,MAAiD,OAAzB4H,EAAQ5O,QAAQgH,OAE/D6H,EAAkBvO,EAAAA,OAAOuO,GACrB7H,KAAM4H,EAAQ5O,QAAQgH,SAKlC6H,EAAkBvO,EAAAA,OAAOuO,GACrBtP,QAASA,OAOb2N,EAAA/N,UAAA8O,eAAR,SAAuBa,GAAvB,IAAA1Q,EAAAE,KAEI,OAAO,IAAIgD,QAAQ,SAACT,GAIhB,IAFA,IAAMkO,EAA8B,IAAIC,MAAM5Q,EAAKqP,SAAS7H,QAAQqJ,KAAK,MAEhEC,EAAI,EAAGA,EAAIJ,EAAcX,UAAUvI,SAAUsJ,EAAG,CAErD,IAAMtO,EAAWkO,EAAcX,UAAUe,GAGnCC,EAAaC,SAASxO,EAASkG,GAAI,IAAM,EAEvB,MAApBlG,EAASG,OAETgO,EAAgBI,GAAc,IAAIE,SAGlCN,EAAgBI,GAAc,IAAIE,SAAS,MACvC9P,QAASqB,EAASrB,QAClBwB,OAAQH,EAASG,SAK7BF,GACI8N,SAAUG,EAAcH,SACxBR,UAAWY,OAhIvBO,EAAAA,YADCC,EAAAA,KAAK,6EAqIVrC,EA3IA,CAAgCsC,EAAAA","sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class NoGraphClientAvailableException extends Error {\n\n    constructor(msg = \"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\") {\n        super(msg);\n        this.name = \"NoGraphClientAvailableException\";\n        Logger.log({ data: null, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== null && typeof graphPart !== \"undefined\" && typeof graphPart.headers !== \"undefined\") {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== null && typeof graphPart.fetchClientFactory !== \"undefined\") {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (typeof RuntimeConfig.spfxContext !== \"undefined\") {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw new NoGraphClientAvailableException();\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { GraphEndpoints, TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").setEndpoint(GraphEndpoints.Beta).putCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: JSON.stringify({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.add(\"startDateTime\", start.toISOString());\n        view.query.add(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n","import {\n    combinePaths,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combinePaths(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combinePaths(\"https://graph.microsoft.com\", url);\n        }\n\n        return url + `?${this._query.getKeys().map(key => `${key}=${this._query.get(key)}`).join(\"&\")}`;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        let clone = new factory(this, additionalPath);\n        clone.configure(this._options);\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            clone = clone.inBatch(this._batch);\n        }\n\n        return clone;\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const query = this._query.getKeys().filter(k => k === \"$orderby\").map(k => this._query.get(k));\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this._query.add(\"$orderby\", query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this._query.add(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this._query.add(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this._query.add(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this._query.add(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: JSON.stringify({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: JSON.stringify(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.add(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import {\n    graph,\n} from \"./rest\";\n\nimport {\n    Group,\n    GroupType,\n    GroupAddResult,\n} from \"./groups\";\n\nimport {\n    GraphQueryable,\n    GraphQueryableInstance,\n} from \"./graphqueryable\";\n\nimport {\n    GraphEndpoints,\n    TeamProperties,\n} from \"./types\";\n\nimport {\n    ODataParser,\n    ODataDefaultParser,\n} from \"@pnp/odata\";\n\nimport {\n    FetchOptions,\n} from \"@pnp/common\";\n\nexport class Teams {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     */\n    public create(name: string, description = \"\", teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = description && description.length > 0 ? { description: description } : {};\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n}\n\n/**\n * Represents a Microsoft Team\n */\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"team\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).patchCore({\n            body: JSON.stringify(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).getCore(parser, options);\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\nexport class OneNote extends GraphQueryableInstance implements OneNoteMethods {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"onenote\") {\n        super(baseUrl, path);\n    }\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\nexport class Notebooks extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"notebooks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\nexport class Sections extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"sections\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\nexport class Pages extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"pages\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\n\nexport class Me extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"me\") {\n        super(baseUrl, path);\n    }\n\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\n/**\n * Describes a collection of Users objects\n *\n */\nexport class Users extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"users\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance {}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Me } from \"./me\";\nimport { Teams } from \"./teams\";\nimport { Users } from \"./users\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams();\n    }\n\n    public get me(): Me {\n        return new Me(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { beta, objectDefinedNotNull, extend } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatchParseException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"GraphBatchParseException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\n        super();\n    }\n\n    @beta(\"Graph batching functionality is in beta.\")\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        const client = new GraphHttpClient();\n\n        const batchRequest: GraphBatchRequest = {\n            requests: this.formatRequests(),\n        };\n\n        const batchOptions = {\n            \"body\": JSON.stringify(batchRequest),\n            \"headers\": {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            \"method\": \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        // let nextLinkFlag = false;\n\n        return client.fetch(this.batchUrl, batchOptions)\n            .then(r => r.json())\n            .then(this._parseResponse)\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                return parsedResponse.responses.reduce((chain, response, index) => {\n\n                    const request = this.requests[index];\n\n                    if (objectDefinedNotNull(request)) {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    } else {\n\n                        // do we have a next url? if no this is an error\n                        if (parsedResponse.nextLink) {\n                            throw new GraphBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                        }\n\n                        // nextLinkFlag = true;\n                        // keep the chain moving, but don't add anything for this request yet\n                        // here we need to process the next link - so what do we do?\n                        // need to append a .then()\n                        // TODO::\n                        return chain;\n                    }\n\n                }, Promise.resolve());\n            });\n    }\n\n    private formatRequests(): GraphBatchRequestFragment[] {\n\n        return this.requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: reqInfo.url,\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (typeof GraphRuntimeConfig.headers !== \"undefined\" && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (typeof reqInfo.options !== \"undefined\") {\n\n                // merge per request headers\n                if (typeof reqInfo.options.headers !== \"undefined\" && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (typeof reqInfo.options.body !== \"undefined\" && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(null, {\n                        headers: response.headers,\n                        status: response.status,\n                    });\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n}\n\n"]}