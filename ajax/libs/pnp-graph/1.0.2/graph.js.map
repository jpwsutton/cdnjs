{"version":3,"file":"graph.js","sources":["../../../../packages/graph/src/net/spfxclient.ts","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/v1.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"sourcesContent":["import { FetchOptions, HttpClientImpl, ISPFXGraphHttpClient } from \"@pnp/common\";\n\nexport class SPfxClient implements HttpClientImpl {\n    constructor(private _client: ISPFXGraphHttpClient, private _configuration: any = {}) { }\n\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n        return this._client.fetch(url, this._configuration, options);\n    }\n}\n","import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPfxClient } from \"../net/spfxclient\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class NoGraphClientAvailableException extends Error {\n\n    constructor(msg = \"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\") {\n        super(msg);\n        this.name = \"NoGraphClientAvailableException\";\n        Logger.log({ data: null, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== null && typeof graphPart !== \"undefined\" && typeof graphPart.headers !== \"undefined\") {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.fetchClientFactory !== \"undefined\") {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (typeof RuntimeConfig.spfxContext !== \"undefined\") {\n            return () => new SPfxClient(RuntimeConfig.spfxContext.graphHttpClient);\n        }\n\n        throw new NoGraphClientAvailableException();\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    Util,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        const opts = Util.extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","import {\n    Util,\n    FetchOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable extends ODataQueryable<GraphBatch> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = Util.combinePaths(urlStr, path);\n        } else {\n\n            const q = baseUrl as GraphQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        return this.toUrl() + `?${this._query.getKeys().map(key => `${key}=${this._query.get(key)}`).join(\"&\")}`;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            return new factory(this, additionalPath);\n        }\n\n        return new factory(this, additionalPath);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: Util.getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection extends GraphQueryable {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this._query.add(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this._query.add(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this._query.add(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this._query.add(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance extends GraphQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: JSON.stringify({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: JSON.stringify(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.add(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<string | number | boolean> = {}): Promise<GroupAddResult> {\n\n        let postBody = Util.extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = Util.extend(postBody, {\n                groupTypes: [groupType === GroupType.Office365 ? \"Unified\" : \"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get caldendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: JSON.stringify({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.add(\"startDateTime\", start.toISOString());\n        view.query.add(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport { Groups } from \"./groups\";\n// import { Me } from \"./me\";\n\n/**\n * Root object wrapping v1 functionality for MS Graph\n *\n */\nexport class V1 extends GraphQueryable {\n\n    /**\n     * Creates a new instance of the V1 class\n     *\n     * @param baseUrl The url or Queryable which forms the parent of this fields collection\n     * @param path Optional additional path\n     */\n    constructor(baseUrl: string | GraphQueryable, path = \"v1.0\") {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    // public get me(): Me {\n    //     return new Me(this);\n    // }\n}\n","import { V1 } from \"./v1\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nexport class GraphRest {\n\n    public get v1(): V1 {\n        return new V1(\"\");\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest();\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, beta } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatchParseException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"GraphBatchParseException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\n        super();\n    }\n\n    @beta(\"Graph batching functionality is in beta.\")\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        const client = new GraphHttpClient();\n\n        const batchRequest: GraphBatchRequest = {\n            requests: this.formatRequests(),\n        };\n\n        const batchOptions = {\n            \"body\": JSON.stringify(batchRequest),\n            \"headers\": {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            \"method\": \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        // let nextLinkFlag = false;\n\n        return client.fetch(this.batchUrl, batchOptions)\n            .then(r => r.json())\n            .then(this._parseResponse)\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                return parsedResponse.responses.reduce((chain, response, index) => {\n\n                    const request = this.requests[index];\n\n                    if (Util.objectDefinedNotNull(request)) {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    } else {\n\n                        // do we have a next url? if no this is an error\n                        if (parsedResponse.nextLink) {\n                            throw new GraphBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                        }\n\n                        // nextLinkFlag = true;\n                        // keep the chain moving, but don't add anything for this request yet\n                        // here we need to process the next link - so what do we do?\n                        // need to append a .then()\n                        // TODO::\n                        return chain;\n                    }\n\n                }, Promise.resolve());\n            });\n    }\n\n    private formatRequests(): GraphBatchRequestFragment[] {\n\n        return this.requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: reqInfo.url,\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (typeof GraphRuntimeConfig.headers !== \"undefined\" && GraphRuntimeConfig.headers !== null) {\n\n                headers = Util.extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (typeof reqInfo.options !== \"undefined\") {\n\n                // merge per request headers\n                if (typeof reqInfo.options.headers !== \"undefined\" && reqInfo.options.headers !== null) {\n                    headers = Util.extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (typeof reqInfo.options.body !== \"undefined\" && reqInfo.options.body !== null) {\n\n                    requestFragment = Util.extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = Util.extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(null, {\n                        headers: response.headers,\n                        status: response.status,\n                    });\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n}\n\n"],"names":["_setup","tslib_1.__decorate"],"mappings":"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"}