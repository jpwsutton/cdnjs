{"version":3,"sources":["../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/exceptions.ts","../../../../packages/graph/src/net/graphclient.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/v1.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"names":["config","RuntimeConfig","extend","GroupType","NoGraphClientAvailableException","_super","msg","_this","call","this","name","Logger","log","data","level","LogLevel","Error","message","__extends","GraphBatchParseException","GraphRuntimeConfig","GraphRuntimeConfigImpl","Object","defineProperty","prototype","graphPart","get","headers","fetchClientFactory","spfxContext","graphHttpClient","GraphHttpClient","_impl","fetch","url","options","Headers","mergeHeaders","opts","Util","fetchRaw","rawHeaders","retry","ctx","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","method","post","patch","delete","GraphQueryable","baseUrl","path","urlStr","_parentUrl","_url","combinePaths","q","_options","as","factory","o","toUrlAndQuery","toUrl","_query","getKeys","map","key","join","getParent","parentUrl","clone","additionalPath","includeBatch","toRequestContext","verb","parser","pipeline","PipelineMethods","default","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","hasBatch","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","GraphQueryableCollection","filter","add","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","keys","query","asc","i","push","top","toString","skip","num","skipToken","token","GraphQueryableSearchableCollection","search","GraphQueryableInstance","Members","id","postCore","body","JSON","stringify","@odata.id","getById","Member","Owners","Calendar","Calendars","Events","Event","properties","r","event","update","patchCore","deleteCore","Attachments","Attachment","addFile","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","reply","forward","info","Senders","remove","remover","Plans","Plan","Photo","getBlob","BlobFileParser","getBuffer","BufferFileParser","setContent","content","Groups","Group","mailNickname","groupType","additionalProperties","postBody","displayName","mailEnabled","Office365","securityEnabled","Security","groupTypes","group","addFavorite","getMemberGroups","securityEnabledOnly","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","view","toISOString","V1","GraphRest","setup","_setup","graph","GraphBatch","batchUrl","executeImpl","write","batchId","Date","getTime","requests","Info","client","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","_parseResponse","parsedResponse","responses","reduce","chain","index","request","objectDefinedNotNull","Verbose","_","parse","stringIsNullOrEmpty","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","Array","fill","responseId","parseInt","Response","__decorate","beta","ODataBatch"],"mappings":"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","sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig } from \"@pnp/common\";\r\nimport { GraphHttpClientImpl } from \"../net/graphclient\";\r\nimport { NoGraphClientAvailableException } from \"../exceptions\";\r\n\r\nexport interface GraphConfigurationPart {\r\n    graph?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: TypedHash<string>;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => GraphHttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\r\n\r\nexport function setup(config: GraphConfiguration): void {\r\n    RuntimeConfig.extend(config);\r\n}\r\n\r\nexport class GraphRuntimeConfigImpl {\r\n\r\n    public get headers(): TypedHash<string> {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.headers !== \"undefined\") {\r\n            return graphPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get fetchClientFactory(): () => GraphHttpClientImpl {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        // use a configured factory firt\r\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.fetchClientFactory !== \"undefined\") {\r\n            return graphPart.fetchClientFactory;\r\n        }\r\n\r\n        // then try and use spfx context if available\r\n        if (typeof RuntimeConfig.spfxContext !== \"undefined\") {\r\n            return () => RuntimeConfig.spfxContext.graphHttpClient;\r\n        }\r\n\r\n        throw new NoGraphClientAvailableException();\r\n    }\r\n}\r\n\r\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\r\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<string | number | boolean> = {}): Promise<GroupAddResult> {\n\n        let postBody = Util.extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = Util.extend(postBody, {\n                groupTypes: [groupType === GroupType.Office365 ? \"Unified\" : \"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get caldendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: JSON.stringify({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.add(\"startDateTime\", start.toISOString());\n        view.query.add(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport class NoGraphClientAvailableException extends Error {\r\n\r\n    constructor(msg = \"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\") {\r\n        super(msg);\r\n        this.name = \"NoGraphClientAvailableException\";\r\n        Logger.log({ data: null, level: LogLevel.Error, message: this.message });\r\n    }\r\n}\r\n\r\nexport class GraphBatchParseException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"GraphBatchParseException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\n\r\n","import {\n    Util,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n// import { APIUrlException } from \"../utils/exceptions\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: GraphHttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        const opts = Util.extend(options, { headers: headers });\n\n        // TODO: we could process auth here\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, {}, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: {} | PromiseLike<{}>) => void;\n    retryCount: number;\n}\n\nexport interface GraphHttpClientImpl {\n    fetch(url: string, configuration: any, options: FetchOptions): Promise<Response>;\n}\n","import {\n    Util,\n    FetchOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n    PipelineMethods,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphclient\";\nimport { GraphBatch } from \"./batch\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable extends ODataQueryable<GraphBatch> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = Util.combinePaths(urlStr, path);\n        } else {\n\n            const q = baseUrl as GraphQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        return this.toUrl() + `?${this._query.getKeys().map(key => `${key}=${this._query.get(key)}`).join(\"&\")}`;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            return new factory(this, additionalPath);\n        }\n\n        return new factory(this, additionalPath);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>> = PipelineMethods.default): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: Util.getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection extends GraphQueryable {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this._query.add(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this._query.add(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this._query.add(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this._query.add(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance extends GraphQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: JSON.stringify({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: JSON.stringify(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.add(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobFileParser, BufferFileParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobFileParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BufferFileParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport { Groups } from \"./groups\";\n// import { Me } from \"./me\";\n\n/**\n * Root object wrapping v1 functionality for MS Graph\n *\n */\nexport class V1 extends GraphQueryable {\n\n    /**\n     * Creates a new instance of the V1 class\n     *\n     * @param baseUrl The url or Queryable which forms the parent of this fields collection\n     * @param path Optional additional path\n     */\n    constructor(baseUrl: string | GraphQueryable, path = \"v1.0\") {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    // public get me(): Me {\n    //     return new Me(this);\n    // }\n}\n","import { V1 } from \"./v1\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nexport class GraphRest {\n\n    public get v1(): V1 {\n        return new V1(\"\");\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest();\n","import { ODataBatch } from \"@pnp/odata\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { Util, beta } from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\r\nimport { GraphHttpClient } from \"./net/graphclient\";\r\nimport { GraphBatchParseException } from \"./exceptions\";\r\n\r\ninterface GraphBatchRequestFragment {\r\n    id: string;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface GraphBatchRequest {\r\n    requests: GraphBatchRequestFragment[];\r\n}\r\n\r\ninterface GraphBatchResponseFragment {\r\n    id: string;\r\n    status: number;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface GraphBatchResponse {\r\n    responses: GraphBatchResponseFragment[];\r\n    nextLink?: string;\r\n}\r\n\r\nexport class GraphBatch extends ODataBatch {\r\n\r\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\r\n        super();\r\n    }\r\n\r\n    @beta(\"Graph batching functionality is in beta.\")\r\n    protected executeImpl(): Promise<void> {\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\r\n\r\n        const client = new GraphHttpClient();\r\n\r\n        const batchRequest: GraphBatchRequest = {\r\n            requests: this.formatRequests(),\r\n        };\r\n\r\n        const batchOptions = {\r\n            \"body\": JSON.stringify(batchRequest),\r\n            \"headers\": {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            \"method\": \"POST\",\r\n        };\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\r\n\r\n        let nextLinkFlag = false;\r\n\r\n        return client.fetch(this.batchUrl, batchOptions)\r\n            .then(r => r.json())\r\n            .then(this._parseResponse)\r\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\r\n\r\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\r\n\r\n                return parsedResponse.responses.reduce((chain, response, index) => {\r\n\r\n                    const request = this.requests[index];\r\n\r\n                    if (Util.objectDefinedNotNull(request)) {\r\n\r\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\r\n\r\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\r\n\r\n                    } else {\r\n\r\n                        // do we have a next url? if no this is an error\r\n                        if (!Util.stringIsNullOrEmpty(parsedResponse.nextLink)) {\r\n                            throw new GraphBatchParseException(\"Could not properly parse responses to match requests in batch.\");\r\n                        }\r\n\r\n                        nextLinkFlag = true;\r\n                        // keep the chain moving, but don't add anything for this request yet\r\n                        // here we need to process the next link - so what do we do?\r\n                        // need to append a .then()\r\n                        // TODO::\r\n                        return chain;\r\n                    }\r\n\r\n                }, Promise.resolve());\r\n            });\r\n    }\r\n\r\n    private formatRequests(): GraphBatchRequestFragment[] {\r\n\r\n        return this.requests.map((reqInfo, index) => {\r\n\r\n            let requestFragment: GraphBatchRequestFragment = {\r\n                id: `${++index}`,\r\n                method: reqInfo.method,\r\n                url: reqInfo.url,\r\n            };\r\n\r\n            let headers = {};\r\n\r\n            // merge global config headers\r\n            if (typeof GraphRuntimeConfig.headers !== \"undefined\" && GraphRuntimeConfig.headers !== null) {\r\n\r\n                headers = Util.extend(headers, GraphRuntimeConfig.headers);\r\n            }\r\n\r\n            if (typeof reqInfo.options !== \"undefined\") {\r\n\r\n                // merge per request headers\r\n                if (typeof reqInfo.options.headers !== \"undefined\" && reqInfo.options.headers !== null) {\r\n                    headers = Util.extend(headers, reqInfo.options.headers);\r\n                }\r\n\r\n                // add a request body\r\n                if (typeof reqInfo.options.body !== \"undefined\" && reqInfo.options.body !== null) {\r\n\r\n                    requestFragment = Util.extend(requestFragment, {\r\n                        body: reqInfo.options.body,\r\n                    });\r\n                }\r\n            }\r\n\r\n            requestFragment = Util.extend(requestFragment, {\r\n                headers: headers,\r\n            });\r\n\r\n            return requestFragment;\r\n        });\r\n    }\r\n\r\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\r\n\r\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\r\n\r\n                const response = graphResponse.responses[i];\r\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\r\n                // the array of requests and make it easier to map them by index\r\n                const responseId = parseInt(response.id, 10) - 1;\r\n\r\n                if (response.status === 204) {\r\n\r\n                    parsedResponses[responseId] = new Response();\r\n                } else {\r\n\r\n                    parsedResponses[responseId] = new Response(null, {\r\n                        headers: response.headers,\r\n                        status: response.status,\r\n                    });\r\n                }\r\n            }\r\n\r\n            resolve({\r\n                nextLink: graphResponse.nextLink,\r\n                responses: parsedResponses,\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n"]}