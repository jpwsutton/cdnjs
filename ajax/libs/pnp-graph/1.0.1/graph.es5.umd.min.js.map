{"version":3,"sources":["../../../../packages/graph/src/net/spfxclient.ts","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/v1.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"names":["SPfxClient","_client","_configuration","this","prototype","fetch","url","options","GroupType","NoGraphClientAvailableException","_super","msg","_this","call","name","Logger","log","data","level","message","tslib_1.__extends","Error","GraphRuntimeConfig","GraphRuntimeConfigImpl","Object","defineProperty","graphPart","RuntimeConfig","get","headers","fetchClientFactory","spfxContext","graphHttpClient","GraphHttpClient","_impl","Headers","mergeHeaders","opts","Util","extend","fetchRaw","rawHeaders","retry","ctx","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","method","post","patch","delete","GraphQueryable","baseUrl","path","urlStr","_parentUrl","_url","combinePaths","q","_options","as","factory","o","toUrlAndQuery","toUrl","_query","getKeys","map","key","join","getParent","parentUrl","clone","additionalPath","includeBatch","toRequestContext","verb","parser","pipeline","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","hasBatch","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","GraphQueryableCollection","filter","add","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","keys","query","asc","i","push","top","toString","skip","num","skipToken","token","GraphQueryableSearchableCollection","search","GraphQueryableInstance","Members","id","postCore","body","JSON","stringify","@odata.id","getById","Member","Owners","Calendar","Calendars","Events","Event","properties","r","event","update","patchCore","deleteCore","Attachments","Attachment","addFile","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","reply","forward","info","Senders","remove","remover","Plans","Plan","Photo","getBlob","BlobParser","getBuffer","BufferParser","setContent","content","Groups","Group","mailNickname","groupType","additionalProperties","postBody","displayName","mailEnabled","Office365","securityEnabled","Security","groupTypes","group","addFavorite","getMemberGroups","securityEnabledOnly","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","view","toISOString","V1","GraphRest","setup","config","graph","GraphBatchParseException","GraphBatch","batchUrl","executeImpl","write","batchId","Date","getTime","requests","client","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","_parseResponse","parsedResponse","responses","reduce","chain","index","request","objectDefinedNotNull","_","parse","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","Array","fill","responseId","parseInt","Response","tslib_1.__decorate","beta","ODataBatch"],"mappings":"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","sourcesContent":["import { FetchOptions, ISPFXGraphHttpClient, HttpClientImpl } from \"@pnp/common\";\n\nexport class SPfxClient implements HttpClientImpl {\n    constructor(private _client: ISPFXGraphHttpClient, private _configuration: any = {}) { }\n\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n        return this._client.fetch(url, this._configuration, options);\n    }\n}\n","import { LibraryConfiguration, TypedHash, RuntimeConfig } from \"@pnp/common\";\nimport { GraphHttpClientImpl } from \"../net/graphhttpclient\";\nimport { SPfxClient } from \"../net/spfxclient\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => GraphHttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class NoGraphClientAvailableException extends Error {\n\n    constructor(msg = \"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\") {\n        super(msg);\n        this.name = \"NoGraphClientAvailableException\";\n        Logger.log({ data: null, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== null && typeof graphPart !== \"undefined\" && typeof graphPart.headers !== \"undefined\") {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => GraphHttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (typeof graphPart !== \"undefined\" && typeof graphPart.fetchClientFactory !== \"undefined\") {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (typeof RuntimeConfig.spfxContext !== \"undefined\") {\n            return () => new SPfxClient(RuntimeConfig.spfxContext.graphHttpClient);\n        }\n\n        throw new NoGraphClientAvailableException();\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<string | number | boolean> = {}): Promise<GroupAddResult> {\n\n        let postBody = Util.extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = Util.extend(postBody, {\n                groupTypes: [groupType === GroupType.Office365 ? \"Unified\" : \"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get caldendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: JSON.stringify({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.add(\"startDateTime\", start.toISOString());\n        view.query.add(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import {\n    Util,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: GraphHttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        const opts = Util.extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, {}, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n\nexport interface GraphHttpClientImpl {\n    fetch(url: string, configuration: any, options: FetchOptions): Promise<Response>;\n}\n","import {\n    Util,\n    FetchOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable extends ODataQueryable<GraphBatch> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = Util.combinePaths(urlStr, path);\n        } else {\n\n            const q = baseUrl as GraphQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        return this.toUrl() + `?${this._query.getKeys().map(key => `${key}=${this._query.get(key)}`).join(\"&\")}`;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            return new factory(this, additionalPath);\n        }\n\n        return new factory(this, additionalPath);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: Util.getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection extends GraphQueryable {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this._query.add(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this._query.add(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this._query.add(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this._query.add(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance extends GraphQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: JSON.stringify({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: JSON.stringify(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: JSON.stringify(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: JSON.stringify(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: JSON.stringify({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: JSON.stringify({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.add(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport { Groups } from \"./groups\";\n// import { Me } from \"./me\";\n\n/**\n * Root object wrapping v1 functionality for MS Graph\n *\n */\nexport class V1 extends GraphQueryable {\n\n    /**\n     * Creates a new instance of the V1 class\n     *\n     * @param baseUrl The url or Queryable which forms the parent of this fields collection\n     * @param path Optional additional path\n     */\n    constructor(baseUrl: string | GraphQueryable, path = \"v1.0\") {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    // public get me(): Me {\n    //     return new Me(this);\n    // }\n}\n","import { V1 } from \"./v1\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nexport class GraphRest {\n\n    public get v1(): V1 {\n        return new V1(\"\");\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest();\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, beta } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatchParseException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"GraphBatchParseException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\n        super();\n    }\n\n    @beta(\"Graph batching functionality is in beta.\")\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        const client = new GraphHttpClient();\n\n        const batchRequest: GraphBatchRequest = {\n            requests: this.formatRequests(),\n        };\n\n        const batchOptions = {\n            \"body\": JSON.stringify(batchRequest),\n            \"headers\": {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            \"method\": \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        // let nextLinkFlag = false;\n\n        return client.fetch(this.batchUrl, batchOptions)\n            .then(r => r.json())\n            .then(this._parseResponse)\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                return parsedResponse.responses.reduce((chain, response, index) => {\n\n                    const request = this.requests[index];\n\n                    if (Util.objectDefinedNotNull(request)) {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    } else {\n\n                        // do we have a next url? if no this is an error\n                        if (parsedResponse.nextLink) {\n                            throw new GraphBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                        }\n\n                        // nextLinkFlag = true;\n                        // keep the chain moving, but don't add anything for this request yet\n                        // here we need to process the next link - so what do we do?\n                        // need to append a .then()\n                        // TODO::\n                        return chain;\n                    }\n\n                }, Promise.resolve());\n            });\n    }\n\n    private formatRequests(): GraphBatchRequestFragment[] {\n\n        return this.requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: reqInfo.url,\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (typeof GraphRuntimeConfig.headers !== \"undefined\" && GraphRuntimeConfig.headers !== null) {\n\n                headers = Util.extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (typeof reqInfo.options !== \"undefined\") {\n\n                // merge per request headers\n                if (typeof reqInfo.options.headers !== \"undefined\" && reqInfo.options.headers !== null) {\n                    headers = Util.extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (typeof reqInfo.options.body !== \"undefined\" && reqInfo.options.body !== null) {\n\n                    requestFragment = Util.extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = Util.extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(null, {\n                        headers: response.headers,\n                        status: response.status,\n                    });\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n}\n\n"]}