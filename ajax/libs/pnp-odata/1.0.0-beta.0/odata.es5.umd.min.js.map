{"version":3,"sources":["../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/exceptions.ts","../../../../packages/odata/src/core.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"names":["returnResult","context","Logger","log","data","result","level","LogLevel","Verbose","message","requestId","Date","getTime","Promise","resolve","setResult","value","hasResult","next","c","_next","pipeline","shift","pipe","then","ctx","catch","e","Error","requestPipelineMethod","alwaysRun","target","propertyKey","descriptor","method","args","_i","arguments","length","hasOwnProperty","write","apply","CachingOptions","key","this","expiration","Util","dateAdd","RuntimeConfig","defaultCachingTimeoutSeconds","storeName","defaultCachingStore","Object","defineProperty","prototype","storage","local","session","PnPClientStorage","CachingParserWrapper","_parser","_cacheOptions","parse","response","_this","store","put","ProcessHttpClientResponseException","_super","status","statusText","call","name","__extends","AlreadyInBatchException","msg","ODataParserBase","r","reject","handleError","headers","has","parseFloat","get","text","txt","replace","JSON","json","parseODataJSON","ok","responseBody","responseHeaders","Warning","d","results","ODataDefaultParser","ODataValueParserImpl","ODataRawParserImpl","ODataRaw","TextFileParser","BlobFileParser","blob","JSONFileParser","BufferFileParser","isFunction","arrayBuffer","buffer","PipelineMethods","logStart","activeLogLevel","Info","verb","requestAbsoluteUrl","caching","isCached","cacheOptions","toLowerCase","cachingOptions","extend","batchDependency","parser","send","isBatched","p","batch","add","options","batchId","client","clientFactory","opts","fetch","logEnd","__decorate","ODataQueryable","concat","pathPart","_url","_query","configure","mergeOptions","_options","usingCaching","globalCacheDisable","_useCaching","_cachingOptions","inBatch","_batch","toUrl","toRequestContext","default","getAs","postCore","postAsCore","patchCore","deleteCore","addBatchDependency","hasBatch","addDependency","objectDefinedNotNull","append","combinePaths","_parentUrl","ODataBatch","_batchId","getGUID","_requests","_dependencies","url","info","toUpperCase","push","resolver","promise","execute","all","executeImpl"],"mappings":"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","sourcesContent":["import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, FetchOptions, RequestClient } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    const _next = c.pipeline.shift();\n\n    if (typeof _next !== \"undefined\") {\n        return _next(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: `Error in request pipeline: ${e.message}`,\n            });\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = Util.extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    const data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        context.batchDependency();\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                context.batchDependency();\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = Util.extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n\n    public static get default() {\n        return [\n            PipelineMethods.logStart,\n            PipelineMethods.caching,\n            PipelineMethods.send,\n            PipelineMethods.logEnd,\n        ];\n    }\n}\n","import { ODataParser } from \"./core\";\nimport { RuntimeConfig, Util, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = Util.dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\n/**\r\n * Represents an exception with an HttpClient request\r\n *\r\n */\r\nexport class ProcessHttpClientResponseException extends Error {\r\n\r\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\r\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\r\n        this.name = \"ProcessHttpClientResponseException\";\r\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\r\n    }\r\n}\r\n\r\nexport class AlreadyInBatchException extends Error {\r\n\r\n    constructor(msg = \"This query is already part of a batch.\") {\r\n        super(msg);\r\n        this.name = \"AlreadyInBatchException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\n","import { ProcessHttpClientResponseException } from \"./exceptions\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\nexport interface ODataParser<T> {\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\") || \"-1\") === 0) || r.status === 204) {\n                    resolve(<T>{});\n                } else {\n\n                    // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\n                    r.text()\n                        .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                        .then(json => resolve(this.parseODataJSON<T>(json)))\n                        .catch(e => reject(e));\n                }\n            }\n        });\n    }\n\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error with parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n","import { ODataParser, ODataParserBase } from \"./core\";\nimport { Util } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nclass ODataValueParserImpl<T> extends ODataParserBase<T> {\n    public parse(r: Response): Promise<T> {\n        return super.parse(r).then(d => d as T);\n    }\n}\n\nexport function ODataValue<T>(): ODataParser<T> {\n    return new ODataValueParserImpl<T>();\n}\n\nexport class ODataRawParserImpl implements ODataParser<any> {\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport let ODataRaw = new ODataRawParserImpl();\n\nexport class TextFileParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobFileParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONFileParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferFileParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (Util.isFunction(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n","import {\n    Util,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { AlreadyInBatchException } from \"./exceptions\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    PipelineMethods,\n    pipe,\n} from \"./pipeline\";\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType;\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions;\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url, made absolute based on the availability of the _spPageContextInfo object\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get(parser: ODataParser<any> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<any> {\n        return this.toRequestContext(\"GET\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    public getAs<T>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext(\"GET\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    protected postCore(options: FetchOptions = {}, parser: ODataParser<any> = new ODataDefaultParser()): Promise<any> {\n        return this.toRequestContext(\"POST\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    protected postAsCore<T>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"POST\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    protected patchCore(options: FetchOptions = {}, parser: ODataParser<any> = new ODataDefaultParser()): Promise<any> {\n        return this.toRequestContext(\"PATCH\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    protected deleteCore(options: FetchOptions = {}, parser: ODataParser<any> = new ODataDefaultParser()): Promise<any> {\n        return this.toRequestContext(\"DELETE\", options, parser, PipelineMethods.default).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this.hasBatch) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return Util.objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = Util.combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n","import { ODataParser } from \"./core\";\r\nimport { Util, FetchOptions } from \"@pnp/common\";\r\n\r\nexport interface ODataBatchRequestInfo {\r\n    url: string;\r\n    method: string;\r\n    options: FetchOptions;\r\n    parser: ODataParser<any>;\r\n    resolve: ((d: any) => void) | null;\r\n    reject: ((error: any) => void) | null;\r\n}\r\n\r\nexport abstract class ODataBatch {\r\n\r\n    protected _dependencies: Promise<void>[];\r\n    protected _requests: ODataBatchRequestInfo[];\r\n\r\n    constructor(private _batchId = Util.getGUID()) {\r\n        this._requests = [];\r\n        this._dependencies = [];\r\n    }\r\n\r\n    public get batchId(): string {\r\n        return this._batchId;\r\n    }\r\n\r\n    /**\r\n     * The requests contained in this batch\r\n     */\r\n    protected get requests(): ODataBatchRequestInfo[] {\r\n        return this._requests;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url Request url\r\n     * @param method Request method (GET, POST, etc)\r\n     * @param options Any request options\r\n     * @param parser The parser used to handle the eventual return from the query\r\n     */\r\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\r\n\r\n        const info: ODataBatchRequestInfo = {\r\n            method: method.toUpperCase(),\r\n            options: options,\r\n            parser: parser,\r\n            reject: null,\r\n            resolve: null,\r\n            url: url,\r\n        };\r\n\r\n        const p = new Promise<T>((resolve, reject) => {\r\n            info.resolve = resolve;\r\n            info.reject = reject;\r\n        });\r\n\r\n        this._requests.push(info);\r\n\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\r\n     * MUST be cleared using the returned resolve delegate to allow batches to run\r\n     */\r\n    public addDependency(): () => void {\r\n\r\n        let resolver: () => void = () => void (0);\r\n        const promise = new Promise<void>((resolve) => {\r\n            resolver = resolve;\r\n        });\r\n\r\n        this._dependencies.push(promise);\r\n\r\n        return resolver;\r\n    }\r\n\r\n    /**\r\n     * Execute the current batch and resolve the associated promises\r\n     *\r\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\r\n     */\r\n    public execute(): Promise<void> {\r\n\r\n        // we need to check the dependencies twice due to how different engines handle things.\r\n        // We can get a second set of promises added after the first set resolve\r\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\r\n    }\r\n\r\n    protected abstract executeImpl(): Promise<void>;\r\n}\r\n"]}