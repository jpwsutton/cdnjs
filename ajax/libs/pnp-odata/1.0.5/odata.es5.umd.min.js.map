{"version":3,"sources":["../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"names":["CachingOptions","key","this","expiration","dateAdd","Date","RuntimeConfig","defaultCachingTimeoutSeconds","storeName","defaultCachingStore","Object","defineProperty","prototype","storage","local","session","PnPClientStorage","CachingParserWrapper","_parser","_cacheOptions","parse","response","_this","then","data","store","put","ProcessHttpClientResponseException","_super","status","statusText","call","name","Logger","log","level","message","tslib_1.__extends","Error","ODataParserBase","r","Promise","resolve","reject","handleError","parseImpl","headers","has","parseFloat","get","text","txt","replace","length","JSON","json","parseODataJSON","catch","e","ok","responseBody","responseHeaders","result","hasOwnProperty","d","results","value","ODataDefaultParser","TextParser","BlobParser","blob","JSONParser","BufferParser","isFunc","arrayBuffer","buffer","setResult","context","hasResult","next","c","pipeline","shift","pipe","write","requestId","getTime","ctx","error","requestPipelineMethod","alwaysRun","target","propertyKey","descriptor","method","args","_i","arguments","apply","PipelineMethods","logStart","activeLogLevel","verb","requestAbsoluteUrl","caching","isCached","cacheOptions","toLowerCase","cachingOptions","extend","batchDependency","parser","hydrate","send","isBatched","p","batch","add","options","batchId","client","clientFactory","opts","fetch","logEnd","tslib_1.__decorate","slice","AlreadyInBatchException","msg","Queryable","_query","Dictionary","_options","_url","_parentUrl","_useCaching","_cachingOptions","toUrl","concat","pathPart","configure","mergeOptions","configureFrom","o","usingCaching","globalCacheDisable","getCore","toRequestContext","getDefaultPipeline","postCore","patchCore","deleteCore","putCore","append","combinePaths","parent","path","ODataQueryable","_batch","inBatch","addBatchDependency","addDependency","objectDefinedNotNull","hasBatch","ODataBatch","_batchId","getGUID","_requests","_dependencies","url","info","toUpperCase","push","resolver","promise","execute","all","executeImpl"],"mappings":"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","sourcesContent":["import { ODataParser } from \"./parsers\";\nimport { RuntimeConfig, dateAdd, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { isFunc } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n            if (this.handleError(r, reject)) {\n                this.parseImpl(r, resolve, reject);\n            }\n        });\n    }\n\n    protected parseImpl(r: Response, resolve: (value?: T | PromiseLike<T>) => void, reject: (value?: T | PromiseLike<T>) => void): void {\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")) === 0) || r.status === 204) {\n            resolve(<T>{});\n        } else {\n\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\n            r.text()\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                .then(json => resolve(this.parseODataJSON<T>(json)))\n                .catch(e => reject(e));\n        }\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser extends ODataParserBase<string> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.text().then(resolve);\n    }\n}\n\nexport class BlobParser extends ODataParserBase<Blob> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.blob().then(resolve);\n    }\n}\n\nexport class JSONParser extends ODataParserBase<any> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n        r.json().then(resolve);\n    }\n}\n\nexport class BufferParser extends ODataParserBase<ArrayBuffer> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        if (isFunc(r.arrayBuffer)) {\n            r.arrayBuffer().then(resolve);\n        }\n\n        (<any>r).buffer().then(resolve);\n    }\n}\n","import { ODataParser } from \"./parsers\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, FetchOptions, RequestClient, isFunc } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.error(e);\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        if (isFunc(context.batchDependency)) {\n                            context.batchDependency();\n                        }\n                        // handle the case where a parser needs to take special actions with a cached result\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                if (isFunc(context.batchDependency)) {\n                    context.batchDependency();\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import {\n    combinePaths,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n    objectDefinedNotNull,\n} from \"@pnp/common\";\nimport { Logger } from \"@pnp/logging\";\nimport { ODataParser, ODataDefaultParser, JSONParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport abstract class Queryable<GetType> {\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n    * Gets the currentl url\n    *\n    */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Configures this instance from the configure options of the supplied instance\n     * \n     * @param o Instance from which options should be taken\n     */\n    public configureFrom(o: Queryable<any>): this {\n        mergeOptions(this._options, o._options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new JSONParser(), options: FetchOptions = {}): Promise<T> {\n        return this.getCore(parser, options);\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new JSONParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext<T>(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Extends this queryable from \n     * \n     * @param parent Parent queryable from which we will derive a base url\n     * @param path Additional path\n     */\n    protected extend(parent: Queryable<any>, path?: string) {\n        this._parentUrl = parent._url;\n        this._url = combinePaths(this._parentUrl, path);\n        this.configureFrom(parent);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch, GetType = any> extends Queryable<GetType> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    constructor() {\n        super();\n        this._batch = null;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.getCore(parser, options);\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext<T>(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n}\n","import { ODataParser } from \"./parsers\";\nimport { getGUID, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"]}