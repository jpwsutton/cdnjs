{"version":3,"sources":["../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/core.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"names":["returnResult","context","Logger","log","data","result","level","message","requestId","Date","getTime","Promise","resolve","setResult","value","hasResult","next","c","_next","pipeline","shift","pipe","then","ctx","catch","e","requestPipelineMethod","alwaysRun","target","propertyKey","descriptor","method","args","_i","arguments","length","hasOwnProperty","write","apply","PipelineMethods","logStart","caching","send","logEnd","slice","CachingOptions","key","this","expiration","Util","dateAdd","RuntimeConfig","defaultCachingTimeoutSeconds","storeName","defaultCachingStore","Object","defineProperty","prototype","storage","local","session","PnPClientStorage","CachingParserWrapper","_parser","_cacheOptions","parse","response","_this","store","put","ProcessHttpClientResponseException","_super","status","statusText","call","name","tslib_1.__extends","Error","ODataParserBase","r","reject","handleError","text","txt","replace","JSON","json","parseODataJSON","ok","responseBody","responseHeaders","headers","d","results","ODataDefaultParser","TextParser","BlobParser","blob","JSONParser","BufferParser","isFunc","arrayBuffer","buffer","activeLogLevel","verb","requestAbsoluteUrl","isCached","cacheOptions","toLowerCase","cachingOptions","extend","get","batchDependency","parser","hydrate","isBatched","p","batch","add","options","batchId","client","clientFactory","opts","fetch","tslib_1.__decorate","AlreadyInBatchException","msg","ODataQueryable","_batch","_query","Dictionary","_options","_url","_parentUrl","_useCaching","_cachingOptions","concat","pathPart","configure","mergeOptions","usingCaching","globalCacheDisable","inBatch","toUrl","toRequestContext","getDefaultPipeline","postCore","patchCore","deleteCore","addBatchDependency","addDependency","objectDefinedNotNull","hasBatch","append","combinePaths","ODataBatch","_batchId","getGUID","_requests","_dependencies","url","info","toUpperCase","push","resolver","promise","execute","all","executeImpl"],"mappings":"sVA+BA,SAAAA,EAAyBC,GAQrB,OANAC,EAAAA,OAAOC,KACHC,KAAMH,EAAQI,OACdC,MAAK,EACLC,QAAS,IAAIN,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,qDAGvDC,QAAQC,QAAQX,EAAQI,QAAU,MAM7C,SAAAQ,EAA6BZ,EAA4Ba,GAErD,OAAO,IAAIH,QAA2B,SAACC,GAEnCX,EAAQI,OAASS,EACjBb,EAAQc,WAAY,EACpBH,EAAQX,KAShB,SAAAe,EAAiBC,GAEb,IAAMC,EAAQD,EAAEE,SAASC,QAEzB,YAAqB,IAAVF,EACAA,EAAMD,GAENN,QAAQC,QAAQK,GAS/B,SAAAI,EAAwBpB,GAEpB,OAAOe,EAAKf,GACPqB,KAAK,SAAAC,GAAO,OAAAvB,EAAauB,KACzBC,MAAM,SAACC,GAMJ,MALAvB,EAAAA,OAAOC,KACHC,KAAMqB,EACNnB,MAAK,EACLC,QAAS,8BAA8BkB,EAAElB,UAEvCkB,IAOlB,SAAAC,EAAsCC,GAElC,YAFkC,IAAAA,IAAAA,GAAA,GAE3B,SAACC,EAAaC,EAAqBC,GAEtC,IAAMC,EAASD,EAAWhB,MAE1BgB,EAAWhB,MAAQ,eAAU,IAAAkB,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAGzB,OAAKN,GAAaK,EAAKG,OAAS,GAAKH,EAAK,GAAGI,eAAe,cAAgBJ,EAAK,GAAGjB,WAChFb,EAAAA,OAAOmC,MAAM,IAAIL,EAAK,GAAGxB,UAAS,OAAM,IAAKC,MAAQC,UAAS,sCAAsCmB,EAAW,iCAAgC,GACxIlB,QAAQC,QAAQoB,EAAK,MAIhC9B,EAAAA,OAAOmC,MAAM,IAAIL,EAAK,GAAGxB,UAAS,OAAM,IAAKC,MAAQC,UAAS,qCAAqCmB,EAAW,IAAG,GAG1GE,EAAOO,MAAMV,EAAQI,GAAMV,KAAK,SAACC,GAA6B,OAAAP,EAAKO,qBAiJlF,OACIgB,EAAgBC,SAChBD,EAAgBE,QAChBF,EAAgBG,KAChBH,EAAgBI,QAClBC,MAAM,GC5PZ,IAAAC,EAAA,WAQI,SAAAA,EAAmBC,GAAAC,KAAAD,IAAAA,EAJZC,KAAAC,WAAaC,EAAAA,KAAKC,QAAQ,IAAIzC,KAAQ,SAAU0C,EAAAA,cAAcC,8BAE9DL,KAAAM,UAAiCF,EAAAA,cAAcG,oBAW1D,OAPIC,OAAAC,eAAWX,EAAAY,UAAA,aAAX,WACI,MAAuB,UAAnBV,KAAKM,UACER,EAAea,QAAQC,MAEvBd,EAAea,QAAQE,yCAZrBf,EAAAa,QAAU,IAAIG,EAAAA,iBAenChB,EAjBA,GAmBAiB,EAAA,WAEI,SAAAA,EACYC,EACAC,GADAjB,KAAAgB,QAAAA,EACAhB,KAAAiB,cAAAA,EAchB,OAZWF,EAAAL,UAAAQ,MAAP,SAAaC,GAAb,IAAAC,EAAApB,KAGI,OAAOA,KAAKgB,QAAQE,MAAMC,GAAU5C,KAAK,SAAAlB,GAMrC,OAJiC,OAA7B+D,EAAKH,cAAcI,OACnBD,EAAKH,cAAcI,MAAMC,IAAIF,EAAKH,cAAclB,IAAK1C,EAAM+D,EAAKH,cAAchB,YAG3E5C,KAGnB0D,EAlBA,GCtBAQ,EAAA,SAAAC,GAEI,SAAAD,EAA4BE,EAAgCC,EAAoCrE,GAAhG,IAAA+D,EACII,EAAAG,KAAA3B,KAAM,kDAAkDyB,EAAM,KAAKC,IAAa1B,YADxDoB,EAAAK,OAAAA,EAAgCL,EAAAM,WAAAA,EAAoCN,EAAA/D,KAAAA,EAE5F+D,EAAKQ,KAAO,qCACZzE,EAAAA,OAAOC,KAAMC,KAAM+D,EAAK/D,KAAME,MAAK,EAAkBC,QAAS4D,EAAK5D,YAE3E,OAPwDqE,EAAAA,UAAAA,EAAAA,GAOxDN,EAPA,CAAwDO,OAcxDC,EAAA,WAAA,SAAAA,KA8EA,OA5EWA,EAAArB,UAAAQ,MAAP,SAAac,GAAb,IAAAZ,EAAApB,KAEI,OAAO,IAAIpC,QAAW,SAACC,EAASoE,GAExBb,EAAKc,YAAYF,EAAGC,IAEpBD,EAAEG,OACG5D,KAAK,SAAA6D,GAAO,OAAAA,EAAIC,QAAQ,OAAQ,IAAIjD,OAAS,EAAIkD,KAAKpB,MAAMkB,QAC5D7D,KAAK,SAAAgE,GAAQ,OAAA1E,EAAQuD,EAAKoB,eAAkBD,MAC5C9D,MAAM,SAAAC,GAAK,OAAAuD,EAAOvD,QAYzBqD,EAAArB,UAAAwB,YAAV,SAAsBF,EAAaC,GAkC/B,OAjCKD,EAAES,IAGHT,EAAEO,OAAOhE,KAAK,SAAAgE,GAGV,IAAMlF,GACFqF,aAAcH,EACdI,gBAAiBX,EAAEY,SAGvBX,EAAO,IAAIV,EAAmCS,EAAEP,OAAQO,EAAEN,WAAYrE,MAEvEoB,MAAM,SAAAC,GAILvB,EAAAA,OAAOC,KACHC,KAAMqB,EACNnB,MAAK,EACLC,QAAS,8EAIb,IAAMH,GACFqF,aAAc,yBACdC,gBAAiBX,EAAEY,SAGvBX,EAAO,IAAIV,EAAmCS,EAAEP,OAAQO,EAAEN,WAAYrE,MAIvE2E,EAAES,IAQHV,EAAArB,UAAA8B,eAAV,SAA4BD,GACxB,IAAIjF,EAASiF,EAUb,OATIA,EAAKlD,eAAe,KAEhB/B,EADAiF,EAAKM,EAAExD,eAAe,WACbkD,EAAKM,EAAEC,QAEPP,EAAKM,EAEXN,EAAKlD,eAAe,WAC3B/B,EAASiF,EAAKxE,OAEXT,GAEfyE,EA9EA,GCjBAgB,EAAA,SAAAvB,GAAA,SAAAuB,mDACA,OADwClB,EAAAA,UAAAA,EAAAA,GACxCkB,EADA,CAAwChB,GAGxCiB,EAAA,WAAA,SAAAA,KAKA,OAHWA,EAAAtC,UAAAQ,MAAP,SAAac,GACT,OAAOA,EAAEG,QAEjBa,EALA,GAOAC,EAAA,WAAA,SAAAA,KAKA,OAHWA,EAAAvC,UAAAQ,MAAP,SAAac,GACT,OAAOA,EAAEkB,QAEjBD,EALA,GAOAE,EAAA,WAAA,SAAAA,KAKA,OAHWA,EAAAzC,UAAAQ,MAAP,SAAac,GACT,OAAOA,EAAEO,QAEjBY,EALA,GAOAC,EAAA,WAAA,SAAAA,KAUA,OARWA,EAAA1C,UAAAQ,MAAP,SAAac,GAET,OAAI9B,EAAAA,KAAKmD,OAAOrB,EAAEsB,aACPtB,EAAEsB,cAGNtB,EAAEuB,UAEjBH,EAVA,GH4FA5D,EAAA,WAAA,SAAAA,KAsIA,OAhIkBA,EAAAC,SAAd,SAA0BvC,GAEtB,OAAO,IAAIU,QAA2B,SAAAC,GAElCV,EAAAA,OAAOC,KACHC,KAA2B,IAArBF,EAAAA,OAAOqG,kBAAwCtG,EACrDK,MAAK,EACLC,QAAS,IAAIN,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,eAAeT,EAAQuG,KAAI,aAAavG,EAAQwG,mBAAkB,MAGhI7F,EAAQX,MAQFsC,EAAAE,QAAd,SAAyBxC,GAErB,OAAO,IAAIU,QAA2B,SAAAC,GAGlC,GAAqB,QAAjBX,EAAQuG,MAAkBvG,EAAQyG,SAAU,CAE5CxG,EAAAA,OAAOmC,MAAM,IAAIpC,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,sDAAqD,GAEnH,IAAIiG,EAAe,IAAI9D,EAAe5C,EAAQwG,mBAAmBG,eAMjE,QALsC,IAA3B3G,EAAQ4G,iBACfF,EAAe1D,EAAAA,KAAK6D,OAAOH,EAAc1G,EAAQ4G,iBAI1B,OAAvBF,EAAavC,MAAgB,CAE7B,IAAIhE,EAAOuG,EAAavC,MAAM2C,IAAIJ,EAAa7D,KAC/C,GAAa,OAAT1C,EAYA,OAVAF,EAAAA,OAAOC,KACHC,KAA2B,IAArBF,EAAAA,OAAOqG,kBAAwCnG,EACrDE,MAAK,EACLC,QAAS,IAAIN,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,iCAE9DT,EAAQ+G,kBAEJ/G,EAAQgH,OAAO7E,eAAe,aAC9BhC,EAAOH,EAAQgH,OAAOC,QAAS9G,IAE5BS,EAAUZ,EAASG,GAAMkB,KAAK,SAAAC,GAAO,OAAAX,EAAQW,KAI5DrB,EAAAA,OAAOmC,MAAM,IAAIpC,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,8BAA6B,GAI3FT,EAAQgH,OAAS,IAAInD,EAAqB7D,EAAQgH,OAAQN,GAG9D,OAAO/F,EAAQX,MAQTsC,EAAAG,KAAd,SAAsBzC,GAElB,OAAO,IAAIU,QAA2B,SAACC,EAASoE,GAE5C,GAAI/E,EAAQkH,UAAW,CAGnB,IAAMC,EAAInH,EAAQoH,MAAMC,IAAIrH,EAAQwG,mBAAoBxG,EAAQuG,KAAMvG,EAAQsH,QAAStH,EAAQgH,QAG/FhH,EAAQ+G,kBAER9G,EAAAA,OAAOmC,MAAM,IAAIpC,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,+BAA+BT,EAAQoH,MAAMG,QAAO,IAAG,GAGrH5G,EAAQC,EAAUZ,EAASmH,QAExB,CAEHlH,EAAAA,OAAOmC,MAAM,IAAIpC,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,qBAAoB,GAGlF,IAAM+G,EAASxH,EAAQyH,gBACjBC,EAAO1E,EAAAA,KAAK6D,OAAO7G,EAAQsH,aAAiBxF,OAAQ9B,EAAQuG,OAClEiB,EAAOG,MAAM3H,EAAQwG,mBAAoBkB,GACpCrG,KAAK,SAAA4C,GAAY,OAAAjE,EAAQgH,OAAOhD,MAAMC,KACtC5C,KAAK,SAAAjB,GAAU,OAAAQ,EAAUZ,EAASI,KAClCiB,KAAK,SAAAC,GAAO,OAAAX,EAAQW,KACpBC,MAAM,SAAAC,GAAK,OAAAuD,EAAOvD,SASrBc,EAAAI,OAAd,SAAwB1C,GAEpB,OAAO,IAAIU,QAA2B,SAAAC,GAE9BX,EAAQkH,UAERjH,EAAAA,OAAOC,KACHC,KAA2B,IAArBF,EAAAA,OAAOqG,kBAAwCtG,EACrDK,MAAK,EACLC,QAAS,IAAIN,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,KAAKT,EAAQuG,KAAI,mCAAmCvG,EAAQoH,MAAMG,QAAO,MAKvItH,EAAAA,OAAOC,KACHC,KAA2B,IAArBF,EAAAA,OAAOqG,kBAAwCtG,EACrDK,MAAK,EACLC,QAAS,IAAIN,EAAQO,UAAS,OAAM,IAAKC,MAAQC,UAAS,gBAAgBT,EAAQuG,KAAI,cAI9F5F,EAAQX,MA7HhB4H,EAAAA,YADCnG,GAAsB,uBAmBvBmG,EAAAA,YADCnG,uBAkDDmG,EAAAA,YADCnG,oBAsCDmG,EAAAA,YADCnG,GAAsB,qBAyB3Ba,EAtIA,GIpGAuF,EAAA,SAAAvD,GAEI,SAAAuD,EAAYC,QAAA,IAAAA,IAAAA,EAAA,0CAAZ,IAAA5D,EACII,EAAAG,KAAA3B,KAAMgF,IAAIhF,YACVoB,EAAKQ,KAAO,0BACZzE,EAAAA,OAAOC,KAAMC,QAAUE,MAAK,EAAkBC,QAAS,IAAI4D,EAAKQ,KAAI,MAAMR,EAAK5D,YAEvF,OAP6CqE,EAAAA,UAAAA,EAAAA,GAO7CkD,EAPA,CAA6CjD,OAS7CmD,EAAA,WAqCI,SAAAA,IACIjF,KAAKkF,OAAS,KACdlF,KAAKmF,OAAS,IAAIC,EAAAA,WAClBpF,KAAKqF,YACLrF,KAAKsF,KAAO,GACZtF,KAAKuF,WAAa,GAClBvF,KAAKwF,aAAc,EACnBxF,KAAKyF,gBAAkB,KAiK/B,OAzJWR,EAAAvE,UAAAgF,OAAP,SAAcC,GAEV,OADA3F,KAAKsF,MAAQK,EACN3F,MAOXQ,OAAAC,eAAWwE,EAAAvE,UAAA,aAAX,WACI,OAAOV,KAAKmF,wCAQTF,EAAAvE,UAAAkF,UAAP,SAAiBpB,GAEb,OADAqB,EAAAA,aAAa7F,KAAKqF,SAAUb,GACrBxE,MAQJiF,EAAAvE,UAAAoF,aAAP,SAAoBtB,GAOhB,OANKpE,EAAAA,cAAc2F,qBACf/F,KAAKwF,aAAc,OACI,IAAZhB,IACPxE,KAAKyF,gBAAkBjB,IAGxBxE,MAcJiF,EAAAvE,UAAAsF,QAAP,SAAe1B,GAEX,GAAmB,OAAftE,KAAKsE,MACL,MAAM,IAAIS,EAKd,OAFA/E,KAAKkF,OAASZ,EAEPtE,MAOJiF,EAAAvE,UAAAuF,MAAP,WACI,OAAOjG,KAAKsF,MAeTL,EAAAvE,UAAAsD,IAAP,SAAoBE,EAAmDM,GACnE,YADgB,IAAAN,IAAAA,EAAA,IAA6BnB,QAAsB,IAAAyB,IAAAA,MAC5DxE,KAAKkG,iBAAiB,MAAO1B,EAASN,EAAQiC,KAAsB5H,KAAK,SAAArB,GAAW,OAAAoB,EAAKpB,MAG1F+H,EAAAvE,UAAA0F,SAAV,SAA4B5B,EAA4BN,GACpD,YADwB,IAAAM,IAAAA,WAA4B,IAAAN,IAAAA,EAAA,IAA6BnB,GAC1E/C,KAAKkG,iBAAiB,OAAQ1B,EAASN,EAAQiC,KAAsB5H,KAAK,SAAArB,GAAW,OAAAoB,EAAKpB,MAG3F+H,EAAAvE,UAAA2F,UAAV,SAA6B7B,EAA4BN,GACrD,YADyB,IAAAM,IAAAA,WAA4B,IAAAN,IAAAA,EAAA,IAA6BnB,GAC3E/C,KAAKkG,iBAAiB,QAAS1B,EAASN,EAAQiC,KAAsB5H,KAAK,SAAArB,GAAW,OAAAoB,EAAKpB,MAG5F+H,EAAAvE,UAAA4F,WAAV,SAA8B9B,EAA4BN,GACtD,YAD0B,IAAAM,IAAAA,WAA4B,IAAAN,IAAAA,EAAA,IAA6BnB,GAC5E/C,KAAKkG,iBAAiB,SAAU1B,EAASN,EAAQiC,KAAsB5H,KAAK,SAAArB,GAAW,OAAAoB,EAAKpB,MAM7F+H,EAAAvE,UAAA6F,mBAAV,WACI,OAAoB,OAAhBvG,KAAKkF,OACElF,KAAKkF,OAAOsB,gBAGhB,WAAM,OAAA,OAOjBhG,OAAAC,eAAcwE,EAAAvE,UAAA,gBAAd,WACI,OAAOR,EAAAA,KAAKuG,qBAAqBzG,KAAKkF,yCAO1C1E,OAAAC,eAAcwE,EAAAvE,UAAA,aAAd,WACI,OAAOV,KAAK0G,SAAW1G,KAAKkF,OAAS,sCAQ/BD,EAAAvE,UAAAiG,OAAV,SAAiBhB,GACb3F,KAAKsF,KAAOpF,EAAAA,KAAK0G,aAAa5G,KAAKsF,KAAMK,IAO7CnF,OAAAC,eAAcwE,EAAAvE,UAAA,iBAAd,WACI,OAAOV,KAAKuF,4CAgBpBN,EA7MA,GChBA4B,EAAA,WAKI,SAAAA,EAAoBC,QAAA,IAAAA,IAAAA,EAAW5G,EAAAA,KAAK6G,WAAhB/G,KAAA8G,SAAAA,EAChB9G,KAAKgH,aACLhH,KAAKiH,iBAuEb,OApEIzG,OAAAC,eAAWoG,EAAAnG,UAAA,eAAX,WACI,OAAOV,KAAK8G,0CAMhBtG,OAAAC,eAAcoG,EAAAnG,UAAA,gBAAd,WACI,OAAOV,KAAKgH,2CAUTH,EAAAnG,UAAA6D,IAAP,SAAc2C,EAAalI,EAAgBwF,EAAuBN,GAE9D,IAAMiD,GACFnI,OAAQA,EAAOoI,cACf5C,QAASA,EACTN,OAAQA,EACRjC,OAAQ,KACRpE,QAAS,KACTqJ,IAAKA,GAGH7C,EAAI,IAAIzG,QAAW,SAACC,EAASoE,GAC/BkF,EAAKtJ,QAAUA,EACfsJ,EAAKlF,OAASA,IAKlB,OAFAjC,KAAKgH,UAAUK,KAAKF,GAEb9C,GAOJwC,EAAAnG,UAAA8F,cAAP,WAEI,IAAIc,EAAuB,aACrBC,EAAU,IAAI3J,QAAc,SAACC,GAC/ByJ,EAAWzJ,IAKf,OAFAmC,KAAKiH,cAAcI,KAAKE,GAEjBD,GAQJT,EAAAnG,UAAA8G,QAAP,WAAA,IAAApG,EAAApB,KAII,OAAOpC,QAAQ6J,IAAIzH,KAAKiH,eAAe1I,KAAK,WAAM,OAAAX,QAAQ6J,IAAIrG,EAAK6F,iBAAgB1I,KAAK,WAAM,OAAA6C,EAAKsG,iBAI3Gb,EA9EA","sourcesContent":["import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, FetchOptions, RequestClient } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    const _next = c.pipeline.shift();\n\n    if (typeof _next !== \"undefined\") {\n        return _next(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: `Error in request pipeline: ${e.message}`,\n            });\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = Util.extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        context.batchDependency();\n                        // handle the case where a parser needs to take special actions with a cached result (such as getAs)\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                context.batchDependency();\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = Util.extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import { ODataParser } from \"./core\";\nimport { RuntimeConfig, Util, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = Util.dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                // handle all requests as text, then parse if they are not empty\n                r.text()\n                    .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                    .then(json => resolve(this.parseODataJSON<T>(json)))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n","import { ODataParser, ODataParserBase } from \"./core\";\nimport { Util } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (Util.isFunc(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n","import {\n    Util,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._batch = null;\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = any>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return Util.objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = Util.combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n","import { ODataParser } from \"./core\";\nimport { Util, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = Util.getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"]}