{"version":3,"file":"odata.es5.umd.js","sources":["../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/core.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"sourcesContent":["import { ODataParser } from \"./core\";\nimport { RuntimeConfig, dateAdd, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                // handle all requests as text, then parse if they are not empty\n                r.text()\n                    .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                    .then(json => resolve(this.parseODataJSON<T>(json)))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n","import { ODataParser, ODataParserBase } from \"./core\";\nimport { isFunc } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (isFunc(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n","import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, FetchOptions, RequestClient, isFunc } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.error(e);\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        if (isFunc(context.batchDependency)) {\n                            context.batchDependency();\n                        }\n                        // handle the case where a parser needs to take special actions with a cached result\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                if (isFunc(context.batchDependency)) {\n                    context.batchDependency();\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import {\n    combinePaths,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n    objectDefinedNotNull,\n} from \"@pnp/common\";\nimport { Logger } from \"@pnp/logging\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser, JSONParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport abstract class Queryable<GetType> {\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n    * Gets the currentl url\n    *\n    */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Configures this instance from the configure options of the supplied instance\n     * \n     * @param o Instance from which options should be taken\n     */\n    public configureFrom(o: Queryable<any>): this {\n        mergeOptions(this._options, o._options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new JSONParser(), options: FetchOptions = {}): Promise<T> {\n        return this.getCore(parser, options);\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new JSONParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext<T>(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new JSONParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Extends this queryable from \n     * \n     * @param parent Parent queryable from which we will derive a base url\n     * @param path Additional path\n     */\n    protected extend(parent: Queryable<any>, path?: string) {\n        this._parentUrl = parent._url;\n        this._url = combinePaths(this._parentUrl, path);\n        this.configureFrom(parent);\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch, GetType = any> extends Queryable<GetType> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    constructor() {\n        super();\n        this._batch = null;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.getCore(parser, options);\n    }\n\n    protected getCore<T = GetType>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext<T>(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected putCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext<T>(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n}\n","import { ODataParser } from \"./core\";\nimport { getGUID, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"],"names":["dateAdd","RuntimeConfig","PnPClientStorage","tslib_1.__extends","Logger","isFunc","extend","tslib_1.__decorate","Dictionary","mergeOptions","combinePaths","objectDefinedNotNull","getGUID"],"mappings":"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"}