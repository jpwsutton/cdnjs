{"version":3,"sources":["../../../../packages/sp/src/utils/extractweburl.ts","../../../../packages/sp/src/exceptions.ts","../../../../packages/sp/src/odata.ts","../../../../packages/sp/src/config/splibconfig.ts","../../../../packages/sp/src/net/digestcache.ts","../../../../packages/sp/src/net/sphttpclient.ts","../../../../packages/sp/src/utils/toabsoluteurl.ts","../../../../packages/sp/src/sharepointqueryable.ts","../../../../packages/sp/src/sitegroups.ts","../../../../packages/sp/src/siteusers.ts","../../../../packages/sp/src/types.ts","../../../../packages/sp/src/roles.ts","../../../../packages/sp/src/files.ts","../../../../packages/sp/src/sharepointqueryablesecurable.ts","../../../../packages/sp/src/sharepointqueryableshareable.ts","../../../../packages/sp/src/webparts.ts","../../../../packages/sp/src/folders.ts","../../../../packages/sp/src/contenttypes.ts","../../../../packages/sp/src/attachmentfiles.ts","../../../../packages/sp/src/views.ts","../../../../packages/sp/src/fields.ts","../../../../packages/sp/src/forms.ts","../../../../packages/sp/src/subscriptions.ts","../../../../packages/sp/src/usercustomactions.ts","../../../../packages/sp/src/lists.ts","../../../../packages/sp/src/comments.ts","../../../../packages/sp/src/items.ts","../../../../packages/sp/src/appcatalog.ts","../../../../packages/sp/src/clientsidepages.ts","../../../../packages/sp/src/search.ts","../../../../packages/sp/src/navigation.ts","../../../../packages/sp/src/regionalsettings.ts","../../../../packages/sp/src/searchsuggest.ts","../../../../packages/sp/src/batch.ts","../../../../packages/sp/src/features.ts","../../../../packages/sp/src/relateditems.ts","../../../../packages/sp/src/webs.ts","../../../../packages/sp/src/site.ts","../../../../packages/sp/src/userprofiles.ts","../../../../packages/sp/src/social.ts","../../../../packages/sp/src/utilities.ts","../../../../packages/sp/src/rest.ts"],"names":["candidateUrl","index","indexOf","substr","SPBatchParseException","_super","msg","_this","call","this","name","Logger","error","tslib_1.__extends","Error","SPODataIdException","data","MaxCommentLengthException","NotSupportedInBatchException","operation","APIUrlException","candidate","hasOwnProperty","__metadata","id","SPODataEntityParserImpl","factory","hydrate","d","o","spGetEntityUrl","extend","prototype","parse","r","then","ODataParserBase","SPODataEntityArrayParserImpl","map","v","entity","combinePaths","extractWebUrl","uri","write","spODataEntity","SPRuntimeConfig","SPRuntimeConfigImpl","Object","defineProperty","spPart","RuntimeConfig","get","headers","baseUrl","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","FetchClient","CachedDigest","digests","Dictionary","DigestCache","_httpClient","_digests","getDigest","webUrl","cachedDigest","Date","expiration","Promise","resolve","value","url","fetchRaw","cache","credentials","Accept","Content-Type","method","response","ODataDefaultParser","GetContextWebInformation","newCachedDigest","FormDigestValue","seconds","FormDigestTimeoutSeconds","setTime","getTime","add","clear","SPHttpClient","_impl","_digestCache","fetch","options","opts","Headers","mergeHeaders","has","append","toUpperCase","digest","rawHeaders","retry","ctx","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","retryContext","post","patch","delete","toAbsoluteUrl","isUrlAbsolute","global","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","location","baseUrl_1","toString","toLowerCase","forEach","s","PrincipalType","SharePointQueryable","path","urlStr","lastIndexOf","_parentUrl","_url","slice","q","target","_query","as","toUrlAndQuery","aliasedParams","toUrl","replace","match","labelName","merge","count","getKeys","key","join","getParent","batch","parentUrl","parent","configure","_options","query","inBatch","clone","additionalPath","includeBatch","hasBatch","toRequestContext","verb","parser","pipeline","dependencyDispose","addBatchDependency","mergeOptions","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","SharePointQueryableCollection","filter","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","k","push","skip","top","SharePointQueryableInstance","SiteUsers","getByEmail","email","SiteUser","getById","getByLoginName","loginName","su","concat","encodeURIComponent","removeById","postCore","removeByLoginName","body","JSON","stringify","type","LoginName","SiteGroups","update","properties","postBody","X-HTTP-Method","user","CurrentUser","ControlMode","FieldTypes","DateTimeFieldFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","FieldUserSelectionMode","ChoiceFieldFormatType","group","Id","getByName","groupName","SiteGroup","sg","retGroup","RoleAssignments","principalId","roleDefId","remove","ra","RoleAssignment","RoleDefinitionBindings","RoleDefinitions","RoleDefinition","getByType","roleTypeKind","description","order","basePermissions","BasePermissions","Description","Name","Order","definition","retDef","CheckinType","WebPartsPersonalizationScope","MoveOperations","TemplateFileType","SharePointQueryableSecurable","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","num","SharePointQueryableShareable","getShareLink","kind","expString","toISOString","request","createLink","emailData","settings","linkKind","shareWith","loginNames","role","requireSignin","propagateAcl","Array","isArray","userStr","login","Key","roleFilter","Edit","Contributor","Reader","def","includeAnonymousLinkInEmail","peoplePickerInput","roleValue","useSimplifiedRoles","emailBody","emailSubject","subject","sendEmail","shareObject","bypass","sendShareObjectRequest","getRoleValue","unshareObjectWeb","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","g","Guest","getShareObjectWeb","SharePointQueryableShareableWeb","View","dependency","shareObjectRaw","SharePointQueryableShareableItem","OrganizationView","checkSharingPermissions","unshare","deleteSharingLinkByKind","FileFolderShared","getShareable","shareable","SharePointQueryableShareableFile","SharePointQueryableShareableFolder","shareEverything","LimitedWebPartManager","WebPartDefinitions","export","webPartId","import","xml","webPartXml","WebPartDefinition","getByControlId","WebPart","saveChanges","moveTo","zoneId","zoneIndex","close","open","Folders","f","Folder","folder","Files","eTag","IF-Match","recycle","getItem","listItemAllFields","apply","Item","ContentTypes","ct","ContentType","addAvailableContentType","contentTypeId","contentType","additionalSettings","Group","StringValue","FieldLinks","fl","FieldLink","AttachmentFiles","AttachmentFile","content","file","addMultiple","files","reduce","chain","deleteMultiple","getText","getParsed","TextParser","getBlob","BlobParser","getBuffer","BufferParser","getJSON","JSONParser","setContent","_","Views","getByTitle","title","personalView","PersonalView","Title","view","ViewFields","renderAsHtml","getSchemaXml","fieldTitleOrInternalName","move","fieldInternalName","field","removeAll","Fields","Field","getByInternalNameOrTitle","createFieldAsXml","info","SchemaXml","parameters","fieldType","addText","maxLength","props","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","addUser","selectionMode","SelectionMode","addLookup","lookupListId","lookupFieldName","LookupFieldName","LookupListId","addChoice","choices","format","fillIn","Dropdown","Choices","results","EditFormat","FillInChoice","addMultiChoice","addBoolean","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","Forms","i","Form","Subscriptions","subscriptionId","subscription","Subscription","notificationUrl","expirationDate","clientState","expirationDateTime","resource","result","patchCore","deleteCore","UserCustomActions","uca","UserCustomAction","action","Lists","List","list","template","enableContentTypes","addSettings","AllowContentTypes","BaseTemplate","ContentTypesEnabled","ensure","addOrUpdateSettings","created","e","ensureSiteAssetsLibrary","json","spExtractODataId","ensureSitePagesLibrary","Items","getView","viewId","retList","getChanges","getItemsByCAMLQuery","getListItemChangesSinceToken","text","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","overrideParameters","renderListFormData","itemId","formId","mode","ListData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","Comments","c","Comment","Replies","like","unlike","getItemByStringId","stringId","reverse","getPaged","PagedItemCollectionParser","getAll","requestSize","items","test","itemsCollector","gatherer","last","hasNext","getNext","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","promise","item","candidatelistItemEntityTypeFullName","File","ItemVersions","ItemUpdatedParser","getLikedBy","getWopiFrameUrl","GetWOPIFrameUrl","validateUpdateListItem","formValues","newDocumentUpdate","bNewDocumentUpdate","versionId","ItemVersion","PagedItemCollection","nextUrl","configureFrom","_parent","handleError","__next","parseODataJSON","odata.etag","shouldOverWrite","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","Major","checkout","copyTo","deny","getLimitedWebPartManager","scope","Shared","moveOperations","Overwrite","publish","undoCheckout","unpublish","binaryStringResponseBody","fileSize","size","blockCount","parseInt","blockNumber","currentPointer","stage","totalBlocks","startUpload","pointer","continueUpload","finishUpload","fragment","n","StartUpload","parseFloat","fileOffset","ContinueUpload","ServerRelativeUrl","Version","deleteAll","deleteById","recycleByID","deleteByLabel","label","recycleByLabel","restoreByLabel","AppCatalog","getAppById","App","filename","deploy","retract","install","uninstall","upgrade","getNextOrder","collection","Math","max","regexIndexOf","regex","startpos","substring","search","getAttrValueFromString","html","attrName","RegExp","exec","getBoundedDivMarkup","boundaryStartPattern","collector","blocks","cleanedHtml","startIndex","openCounter","searchIndex","nextDivOpen","nextCloseDiv","markup","trim","reindex","columns","controls","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","ClientSidePage","sections","commentsDisabled","create","library","pageName","pageLayoutType","rootFolder","fs","pageServerRelPath","ServerRelativePath","DecodedUrl","far","BannerImageUrl","Url","CanvasContent1","ClientSideApplicationId","ContentTypeId","PageLayoutType","PromotedState","iar","CommentsDisabled","fromFile","page","load","jsonToEscapedString","escapedStringToJson","escapedString","addSection","section","CanvasSection","toHtml","fromHtml","control","CanvasColumn","mergeColumnToTree","ClientSideWebpart","mergePartToTree","ClientSideText","save","updateProperties","enableComments","setCommentsOn","disableComments","findControlById","findControl","predicate","j","on","column","controlData","position","sectionIndex","sectionFactor","addControl","_memId","addColumn","factor","defaultColumn","CanvasControl","controlType","dataVersion","getControlData","getControl","jsonData","displayMode","ClientSidePart","_text","startsWith","editorType","controlIndex","propertieJson","htmlProperties","serverProcessedContent","canvasDataVersion","fromComponentDef","part","component","manifest","Manifest","preconfiguredEntries","default","parseJsonProperties","setProperties","getProperties","instanceId","renderHtmlProperties","webPartData","htmlProps","searchablePlainTexts","keys","imageSources","links","NavigationNodes","node","NavigationNode","visible","IsVisible","moveAfter","nodeId","previousNodeId","Navigation","NavigationService","getMenuState","menuNodeKey","depth","mapProviderName","customProperties","getMenuNodeKey","currentUrl","RegionalSettings","InstalledLanguages","TimeZone","TimeZones","utcToLocalTime","utcTime","dateIsoString","res","UTCToLocalTime","localTimeToUTC","localTime","dateAdd","getTimezoneOffset","LocalTimeToUTC","SearchQueryBuilder","queryText","extendQuery","Querytext","queryTemplate","QueryTemplate","sourceId","SourceId","EnableInterleaving","EnableStemming","TrimDuplicates","trimDuplicatesIncludeId","TrimDuplicatesIncludeId","EnableNicknames","EnableFQL","EnablePhonetic","BypassResultTypes","ProcessBestBets","EnableQueryRules","EnableSorting","GenerateBlockRankLog","rankingModelId","RankingModelId","startRow","StartRow","rowLimit","RowLimit","rowsPerPage","RowsPerPage","selectProperties","SelectProperties","culture","Culture","timeZoneId","TimeZoneId","refinementFilters","filters","RefinementFilters","refiners","Refiners","hiddenConstraints","constraints","HiddenConstraints","sortList","sorts","SortList","timeout","milliseconds","Timeout","hithighlightedProperties","HitHighlightedProperties","clientType","ClientType","personalizationData","PersonalizationData","resultsURL","ResultsUrl","queryTag","tags","QueryTag","Properties","ProcessPersonalFavorites","queryTemplatePropertiesUrl","QueryTemplatePropertiesUrl","reorderingRules","rules","ReorderingRules","hitHighlightedMultivaluePropertyLimit","limit","HitHighlightedMultivaluePropertyLimit","EnableOrderingHitHighlightedProperty","collapseSpecification","spec","CollapseSpecification","uiLanguage","lang","UILanguage","desiredSnippetLength","len","DesiredSnippetLength","maxSnippetLength","MaxSnippetLength","summaryLength","SummaryLength","toSearchQuery","Search","execute","formattedBody","fixupProp","HithighlightedProperties","SearchResults","prop","rawResponse","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","rawResults","tempResults_1","tempResult","cells","Cells","cell","configurable","enumerable","Value","writable","SearchBuiltInSourceId","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","SearchSuggest","mapQueryToQueryString","SearchSuggestResult","querytext","personalCount","preQuery","hitHighlighting","capitalize","stemming","includePeople","queryRules","prefixMatch","PeopleNames","suggest","PersonalResults","Queries","SPBatch","ParseResponse","statusText","responses","header","statusRegExp","lines","split","state","line","parts","Response","executeImpl","batchId","requests","client","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","set","batchOptions","ODataBatch","Features","feature","Feature","force","featdefScope","featureId","deactivate","DefinitionId","RelatedItemManagerImpl","FromUrl","getRelatedItems","sourceListName","sourceItemId","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","Webs","webPath","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","WebTemplate","Web","WebInfos","fromUrl","getParentWeb","_a","ParentWeb","Site","openWebById","getSubwebsFilteredForCurrentUser","nWebTemplateFilter","nConfigurationFilter","createBatch","getFolderByServerRelativeUrl","folderRelativeUrl","getFolderByServerRelativePath","getFileByServerRelativeUrl","fileRelativeUrl","getFileByServerRelativePath","getList","listRelativeUrl","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","ensureUser","logonName","availableWebTemplates","includeCrossLanugage","getCatalog","getUserById","mapToIcon","progId","getStorageEntity","setStorageEntity","comments","removeStorageEntity","getAppCatalog","getClientSideWebParts","addClientSidePage","libraryTitle","lists","getContextInfo","SupportedSchemaVersions","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","webId","UserProfileQuery","clientPeoplePickerQuery","ClientPeoplePickerQuery","profileLoader","ProfileLoader","amIFollowedBy","amIFollowing","getFollowedTags","maxCount","getFollowersFor","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","readBlobAsArrayBuffer","buffer","String","fromCharCode","Uint16Array","setSingleValueProfileProperty","accountName","propertyValue","setMultiValuedProfileProperty","propertyValues","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","clientPeoplePickerResolveUser","queryParams","clientPeoplePickerSearchUser","emailIDs","createClientPeoplePickerQueryParametersRequestBody","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","SocialQuery","MySocialQuery","getFollowedSitesUri","FollowedSitesUri","getFollowedDocumentsUri","FollowedDocumentsUri","follow","actorInfo","createSocialActorInfoRequestBody","isFollowed","stopFollowing","actor","followed","types","Followed","followedCount","FollowedCount","followers","Followers","suggestions","Suggestions","UtilityMethod","methodName","getBaseUrl","excute","params","Body","From","Subject","To","CC","BCC","AdditionalHeaders","getCurrentUserEmailAddresses","resolvePrincipal","input","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","SPRest","_baseUrl","setup","config","searchSuggest","finalQuery","fm","sp"],"mappings":"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","sourcesContent":["export function extractWebUrl(candidateUrl: string) {\n\n    if (candidateUrl === null) {\n        return \"\";\n    }\n\n    const index = candidateUrl.indexOf(\"_api/\");\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n","import { Logger } from \"@pnp/logging\";\n\nexport class SPBatchParseException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"BatchParseException\";\n        Logger.error(this);\n    }\n}\n\nexport class SPODataIdException extends Error {\n\n    constructor(public readonly data: any, msg = \"Could not extract odata id in object, you may be using nometadata. Object data logged to logger.\") {\n        super(msg);\n        this.name = \"ODataIdException\";\n        Logger.error(this);\n    }\n}\n\nexport class MaxCommentLengthException extends Error {\n\n    constructor(msg = \"The maximum comment length is 1023 characters.\") {\n        super(msg);\n        this.name = \"MaxCommentLengthException\";\n        Logger.error(this);\n    }\n}\n\nexport class NotSupportedInBatchException extends Error {\n\n    constructor(operation = \"This operation\") {\n        super(`${operation} is not supported as part of a batch.`);\n        this.name = \"NotSupportedInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport class APIUrlException extends Error {\n\n    constructor(msg = \"Unable to determine API url.\") {\n        super(msg);\n        this.name = \"APIUrlException\";\n        Logger.error(this);\n    }\n}\n\n","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { extend, combinePaths } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPODataIdException } from \"./exceptions\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\n\nexport function spExtractODataId(candidate: any): string {\n\n    if (candidate.hasOwnProperty(\"odata.id\")) {\n        return candidate[\"odata.id\"];\n    } else if (candidate.hasOwnProperty(\"__metadata\") && candidate.__metadata.hasOwnProperty(\"id\")) {\n        return candidate.__metadata.id;\n    } else {\n        throw new SPODataIdException(candidate);\n    }\n}\n\nclass SPODataEntityParserImpl<T, D> extends ODataParserBase<T & D> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D) => {\n        const o = <T>new this.factory(spGetEntityUrl(d), null);\n        return extend(o, d);\n    }\n\n    public parse(r: Response): Promise<T & D> {\n        return super.parse(r).then((d: any) => {\n            const o = <T>new this.factory(spGetEntityUrl(d), null);\n            return extend<T, D>(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParserBase<(T & D)[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D[]) => {\n        return d.map(v => {\n            const o = <T>new this.factory(spGetEntityUrl(v), null);\n            return extend(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<(T & D)[]> {\n        return super.parse(r).then((d: D[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(spGetEntityUrl(v), null);\n                return extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spGetEntityUrl(entity: any): string {\n\n    if (entity.hasOwnProperty(\"odata.metadata\") && entity.hasOwnProperty(\"odata.editLink\")) {\n        // we are dealign with minimal metadata (default)\n        return combinePaths(extractWebUrl(entity[\"odata.metadata\"]), \"_api\", entity[\"odata.editLink\"]);\n    } else if (entity.hasOwnProperty(\"odata.editLink\")) {\n        return entity[\"odata.editLink\"];\n    } else if (entity.hasOwnProperty(\"__metadata\")) {\n        // we are dealing with verbose, which has an absolute uri\n        return entity.__metadata.uri;\n    } else {\n        // we are likely dealing with nometadata, so don't error but we won't be able to\n        // chain off these objects\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n}\n\nexport function spODataEntity<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<T & DataType> {\n    return new SPODataEntityParserImpl<T, DataType>(factory);\n}\n\nexport function spODataEntityArray<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<(T & DataType)[]> {\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\n}\n","import {\n    LibraryConfiguration,\n    TypedHash,\n    RuntimeConfig,\n    HttpClientImpl,\n    FetchClient,\n} from \"@pnp/common\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== null && typeof spPart !== \"undefined\" && typeof spPart.headers !== \"undefined\") {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== null && typeof spPart.baseUrl !== \"undefined\") {\n            return spPart.baseUrl;\n        }\n\n        if (RuntimeConfig.spfxContext !== null) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        // use a configured factory firt\n        if (spPart !== null && typeof spPart.fetchClientFactory !== \"undefined\") {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n","import { SPHttpClient } from \"./sphttpclient\";\nimport { combinePaths, extend, Dictionary } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Dictionary<CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: SPHttpClient, private _digests: Dictionary<CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== null) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = combinePaths(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.add(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n\n","import { DigestCache } from \"./digestcache\";\nimport {\n    extend,\n    mergeHeaders,\n    FetchOptions,\n    RequestClient,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { APIUrlException } from \"../exceptions\";\n\nexport class SPHttpClient implements RequestClient  {\n\n    private _digestCache: DigestCache;\n    private _impl: HttpClientImpl;\n\n    constructor() {\n        this._impl = SPRuntimeConfig.fetchClientFactory();\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/$$Version$$\");\n        }\n\n        opts = extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                const index = url.indexOf(\"_api/\");\n                if (index < 0) {\n                    throw new APIUrlException();\n                }\n                const webUrl = url.substr(0, index);\n                return this._digestCache.getDigest(webUrl)\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\nimport { combinePaths, isUrlAbsolute } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(combinePaths(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (typeof global._spPageContextInfo !== \"undefined\") {\n\n            // operating in classic pages\n            if (global._spPageContextInfo.hasOwnProperty(\"webAbsoluteUrl\")) {\n                return resolve(combinePaths(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (global._spPageContextInfo.hasOwnProperty(\"webServerRelativeUrl\")) {\n                return resolve(combinePaths(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (typeof global.location !== \"undefined\") {\n            const baseUrl = global.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(combinePaths(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n","import {\n    combinePaths,\n    isUrlAbsolute,\n    Dictionary,\n    FetchOptions,\n    mergeOptions,\n    extend,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable<GetType = any> extends ODataQueryable<SPBatch, GetType> {\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            const urlStr = baseUrl as string;\n            if (isUrlAbsolute(urlStr) || urlStr.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = urlStr;\n                this._url = combinePaths(urlStr, path);\n            } else if (urlStr.lastIndexOf(\"/\") > urlStr.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = urlStr.lastIndexOf(\"/\");\n                this._parentUrl = urlStr.slice(0, index);\n                path = combinePaths(urlStr.slice(index), path);\n                this._url = combinePaths(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = urlStr.lastIndexOf(\"(\");\n                this._parentUrl = urlStr.slice(0, index);\n                this._url = combinePaths(urlStr, path);\n            }\n        } else {\n            const q = baseUrl as SharePointQueryable;\n            this.extend(q, path);\n            const target = q._query.get(\"@target\");\n            if (target !== null) {\n                this._query.add(\"@target\", target);\n            }\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new SharePointQueryable\n     */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Dictionary<string>();\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.add(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        // inlude our explicitly set query string params\n        aliasedParams.merge(this._query);\n\n        if (aliasedParams.count > 0) {\n            url += `?${aliasedParams.getKeys().map(key => `${key}=${aliasedParams.get(key)}`).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path);\n        parent.configure(this._options);\n\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            parent.query.add(\"@target\", target);\n        }\n        if (typeof batch !== \"undefined\") {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n        let clone = new factory(this, additionalPath);\n        clone.configure(this._options);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this.addBatchDependency() : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new SPHttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._useCaching,\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection<GetType = any[]> extends SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const query = this._query.getKeys().filter(k => k === \"$orderby\").map(k => this._query.get(k));\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this._query.add(\"$orderby\", query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n}\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance extends SharePointQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { extend, TypedHash } from \"@pnp/common\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n\n/**\n * Describes a collection of site groups\n *\n */\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteGroups class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this group collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"sitegroups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = JSON.stringify(extend(\n            { \"__metadata\": { \"type\": \"SP.Group\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Gets a group from the collection by id\n     *\n     * @param id The id of the group to retrieve\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    /**\n    * Updates this group instance with the supplied properties\n    *\n    * @param properties A GroupWriteableProperties object of property names and values to update for the group\n    */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<GroupUpdateResult> {\n\n        const postBody = extend({ \"__metadata\": { \"type\": \"SP.Group\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retGroup: SiteGroup = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                group: retGroup,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { extend, TypedHash } from \"@pnp/common\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteUsers class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"siteusers\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(\"(@v)\");\n        su.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: JSON.stringify({ \"__metadata\": { \"type\": \"SP.User\" }, LoginName: loginName }),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update(properties: TypedHash<any>): Promise<UserUpdateResult> {\n\n        const postBody = extend({ \"__metadata\": { \"type\": \"SP.User\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                user: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Represents the current user\n */\nexport class CurrentUser extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"currentuser\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\n/**\n * Specifies the type of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalType {\n    /**\n     * Enumeration whose value specifies no principal type.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies a user as the principal type.\n     */\n    User = 1,\n    /**\n     * Enumeration whose value specifies a distribution list as the principal type.\n     */\n    DistributionList = 2,\n    /**\n     * Enumeration whose value specifies a security group as the principal type.\n     */\n    SecurityGroup = 4,\n    /**\n     * Enumeration whose value specifies a group as the principal type.\n     */\n    SharePointGroup = 8,\n    /**\n     * Enumeration whose value specifies all principal types.\n     */\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\n}\n/* tslint:enable:no-bitwise */\n\n/**\n * Specifies the source of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalSource {\n    /**\n     * Enumeration whose value specifies no principal source.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies user information list as the principal source.\n     */\n    UserInfoList = 1,\n    /**\n     * Enumeration whose value specifies Active Directory as the principal source.\n     */\n    Windows = 2,\n    /**\n     * Enumeration whose value specifies the current membership provider as the principal source.\n     */\n    MembershipProvider = 4,\n    /**\n     * Enumeration whose value specifies the current role provider as the principal source.\n     */\n    RoleProvider = 8,\n    /**\n     * Enumeration whose value specifies all principal sources.\n     */\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\n}\n/* tslint:enable:no-bitwise */\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n\nexport interface RenderListDataParameters {\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    DatesInUtc?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    OverrideViewXml?: string;\n    Paging?: string;\n    RenderOptions?: RenderListDataOptions;\n    ReplaceGroup?: boolean;\n    ViewXml?: string;\n}\n\nexport interface MenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: MenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface MenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: MenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport enum FieldUserSelectionMode {\n    PeopleAndGroups = 1,\n    PeopleOnly = 0,\n}\n\nexport interface FieldCreationProperties extends TypedHash<string | number | boolean> {\n    DefaultFormula?: string;\n    Description?: string;\n    EnforceUniqueValues?: boolean;\n    FieldTypeKind?: number;\n    Group?: string;\n    Hidden?: boolean;\n    Indexed?: boolean;\n    Required?: boolean;\n    Title?: string;\n    ValidationFormula?: string;\n    ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n    Dropdown,\n    RadioButtons,\n}\n\n/**\n * Client people picker query parameters\n */\nexport interface ClientPeoplePickerQueryParameters {\n    /**\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\n     */\n    AllowEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether multiple entities are allowed.\n     */\n    AllowMultipleEntities?: boolean;\n    /**\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\n     */\n    AllowOnlyEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\n     */\n    AllUrlZones?: boolean;\n    /**\n     * Gets or sets a value that specifies claim providers that are used to perform search.\n     */\n    EnabledClaimProviders?: string;\n    /**\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\n     */\n    ForceClaims?: boolean;\n    /**\n     * Gets or sets a value that specifies limit of results returned.\n     */\n    MaximumEntitySuggestions: number;\n    /**\n     * Gets or sets a value that specifies principal sources to perform search.\n     */\n    PrincipalSource?: PrincipalSource;\n    /**\n     * Gets or sets a value that specifies principal types to search for.\n     */\n    PrincipalType?: PrincipalType;\n    /**\n     * Gets or sets a value that specifies additional query settings.\n     */\n    QuerySettings?: PeoplePickerQuerySettings;\n    /**\n     * Gets or sets a value that specifies the term to search for.\n     */\n    QueryString: string;\n    /**\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\n     */\n    SharePointGroupID?: number;\n    /**\n     * Gets or sets a value that specifies URL zones that are used to perform search.\n     */\n    UrlZone?: UrlZone;\n    /**\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\n     */\n    UrlZoneSpecified?: boolean;\n    /**\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\n     */\n    WebApplicationID?: string;\n}\n\n/**\n * People picker query settings\n */\nexport interface PeoplePickerQuerySettings {\n    ExcludeAllUsersOnTenantClaim?: boolean;\n}\n\n/**\n * People picker entity\n */\nexport interface PeoplePickerEntity {\n    Description: string;\n    DisplayText: string;\n    EntityData: PeoplePickerEntityData;\n    EntityType: string;\n    IsResolved: boolean;\n    Key: string;\n    MultipleMatches: PeoplePickerEntityData[];\n    ProviderDisplayName: string;\n    ProviderName: string;\n}\n\n/**\n * People picker entity data\n */\nexport interface PeoplePickerEntityData {\n    AccountName?: string;\n    Department?: string;\n    Email?: string;\n    IsAltSecIdPresent?: string;\n    MobilePhone?: string;\n    ObjectId?: string;\n    OtherMails?: string;\n    PrincipalType?: string;\n    SPGroupID?: string;\n    SPUserID?: string;\n    Title?: string;\n}\n\n/**\n * Specifies the originating zone of a request received.\n */\nexport const enum UrlZone {\n    /**\n     * Specifies the default zone used for requests unless another zone is specified.\n     */\n    DefaultZone,\n    /**\n     * Specifies an intranet zone.\n     */\n    Intranet,\n    /**\n     * Specifies an Internet zone.\n     */\n    Internet,\n    /**\n     * Specifies a custom zone.\n     */\n    Custom,\n    /**\n     * Specifies an extranet zone.\n     */\n    Extranet,\n}\n\nexport interface StorageEntity {\n    Value: string | null;\n    Comment: string | null;\n    Description: string | null;\n}\n\nexport interface LikeData {\n    name: string;\n    loginName: string;\n    id: number;\n    email: string;\n    creationDate: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { extend, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleAssignments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role assignments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roleassignments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Gets the role assignment associated with the specified principal id from the collection.\n     *\n     * @param id The id of the role assignment\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definitions collection\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the role definition with the specified id from the collection\n     *\n     * @param id The id of the role definition\n     *\n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = JSON.stringify({\n            BasePermissions: extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        if (typeof properties.hasOwnProperty(\"BasePermissions\") !== \"undefined\") {\n            properties[\"BasePermissions\"] = extend({ __metadata: { type: \"SP.BasePermissions\" } }, properties[\"BasePermissions\"]);\n        }\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.RoleDefinition\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (properties.hasOwnProperty(\"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\nexport class RoleDefinitionBindings extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitionBindings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definition bindings collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitionbindings\") {\n        super(baseUrl, path);\n    }\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\nimport { extend, getGUID } from \"@pnp/common\";\nimport { MaxCommentLengthException } from \"./exceptions\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { spGetEntityUrl } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    uploadId: string;\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Files class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"files\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760,\n    ): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\n        return adder.postCore()\n            .then(() => this.getByName(url))\n            .then(file => file.setContentChunked(content, progress, chunkSize));\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(file: Blob, progress?: (data: ChunkedFileUploadProgressData) => void, chunkSize = 10485760): Promise<FileAddResult> {\n\n        if (typeof progress === \"undefined\") {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = getGUID();\n\n        // start the chain with the first fragment\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n            chain = chain.then(pointer => {\n                progress({ uploadId, blockNumber: i, chunkSize, currentPointer: pointer, fileSize, stage: \"continue\", totalBlocks: blockCount });\n                return this.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n            progress({ uploadId, blockNumber: blockCount, chunkSize, currentPointer: pointer, fileSize, stage: \"finishing\", totalBlocks: blockCount });\n            return this.finishUpload(uploadId, pointer, file.slice(pointer));\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { StartUpload: \"10485760\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).StartUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { ContinueUpload: \"20971520\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).ContinueUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    protected finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<{ ServerRelativeUrl: string }>({ body: fragment })\n            .then(response => {\n                return {\n                    data: response,\n                    file: new File(response.ServerRelativeUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public recycleByID(versionId: number): Promise<void> {\n        return this.clone(Versions, `recycleByID(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public recycleByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `recycleByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel='${label}')`).postCore();\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n","import { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.add(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get<any>().then(r => {\n            // handle verbose mode\n            return r.hasOwnProperty(\"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableInstance(\"_api/web\", \"currentuser\");\n        return w.select(\"LoginName\").get<{ LoginName: string }>().then(user => {\n\n            return this.getUserEffectivePermissions(user.LoginName);\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n","import { extend, combinePaths } from \"@pnp/common\";\nimport { spGetEntityUrl } from \"./odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postCore<ShareLinkResponse>({\n            body: JSON.stringify({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = JSON.stringify(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw new Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (typeof emailData !== \"undefined\") {\n\n                postBody = extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: typeof emailData.subject !== \"undefined\" ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postCore<SharingResult>({\n                body: JSON.stringify(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = JSON.stringify(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (typeof options.emailData !== \"undefined\" && options.emailData !== null) {\n\n                postBody = extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: typeof options.emailData.subject !== \"undefined\" ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>({\n            body: JSON.stringify({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postCore<SharingEntityPermission[]>({\n            body: JSON.stringify({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, \"getSharingInformation\").postCore<SharingInformation>({\n            body: JSON.stringify({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postCore<ObjectSharingSettings>({\n            body: JSON.stringify({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: JSON.stringify({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: JSON.stringify({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (typeof group !== \"undefined\" && group !== null) {\n\n\n\n            switch (group) {\n                case RoleType.Contributor:\n                    // remove need to reference Web here, which created a circular build issue\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\n                    return memberGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    // remove need to reference Web here, which created a circular build issue\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\n                    return visitorGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw new Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            // remove need to reference Web here, which created a circular build issue\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).get<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw new Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<SharePointQueryableInstance> {\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: JSON.stringify(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n        // remove need to reference Web here, which created a circular build issue\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n        return web.get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(combinePaths(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.editlink\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(spGetEntityUrl(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: JSON.stringify({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: JSON.stringify({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\nexport class WebPart extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the WebPart class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     * @param path Optional, if supplied will be appended to the supplied baseUrl\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"webpart\") {\n        super(baseUrl, path);\n    }\n}\n","import { extend, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { spGetEntityUrl } from \"./odata\";\nimport { Item } from \"./items\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Folders class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"folders\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((response) => {\n            return {\n                data: response,\n                folder: this.getByName(url),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update(properties: TypedHash<string | number | boolean>): Promise<FolderUpdateResult> {\n        const postBody: string = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.Folder\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                folder: this,\n            };\n        });\n    }\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n","import { extend, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of content types\n *\n */\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentTypes class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content types collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"contenttypes\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a ContentType by content type id\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = JSON.stringify({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n            \"__metadata\": { \"type\": \"SP.ContentType\" },\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\nexport class FieldLinks extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentType class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content type instance\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fieldlinks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a FieldLink by GUID id\n     *\n     * @param id The GUID id of the field link\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the AttachmentFiles class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this attachments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"AttachmentFiles\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @files name The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @files name The collection of files to delete\n     */\n    public deleteMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).delete()), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n        return this.clone(AttachmentFile, \"$value\", false).get(parser);\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { extend, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes the views available in the current context\n *\n */\nexport class Views extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Views class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"views\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a view by guid id\n     *\n     * @param id The GUID id of the view\n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"PersonalView\": personalView,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, additionalSettings));\n\n        return this.clone(Views, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update(properties: TypedHash<any>): Promise<ViewUpdateResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                view: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n}\n\nexport class ViewFields extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"viewfields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: JSON.stringify({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { extend, TypedHash } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n    FieldUserSelectionMode,\n    FieldCreationProperties,\n    ChoiceFieldFormatType,\n} from \"./types\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param title The Id of the list\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = JSON.stringify({\n            \"parameters\":\n                extend({\n                    \"__metadata\":\n                        {\n                            \"type\": \"SP.XmlSchemaFieldCreationInformation\",\n                        },\n                }, info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new field to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: FieldCreationProperties & { FieldTypeKind: number }): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify(extend({\n            \"Title\": title,\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.clone(Fields, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n                DateFormat: dateFormat,\n                FieldTypeKind: 17,\n                Formula: formula,\n                OutputType: outputType,\n            };\n\n        return this.add(title, \"SP.FieldCalculated\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat = 0,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DateTimeCalendarType: calendarType,\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 4,\n            FriendlyDisplayFormat: friendlyDisplayFormat,\n        };\n\n        return this.add(title, \"SP.FieldDateTime\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (typeof minValue !== \"undefined\") {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (typeof minValue !== \"undefined\") {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            AllowHyperlink: allowHyperlink,\n            AppendOnly: appendOnly,\n            FieldTypeKind: 3,\n            NumberOfLines: numberOfLines,\n            RestrictedMode: restrictedMode,\n            RichText: richText,\n        };\n\n        return this.add(title, \"SP.FieldMultiLineText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", extend(props, properties));\n    }\n\n    /** Adds a user field to the colleciton\n    * \n    * @param title The new field's title\n    * @param selectionMode The selection mode of the field\n    * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n    * @param properties\n    */\n    public addUser(title: string,\n        selectionMode: FieldUserSelectionMode,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 20,\n            SelectionMode: selectionMode,\n        };\n\n        return this.add(title, \"SP.FieldUser\", extend(props, properties));\n    }\n\n    /**\n     * Adds a SP.FieldLookup to the collection\n     *\n     * @param title The new field's title\n     * @param lookupListId The guid id of the list where the source of the lookup is found\n     * @param lookupFieldName The internal name of the field in the source list\n     * @param properties Set of additional properties to set on the new field\n     */\n    public addLookup(\n        title: string,\n        lookupListId: string,\n        lookupFieldName: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify({\n            parameters: extend({\n                FieldTypeKind: 7,\n                LookupFieldName: lookupFieldName,\n                LookupListId: lookupListId,\n                Title: title,\n                \"__metadata\": { \"type\": \"SP.FieldCreationInformation\" },\n            }, properties),\n        });\n\n        return this.clone(Fields, \"addfield\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param format The display format of the available options for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addChoice(\n        title: string,\n        choices: string[],\n        format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            EditFormat: format,\n            FieldTypeKind: 6,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addMultiChoice(\n        title: string,\n        choices: string[],\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            FieldTypeKind: 15,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldMultiChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldBoolean to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addBoolean(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 8,\n        };\n\n        return this.add(title, \"SP.Field\", extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = JSON.stringify(extend({\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Forms extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"forms\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a form by id\n     *\n     * @param id The guid id of the item to retrieve\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Subscriptions class\n     *\n     * @param baseUrl - The url or SharePointQueryable which forms the parent of this webhook subscriptions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"subscriptions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const subscription = new Subscription(this);\n        subscription.concat(`('${subscriptionId}')`);\n        return subscription;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (defaults to pnp-js-core-subscription when omitted)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody = JSON.stringify({\n            \"clientState\": clientState || \"pnp-js-core-subscription\",\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        });\n\n        return this.postCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     */\n    public update(expirationDate: string): Promise<SubscriptionUpdateResult> {\n\n        const postBody = JSON.stringify({\n            \"expirationDateTime\": expirationDate,\n        });\n\n        return this.patchCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n            return { data: data, subscription: this };\n        });\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { extend, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the UserCustomActions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user custom actions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"usercustomactions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns the user custom action with the specified id\n     *\n     * @param id The GUID id of the user custom action to retrieve\n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionAddResult> {\n\n        const postBody = JSON.stringify(extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionUpdateResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.UserCustomAction\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                action: this,\n                data: data,\n            };\n        });\n    }\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { extend, TypedHash } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { NotSupportedInBatchException } from \"./exceptions\";\nimport { Folder } from \"./folders\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"lists\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: JSON.stringify(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw new NotSupportedInBatchException(\"The ensure list method\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n}\n\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): View {\n        return new View(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: JSON.stringify({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: JSON.stringify({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: JSON.stringify({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (data.hasOwnProperty(\"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.add(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"RenderListData\")) {\n                return data.RenderListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     * \n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null): Promise<any> {\n\n        const postBody = {\n            overrideParameters: extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataOverrideParameters\" },\n            }, overrideParameters),\n            parameters: extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataParameters\" },\n            }, parameters),\n        };\n\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\n            body: JSON.stringify(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"ListData\")) {\n                return data.ListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (data.hasOwnProperty(\"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n","import { SharePointQueryableCollection, SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { extend } from \"@pnp/common\";\nimport { spExtractODataId } from \"..\";\n\nexport interface CommentAuthorData {\n    email: string;\n    id: number;\n    isActive: boolean;\n    isExternal: boolean;\n    jobTitle: string | null;\n    loginName: string;\n    name: string;\n    principalType: number;\n    userId: any | null;\n}\n\nexport interface CommentData {\n    author: CommentAuthorData;\n    createdDate: string;\n    id: string;\n    isLikedByUser: boolean;\n    isReply: boolean;\n    itemId: number;\n    likeCount: number;\n    listId: string;\n    mentions: any | null;\n    parentId: string;\n    replyCount: number;\n    text: string;\n}\n\nexport interface Identity {\n    loginName: string;\n    email: string;\n    name: string;\n}\n\nexport interface CommentInfo {\n    text: string;\n    mentions?: Identity[];\n}\n\n/**\n * Represents a Collection of comments\n */\nexport class Comments extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Creates a new instance of the Comments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"comments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a comment by id\n     * \n     * @param id Id of the comment to load\n     */\n    public getById(id: string | number): Comment {\n        const c = new Comment(this);\n        c.concat(`(${id})`);\n        return c;\n    }\n\n    /**\n     * Adds a new comment to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"Microsoft.SharePoint.Comments.comment\" },\n        }, info));\n\n\n        return this.clone(Comments, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(this.getById(d.id), d);\n        });\n    }\n\n    /**\n     * Deletes all the comments in this collection\n     */\n    public clear(): Promise<boolean> {\n        return this.clone(Comments, \"DeleteAll\").postCore<boolean>();\n    }\n}\n\n/**\n * Represents a comment\n */\nexport class Comment extends SharePointQueryableInstance {\n\n    public get replies(): Replies {\n        return new Replies(this);\n    }\n\n    /**\n     * Likes the comment as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Comment, \"Like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes the comment as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Comment, \"Unlike\").postCore<void>();\n    }\n\n    /**\n     * Deletes this comment\n     */\n    public delete(): Promise<void> {\n        return this.clone(Comment, \"DeleteComment\").postCore<void>();\n    }\n}\n\n/**\n * Represents a Collection of comments\n */\nexport class Replies extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Creates a new instance of the Comments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"replies\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new reply to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"Microsoft.SharePoint.Comments.comment\" },\n        }, info));\n\n        return this.clone(Replies, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(new Comment(spExtractODataId(d)), d);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { extend, TypedHash } from \"@pnp/common\";\nimport { ListItemFormUpdateValue, LikeData } from \"./types\";\nimport { ODataParserBase } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Comments } from \"./comments\";\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class Items extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Items class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"items\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Item by id\n     *\n     * @param id The integer id of the item to retrieve\n     */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): Item {\n        // creates an item with the parent list path and append out method call\n        return new Item(this.parentUrl, `getItemByStringId('${stringId}')`);\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged(): Promise<PagedItemCollection<any>> {\n        return this.get(new PagedItemCollectionParser(this));\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     */\n    public getAll(requestSize = 2000): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = new Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": \"application/json;odata=nometadata\",\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.getKeys()\n            .filter(k => /^\\$select$|^\\$filter$|^\\$top$|^\\$expand$/.test(k.toLowerCase()))\n            .reduce((i, k) => {\n                i.query.add(k, this.query.get(k));\n                return i;\n            }, items);\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = JSON.stringify(extend({\n                \"__metadata\": { \"type\": listItemEntityType },\n            }, properties));\n\n            const promise = this.clone(Items, null).postCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the collection of comments associated with this list item\n     */\n    public get comments(): Comments {\n        return new Comments(this);\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): ItemVersions {\n        return new ItemVersions(this);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = JSON.stringify(extend({\n                    \"__metadata\": { \"type\": listItemEntityType },\n                }, properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Gets the collection of people who have liked this item\n     */\n    public getLikedBy(): Promise<LikeData[]> {\n        return this.clone(Item, \"likedBy\").postCore<LikeData[]>();\n    }\n\n    /**\n     * Likes this item as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Item, \"like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes this item as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Item, \"unlike\").postCore<void>();\n    }\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i._query.add(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (data.hasOwnProperty(\"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: JSON.stringify({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\"))).getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class ItemVersions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): ItemVersion {\n        const v = new ItemVersion(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class ItemVersion extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private parent: Items, private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<any>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null).configureFrom(this.parent);\n            return items.getPaged();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser extends ODataParserBase<PagedItemCollection<any>> {\n\n    constructor(private _parent: Items) {\n        super();\n    }\n\n    public parse(r: Response): Promise<PagedItemCollection<any>> {\n\n        return new Promise<PagedItemCollection<any>>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = json.hasOwnProperty(\"d\") && json.d.hasOwnProperty(\"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection(this._parent, nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public parse(r: Response): Promise<ItemUpdateResultData> {\n\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Represents an app catalog\n */\nexport class AppCatalog extends SharePointQueryableCollection {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n\n        // we need to handle the case of getting created from something that already has \"_api/...\" or does not\n        let candidateUrl = \"\";\n\n        if (typeof baseUrl === \"string\") {\n            candidateUrl = baseUrl;\n        } else if (typeof baseUrl !== \"undefined\") {\n            candidateUrl = (baseUrl as SharePointQueryable).toUrl();\n        }\n\n        super(extractWebUrl(candidateUrl), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): App {\n        return new App(this, `getById('${id}')`);\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<AppAddResult>\n     */\n    public add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<AppAddResult> {\n\n        // you don't add to the availableapps collection\n        const adder = new AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`);\n\n        return adder.postCore({\n            body: content,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n}\n\n/**\n * Represents the actions you can preform on a given app within the catalog\n */\nexport class App extends SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public deploy(): Promise<void> {\n        return this.clone(App, \"Deploy\").postCore();\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public retract(): Promise<void> {\n        return this.clone(App, \"Retract\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    public install(): Promise<void> {\n        return this.clone(App, \"Install\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be uninstalled on a web\n     */\n    public uninstall(): Promise<void> {\n        return this.clone(App, \"Uninstall\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be upgraded on a web\n     */\n    public upgrade(): Promise<void> {\n        return this.clone(App, \"Upgrade\").postCore();\n    }\n\n    /**\n     * This method removes an app from the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public remove(): Promise<void> {\n        return this.clone(App, \"Remove\").postCore();\n    }\n}\n\nexport interface AppAddResult {\n    data: any;\n    file: File;\n}\n","import { List } from \"./lists\";\nimport { TemplateFileType, FileAddResult, File } from \"./files\";\nimport { Item, ItemUpdateResult } from \"./items\";\nimport { TypedHash, extend, combinePaths, getGUID } from \"@pnp/common\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientSidePageLayoutType = \"Article\" | \"Home\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactorType = 0 | 2 | 4 | 6 | 8 | 12;\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nfunction getNextOrder(collection: { order: number }[]): number {\n\n    if (collection.length < 1) {\n        return 1;\n    }\n\n    return Math.max.apply(null, collection.map(i => i.order)) + 1;\n}\n\n/**\n * After https://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr/274094#274094\n * \n * @param this Types the called context this to a string in which the search will be conducted\n * @param regex A regex or string to match\n * @param startpos A starting position from which the search will begin\n */\nfunction regexIndexOf(this: string, regex: RegExp | string, startpos = 0) {\n    const indexOf = this.substring(startpos).search(regex);\n    return (indexOf >= 0) ? (indexOf + (startpos)) : indexOf;\n}\n\n/**\n * Gets an attribute value from an html string block\n * \n * @param html HTML to search\n * @param attrName The name of the attribute to find\n */\nfunction getAttrValueFromString(html: string, attrName: string): string {\n    const reg = new RegExp(`${attrName}=\"([^\"]*?)\"`, \"i\");\n    const match = reg.exec(html);\n    return match.length > 0 ? match[1] : null;\n}\n\n/**\n * Finds bounded blocks of markup bounded by divs, ensuring to match the ending div even with nested divs in the interstitial markup\n * \n * @param html HTML to search\n * @param boundaryStartPattern The starting pattern to find, typically a div with attribute\n * @param collector A func to take the found block and provide a way to form it into a useful return that is added into the return array\n */\nfunction getBoundedDivMarkup<T>(html: string, boundaryStartPattern: RegExp | string, collector: (s: string) => T): T[] {\n\n    const blocks: T[] = [];\n\n    if (typeof html === \"undefined\" || html === null) {\n        return blocks;\n    }\n\n    // remove some extra whitespace if present\n    const cleanedHtml = html.replace(/[\\t\\r\\n]/g, \"\");\n\n    // find the first div\n    let startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern);\n\n    if (startIndex < 0) {\n        // we found no blocks in the supplied html\n        return blocks;\n    }\n\n    // this loop finds each of the blocks\n    while (startIndex > -1) {\n\n        // we have one open div counting from the one found above using boundaryStartPattern so we need to ensure we find it's close\n        let openCounter = 1;\n        let searchIndex = startIndex + 1;\n        let nextDivOpen = -1;\n        let nextCloseDiv = -1;\n\n        // this loop finds the </div> tag that matches the opening of the control\n        while (true) {\n\n            // find both the next opening and closing div tags from our current searching index\n            nextDivOpen = regexIndexOf.call(cleanedHtml, /<div[^>]*>/i, searchIndex);\n            nextCloseDiv = regexIndexOf.call(cleanedHtml, /<\\/div>/i, searchIndex);\n\n            if (nextDivOpen < 0) {\n                // we have no more opening divs, just set this to simplify checks below\n                nextDivOpen = cleanedHtml.length + 1;\n            }\n\n            // determine which we found first, then increment or decrement our counter\n            // and set the location to begin searching again\n            if (nextDivOpen < nextCloseDiv) {\n                openCounter++;\n                searchIndex = nextDivOpen + 1;\n            } else if (nextCloseDiv < nextDivOpen) {\n                openCounter--;\n                searchIndex = nextCloseDiv + 1;\n            }\n\n            // once we have no open divs back to the level of the opening control div\n            // meaning we have all of the markup we intended to find\n            if (openCounter === 0) {\n\n                // get the bounded markup, +6 is the size of the ending </div> tag\n                const markup = cleanedHtml.substring(startIndex, nextCloseDiv + 6).trim();\n\n                // save the control data we found to the array\n                blocks.push(collector(markup));\n\n                // get out of our while loop\n                break;\n            }\n\n            if (openCounter > 1000 || openCounter < 0) {\n                // this is an arbitrary cut-off but likely we will not have 1000 nested divs\n                // something has gone wrong above and we are probably stuck in our while loop\n                // let's get out of our while loop and not hang everything\n                throw new Error(\"getBoundedDivMarkup exceeded depth parameters.\");\n            }\n        }\n\n        // get the start of the next control\n        startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern, nextCloseDiv);\n    }\n\n    return blocks;\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nfunction reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (collection[i].hasOwnProperty(\"columns\")) {\n            reindex(collection[i].columns);\n        } else if (collection[i].hasOwnProperty(\"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n\n/**\n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class ClientSidePage extends File {\n\n    /**\n     * Creates a new instance of the ClientSidePage class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     * @param commentsDisabled Indicates if comments are disabled, not valid until load is called\n     */\n    constructor(file: File, public sections: CanvasSection[] = [], public commentsDisabled = false) {\n        super(file);\n    }\n\n    /**\n     * Creates a new blank page within the supplied library\n     * \n     * @param library The library in which to create the page\n     * @param pageName Filename of the page, such as \"page.aspx\"\n     * @param title The display title of the page\n     * @param pageLayoutType Layout type of the page to use\n     */\n    public static create(library: List, pageName: string, title: string, pageLayoutType: ClientSidePageLayoutType = \"Article\"): Promise<ClientSidePage> {\n\n        // see if file exists, if not create it\n        return library.rootFolder.files.select(\"Name\").filter(`Name eq '${pageName}'`).get().then((fs: any[]) => {\n\n            if (fs.length > 0) {\n                throw new Error(`A file with the name '${pageName}' already exists in the library '${library.toUrl()}'.`);\n            }\n\n            // get our server relative path\n            return library.rootFolder.select(\"ServerRelativePath\").get().then(path => {\n\n                const pageServerRelPath = combinePaths(\"/\", path.ServerRelativePath.DecodedUrl, pageName);\n\n                // add the template file\n                return library.rootFolder.files.addTemplateFile(pageServerRelPath, TemplateFileType.ClientSidePage).then((far: FileAddResult) => {\n\n                    // get the item associated with the file\n                    return far.file.getItem().then((i: Item) => {\n\n                        // update the item to have the correct values to create the client side page\n                        return i.update({\n                            BannerImageUrl: {\n                                Url: \"/_layouts/15/images/sitepagethumbnail.png\",\n                            },\n                            CanvasContent1: \"\",\n                            ClientSideApplicationId: \"b6917cb1-93a0-4b97-a84d-7cf49975d4ec\",\n                            ContentTypeId: \"0x0101009D1CB255DA76424F860D91F20E6C4118\",\n                            PageLayoutType: pageLayoutType,\n                            PromotedState: PromotedState.NotPromoted,\n                            Title: title,\n                        }).then((iar: ItemUpdateResult) => new ClientSidePage(iar.item.file, (<any>iar.item).CommentsDisabled));\n                    });\n                });\n            });\n        });\n    }\n\n    /**\n     * Creates a new ClientSidePage instance from the provided html content string\n     * \n     * @param html HTML markup representing the page\n     */\n    public static fromFile(file: File): Promise<ClientSidePage> {\n        const page = new ClientSidePage(file);\n        return page.load().then(_ => page);\n    }\n\n    /**\n     * Converts a json object to an escaped string appropriate for use in attributes when storing client-side controls\n     * \n     * @param json The json object to encode into a string\n     */\n    public static jsonToEscapedString(json: any): string {\n\n        return JSON.stringify(json)\n            .replace(/\"/g, \"&quot;\")\n            .replace(/:/g, \"&#58;\")\n            .replace(/{/g, \"&#123;\")\n            .replace(/}/g, \"&#125;\");\n    }\n\n    /**\n     * Converts an escaped string from a client-side control attribute to a json object\n     * \n     * @param escapedString \n     */\n    public static escapedStringToJson<T = any>(escapedString: string): T {\n\n        return JSON.parse(escapedString\n            .replace(/&quot;/g, `\"`)\n            .replace(/&#58;/g, \":\")\n            .replace(/&#123;/g, \"{\")\n            .replace(/&#125;/g, \"}\"));\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n\n        const section = new CanvasSection(this, getNextOrder(this.sections));\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Converts this page's content to html markup\n     */\n    public toHtml(): string {\n\n        // trigger reindex of the entire tree\n        reindex(this.sections);\n\n        const html: string[] = [];\n\n        html.push(\"<div>\");\n\n        for (let i = 0; i < this.sections.length; i++) {\n            html.push(this.sections[i].toHtml());\n        }\n\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    /**\n     * Loads this page instance's content from the supplied html\n     * \n     * @param html html string representing the page's content\n     */\n    public fromHtml(html: string): this {\n\n        // reset sections\n        this.sections = [];\n\n        // gather our controls from the supplied html\n        getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-canvascontrol[^>]*?>/i, markup => {\n\n            // get the control type\n            const ct = /controlType&quot;&#58;(\\d*?),/i.exec(markup);\n\n            // if no control type is present this is a column which we give type 0 to let us process it\n            const controlType = ct == null || ct.length < 2 ? 0 : parseInt(ct[1], 10);\n\n            let control: CanvasControl = null;\n\n            switch (controlType) {\n                case 0:\n                    // empty canvas column\n                    control = new CanvasColumn(null, 0);\n                    control.fromHtml(markup);\n                    this.mergeColumnToTree(<CanvasColumn>control);\n                    break;\n                case 3:\n                    // client side webpart\n                    control = new ClientSideWebpart(\"\");\n                    control.fromHtml(markup);\n                    this.mergePartToTree(<ClientSidePart>control);\n                    break;\n                case 4:\n                    // client side text\n                    control = new ClientSideText();\n                    control.fromHtml(markup);\n                    this.mergePartToTree(<ClientSidePart>control);\n                    break;\n            }\n        });\n\n        // refresh all the orders within the tree\n        reindex(this.sections);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    public load(): Promise<void> {\n        return this.getItem<{ CanvasContent1: string, CommentsDisabled: boolean }>(\"CanvasContent1\", \"CommentsDisabled\").then(item => {\n            this.fromHtml(item.CanvasContent1);\n            this.commentsDisabled = item.CommentsDisabled;\n        });\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls)\n     */\n    public save(): Promise<ItemUpdateResult> {\n        return this.updateProperties({ CanvasContent1: this.toHtml() });\n    }\n\n    /**\n     * Enables comments on this page\n     */\n    public enableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(true).then(r => {\n            this.commentsDisabled = false;\n            return r;\n        });\n    }\n\n    /**\n     * Disables comments on this page\n     */\n    public disableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(false).then(r => {\n            this.commentsDisabled = true;\n            return r;\n        });\n    }\n\n    /**\n     * Finds a control by the specified instance id\n     * \n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends ClientSidePart = ClientSidePart>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     * \n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends ClientSidePart = ClientSidePart>(predicate: (c: ClientSidePart) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Sets the comments flag for a page\n     * \n     * @param on If true comments are enabled, false they are disabled\n     */\n    private setCommentsOn(on: boolean): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => {\n            const updater = new Item(i, `SetCommentsDisabled(${!on})`);\n            return updater.update({});\n        });\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergePartToTree(control: ClientSidePart): void {\n\n        let section: CanvasSection = null;\n        let column: CanvasColumn = null;\n\n        const sections = this.sections.filter(s => s.order === control.controlData.position.zoneIndex);\n        if (sections.length < 1) {\n            section = new CanvasSection(this, control.controlData.position.zoneIndex);\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        const columns = section.columns.filter(c => c.order === control.controlData.position.sectionIndex);\n        if (columns.length < 1) {\n            column = new CanvasColumn(section, control.controlData.position.sectionIndex, control.controlData.position.sectionFactor);\n            section.columns.push(column);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === column.controlData.position.zoneIndex);\n\n        if (sections.length < 1) {\n            section = new CanvasSection(this, column.controlData.position.zoneIndex);\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    /**\n     * Updates the properties of the underlying ListItem associated with this ClientSidePage\n     * \n     * @param properties Set of properties to update\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    private updateProperties(properties: TypedHash<any>, eTag = \"*\"): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => i.update(properties, eTag));\n    }\n}\n\nexport class CanvasSection {\n\n    /**\n     * Used to track this object inside the collection at runtime\n     */\n    private _memId: string;\n\n    constructor(public page: ClientSidePage, public order: number, public columns: CanvasColumn[] = []) {\n        this._memId = getGUID();\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactorType): CanvasColumn {\n\n        const column = new CanvasColumn(this, getNextOrder(this.columns), factor);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     * \n     * @param control Control to add to the default column\n     */\n    public addControl(control: ClientSidePart): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public toHtml(): string {\n\n        const html = [];\n\n        for (let i = 0; i < this.columns.length; i++) {\n            html.push(this.columns[i].toHtml());\n        }\n\n        return html.join(\"\");\n    }\n\n    /**\n     * Removes this section and all contained columns and controls from the collection\n     */\n    public remove(): void {\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\n        reindex(this.page.sections);\n    }\n}\n\nexport abstract class CanvasControl {\n\n    constructor(\n        protected controlType: number,\n        public dataVersion: string,\n        public column: CanvasColumn = null,\n        public order = 1,\n        public id: string = getGUID(),\n        public controlData: ClientSideControlData = null) { }\n\n    /**\n     * Value of the control's \"data-sp-controldata\" attribute\n     */\n    public get jsonData(): string {\n        return ClientSidePage.jsonToEscapedString(this.getControlData());\n    }\n\n    public abstract toHtml(index: number): string;\n\n    public fromHtml(html: string): void {\n        this.controlData = ClientSidePage.escapedStringToJson<ClientSideControlData>(getAttrValueFromString(html, \"data-sp-controldata\"));\n        this.dataVersion = getAttrValueFromString(html, \"data-sp-canvasdataversion\");\n        this.controlType = this.controlData.controlType;\n        this.id = this.controlData.id;\n    }\n\n    protected abstract getControlData(): ClientSideControlData;\n}\n\nexport class CanvasColumn extends CanvasControl {\n\n    constructor(\n        public section: CanvasSection,\n        public order: number,\n        public factor: CanvasColumnFactorType = 12,\n        public controls: ClientSidePart[] = [],\n        dataVersion = \"1.0\") {\n        super(0, dataVersion);\n    }\n\n    public addControl(control: ClientSidePart): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends ClientSidePart>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public toHtml(): string {\n        const html = [];\n\n        if (this.controls.length < 1) {\n\n            html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\"></div>`);\n\n        } else {\n\n            for (let i = 0; i < this.controls.length; i++) {\n                html.push(this.controls[i].toHtml(i + 1));\n            }\n        }\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n        super.fromHtml(html);\n\n        this.controlData = ClientSidePage.escapedStringToJson<ClientSideControlData>(getAttrValueFromString(html, \"data-sp-controldata\"));\n        this.factor = this.controlData.position.sectionFactor;\n        this.order = this.controlData.position.sectionIndex;\n    }\n\n    public getControlData(): ClientSideControlData {\n        return {\n            displayMode: 2,\n            position: {\n                sectionFactor: this.factor,\n                sectionIndex: this.order,\n                zoneIndex: this.section.order,\n            },\n        };\n    }\n\n    /**\n     * Removes this column and all contained controls from the collection\n     */\n    public remove(): void {\n        this.section.columns = this.section.columns.filter(column => column.id !== this.id);\n        reindex(this.column.controls);\n    }\n}\n\n/**\n * Abstract class with shared functionality for parts\n */\nexport abstract class ClientSidePart extends CanvasControl {\n\n    /**\n     * Removes this column and all contained controls from the collection\n     */\n    public remove(): void {\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\n        reindex(this.column.controls);\n    }\n}\n\nexport class ClientSideText extends ClientSidePart {\n\n    private _text: string;\n\n    constructor(text = \"\") {\n        super(4, \"1.0\");\n\n        this.text = text;\n    }\n\n    /**\n     * The text markup of this control\n     */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n\n        if (!text.startsWith(\"<p>\")) {\n            text = `<p>${text}</p>`;\n        }\n\n        this._text = text;\n    }\n\n    public getControlData(): ClientSideControlData {\n\n        return {\n            controlType: this.controlType,\n            editorType: \"CKEditor\",\n            id: this.id,\n            position: {\n                controlIndex: this.order,\n                sectionFactor: this.column.factor,\n                sectionIndex: this.column.order,\n                zoneIndex: this.column.section.order,\n            },\n        };\n    }\n\n    public toHtml(index: number): string {\n\n        // set our order to the value passed in\n        this.order = index;\n\n        const html: string[] = [];\n\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\n        html.push(\"<div data-sp-rte=\\\"\\\">\");\n        html.push(`${this.text}`);\n        html.push(\"</div>\");\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n\n        super.fromHtml(html);\n\n        const match = /<div[^>]*data-sp-rte[^>]*>(.*?)<\\/div>$/i.exec(html);\n\n        this.text = match.length > 1 ? match[1] : \"\";\n    }\n}\n\nexport class ClientSideWebpart extends ClientSidePart {\n\n    constructor(public title: string,\n        public description = \"\",\n        public propertieJson: TypedHash<any> = {},\n        public webPartId = \"\",\n        protected htmlProperties = \"\",\n        protected serverProcessedContent: ServerProcessedContent = null,\n        protected canvasDataVersion = \"1.0\") {\n        super(3, \"1.0\");\n    }\n\n    public static fromComponentDef(definition: ClientSidePageComponent): ClientSideWebpart {\n        const part = new ClientSideWebpart(\"\");\n        part.import(definition);\n        return part;\n    }\n\n    public import(component: ClientSidePageComponent): void {\n        this.webPartId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\n        const manifest: ClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        this.title = manifest.preconfiguredEntries[0].title.default;\n        this.description = manifest.preconfiguredEntries[0].description.default;\n        this.dataVersion = \"\";\n        this.propertieJson = this.parseJsonProperties(manifest.preconfiguredEntries[0].properties);\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.propertieJson = extend(this.propertieJson, properties);\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.propertieJson;\n    }\n\n    public toHtml(index: number): string {\n\n        // set our order to the value passed in\n        this.order = index;\n\n        // will form the value of the data-sp-webpartdata attribute\n        const data = {\n            dataVersion: this.dataVersion,\n            description: this.description,\n            id: this.webPartId,\n            instanceId: this.id,\n            properties: this.propertieJson,\n            title: this.title,\n        };\n\n        const html: string[] = [];\n\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.canvasDataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\n\n        html.push(`<div data-sp-webpart=\"\" data-sp-webpartdataversion=\"${this.dataVersion}\" data-sp-webpartdata=\"${ClientSidePage.jsonToEscapedString(data)}\">`);\n\n        html.push(`<div data-sp-componentid>`);\n        html.push(this.webPartId);\n        html.push(\"</div>\");\n\n        html.push(`<div data-sp-htmlproperties=\"\">`);\n        html.push(this.renderHtmlProperties());\n        html.push(\"</div>\");\n\n        html.push(\"</div>\");\n        html.push(\"</div>\");\n\n        return html.join(\"\");\n    }\n\n    public fromHtml(html: string): void {\n\n        super.fromHtml(html);\n\n        const webPartData = ClientSidePage.escapedStringToJson<ClientSideWebpartData>(getAttrValueFromString(html, \"data-sp-webpartdata\"));\n\n        this.title = webPartData.title;\n        this.description = webPartData.description;\n        this.webPartId = webPartData.id;\n        this.canvasDataVersion = getAttrValueFromString(html, \"data-sp-canvasdataversion\");\n        this.dataVersion = getAttrValueFromString(html, \"data-sp-webpartdataversion\");\n        this.setProperties(webPartData.properties);\n\n        if (typeof webPartData.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = webPartData.serverProcessedContent;\n        }\n\n        // get our html properties\n        const htmlProps = getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, markup => {\n            return markup.replace(/^<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, \"\").replace(/<\\/div>$/i, \"\");\n        });\n\n        this.htmlProperties = htmlProps.length > 0 ? htmlProps[0] : \"\";\n    }\n\n    public getControlData(): ClientSideControlData {\n\n        return {\n            controlType: this.controlType,\n            id: this.id,\n            position: {\n                controlIndex: this.order,\n                sectionFactor: this.column.factor,\n                sectionIndex: this.column.order,\n                zoneIndex: this.column.section.order,\n            },\n            webPartId: this.webPartId,\n        };\n\n    }\n\n    protected renderHtmlProperties(): string {\n\n        const html: string[] = [];\n\n        if (typeof this.serverProcessedContent === \"undefined\" || this.serverProcessedContent === null) {\n\n            html.push(this.htmlProperties);\n\n        } else if (typeof this.serverProcessedContent !== \"undefined\") {\n\n            if (typeof this.serverProcessedContent.searchablePlainTexts !== \"undefined\") {\n\n                const keys = Object.keys(this.serverProcessedContent.searchablePlainTexts);\n                for (let i = 0; i < keys.length; i++) {\n                    html.push(`<div data-sp-prop-name=\"${keys[i]}\" data-sp-searchableplaintext=\"true\">`);\n                    html.push(this.serverProcessedContent.searchablePlainTexts[keys[i]]);\n                    html.push(\"</div>\");\n                }\n            }\n\n            if (typeof this.serverProcessedContent.imageSources !== \"undefined\") {\n\n                const keys = Object.keys(this.serverProcessedContent.imageSources);\n                for (let i = 0; i < keys.length; i++) {\n                    html.push(`<img data-sp-prop-name=\"${keys[i]}\" src=\"${this.serverProcessedContent.imageSources[keys[i]]}\" />`);\n                }\n            }\n\n            if (typeof this.serverProcessedContent.links !== \"undefined\") {\n\n                const keys = Object.keys(this.serverProcessedContent.links);\n                for (let i = 0; i < keys.length; i++) {\n                    html.push(`<a data-sp-prop-name=\"${keys[i]}\" href=\"${this.serverProcessedContent.links[keys[i]]}\"></a>`);\n                }\n            }\n        }\n\n        return html.join(\"\");\n    }\n\n    protected parseJsonProperties(props: TypedHash<any>): any {\n\n        // If the web part has the serverProcessedContent property then keep this one as it might be needed as input to render the web part HTML later on\n        if (typeof props.webPartData !== \"undefined\" && typeof props.webPartData.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = props.webPartData.serverProcessedContent;\n        } else if (typeof props.serverProcessedContent !== \"undefined\") {\n            this.serverProcessedContent = props.serverProcessedContent;\n        } else {\n            this.serverProcessedContent = null;\n        }\n\n        if (typeof props.webPartData !== \"undefined\" && typeof props.webPartData.properties !== \"undefined\") {\n            return props.webPartData.properties;\n        } else if (typeof props.properties !== \"undefined\") {\n            return props.properties;\n        } else {\n            return props;\n        }\n    }\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface ClientSidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface ClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: TypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface ServerProcessedContent {\n    searchablePlainTexts: TypedHash<string>;\n    imageSources: TypedHash<string>;\n    links: TypedHash<string>;\n}\n\nexport interface ClientSideControlPosition {\n    controlIndex?: number;\n    sectionFactor: CanvasColumnFactorType;\n    sectionIndex: number;\n    zoneIndex: number;\n}\n\nexport interface ClientSideControlData {\n    controlType?: number;\n    id?: string;\n    editorType?: string;\n    position: ClientSideControlPosition;\n    webPartId?: string;\n    displayMode?: number;\n}\n\nexport interface ClientSideWebpartData {\n    dataVersion: string;\n    description: string;\n    id: string;\n    instanceId: string;\n    properties: any;\n    title: string;\n    serverProcessedContent?: ServerProcessedContent;\n}\n\nexport module ClientSideWebpartPropertyTypes {\n\n    /**\n     * Propereties for Embed (component id: 490d7c76-1824-45b2-9de3-676421c997fa)\n     */\n    export interface Embed {\n        embedCode: string;\n        cachedEmbedCode?: string;\n        shouldScaleWidth?: boolean;\n        tempState?: any;\n    }\n\n    /**\n     * Properties for Bing Map (component id: e377ea37-9047-43b9-8cdb-a761be2f8e09)\n     */\n    export interface BingMap {\n        center: {\n            altitude?: number;\n            altitudeReference?: number;\n            latitude: number;\n            longitude: number;\n        };\n        mapType: \"aerial\" | \"birdseye\" | \"road\" | \"streetside\";\n        maxNumberOfPushPins?: number;\n        pushPins?: {\n            location: {\n                latitude: number;\n                longitude: number;\n                altitude?: number;\n                altitudeReference?: number;\n            };\n            address?: string;\n            defaultAddress?: string;\n            defaultTitle?: string;\n            title?: string;\n        }[];\n        shouldShowPushPinTitle?: boolean;\n        zoomLevel?: number;\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { extend, Dictionary } from \"@pnp/common\";\n\n/**\n * Allows for the fluent construction of search queries\n */\nexport class SearchQueryBuilder {\n\n    constructor(queryText = \"\", private _query = {}) {\n\n        if (typeof queryText === \"string\" && queryText.length > 0) {\n\n            this.extendQuery({ Querytext: queryText });\n        }\n    }\n\n    public static create(queryText = \"\", queryTemplate: SearchQuery = {}): SearchQueryBuilder {\n        return new SearchQueryBuilder(queryText, queryTemplate);\n    }\n\n    public text(queryText: string): this {\n        return this.extendQuery({ Querytext: queryText });\n    }\n\n    public template(template: string): this {\n        return this.extendQuery({ QueryTemplate: template });\n    }\n\n    public sourceId(id: string): this {\n        return this.extendQuery({ SourceId: id });\n    }\n\n    public get enableInterleaving(): this {\n        return this.extendQuery({ EnableInterleaving: true });\n    }\n\n    public get enableStemming(): this {\n        return this.extendQuery({ EnableStemming: true });\n    }\n\n    public get trimDuplicates(): this {\n        return this.extendQuery({ TrimDuplicates: true });\n    }\n\n    public trimDuplicatesIncludeId(n: number): this {\n        return this.extendQuery({ TrimDuplicatesIncludeId: n });\n    }\n\n    public get enableNicknames(): this {\n        return this.extendQuery({ EnableNicknames: true });\n    }\n\n    public get enableFql(): this {\n        return this.extendQuery({ EnableFQL: true });\n    }\n\n    public get enablePhonetic(): this {\n        return this.extendQuery({ EnablePhonetic: true });\n    }\n\n    public get bypassResultTypes(): this {\n        return this.extendQuery({ BypassResultTypes: true });\n    }\n\n    public get processBestBets(): this {\n        return this.extendQuery({ ProcessBestBets: true });\n    }\n\n    public get enableQueryRules(): this {\n        return this.extendQuery({ EnableQueryRules: true });\n    }\n\n    public get enableSorting(): this {\n        return this.extendQuery({ EnableSorting: true });\n    }\n\n    public get generateBlockRankLog(): this {\n        return this.extendQuery({ GenerateBlockRankLog: true });\n    }\n\n    public rankingModelId(id: string): this {\n        return this.extendQuery({ RankingModelId: id });\n    }\n\n    public startRow(n: number): this {\n        return this.extendQuery({ StartRow: n });\n    }\n\n    public rowLimit(n: number): this {\n        return this.extendQuery({ RowLimit: n });\n    }\n\n    public rowsPerPage(n: number): this {\n        return this.extendQuery({ RowsPerPage: n });\n    }\n\n    public selectProperties(...properties: string[]): this {\n        return this.extendQuery({ SelectProperties: properties });\n    }\n\n    public culture(culture: number): this {\n        return this.extendQuery({ Culture: culture });\n    }\n\n    public timeZoneId(id: number): this {\n        return this.extendQuery({ TimeZoneId: id });\n    }\n\n    public refinementFilters(...filters: string[]): this {\n        return this.extendQuery({ RefinementFilters: filters });\n    }\n\n    public refiners(refiners: string): this {\n        return this.extendQuery({ Refiners: refiners });\n    }\n\n    public hiddenConstraints(constraints: string): this {\n        return this.extendQuery({ HiddenConstraints: constraints });\n    }\n\n    public sortList(...sorts: Sort[]): this {\n        return this.extendQuery({ SortList: sorts });\n    }\n\n    public timeout(milliseconds: number): this {\n        return this.extendQuery({ Timeout: milliseconds });\n    }\n\n    public hithighlightedProperties(...properties: string[]): this {\n        return this.extendQuery({ HitHighlightedProperties: properties });\n    }\n\n    public clientType(clientType: string): this {\n        return this.extendQuery({ ClientType: clientType });\n    }\n\n    public personalizationData(data: string): this {\n        return this.extendQuery({ PersonalizationData: data });\n    }\n\n    public resultsURL(url: string): this {\n        return this.extendQuery({ ResultsUrl: url });\n    }\n\n    public queryTag(...tags: string[]): this {\n        return this.extendQuery({ QueryTag: tags });\n    }\n\n    public properties(...properties: SearchProperty[]): this {\n        return this.extendQuery({ Properties: properties });\n    }\n\n    public get processPersonalFavorites(): this {\n        return this.extendQuery({ ProcessPersonalFavorites: true });\n    }\n\n    public queryTemplatePropertiesUrl(url: string): this {\n        return this.extendQuery({ QueryTemplatePropertiesUrl: url });\n    }\n\n    public reorderingRules(...rules: ReorderingRule[]): this {\n        return this.extendQuery({ ReorderingRules: rules });\n    }\n\n    public hitHighlightedMultivaluePropertyLimit(limit: number): this {\n        return this.extendQuery({ HitHighlightedMultivaluePropertyLimit: limit });\n    }\n\n    public get enableOrderingHitHighlightedProperty(): this {\n        return this.extendQuery({ EnableOrderingHitHighlightedProperty: true });\n    }\n\n    public collapseSpecification(spec: string): this {\n        return this.extendQuery({ CollapseSpecification: spec });\n    }\n\n    public uiLanguage(lang: number): this {\n        return this.extendQuery({ UILanguage: lang });\n    }\n\n    public desiredSnippetLength(len: number): this {\n        return this.extendQuery({ DesiredSnippetLength: len });\n    }\n\n    public maxSnippetLength(len: number): this {\n        return this.extendQuery({ MaxSnippetLength: len });\n    }\n\n    public summaryLength(len: number): this {\n        return this.extendQuery({ SummaryLength: len });\n    }\n\n    public toSearchQuery(): SearchQuery {\n        return <SearchQuery>this._query;\n    }\n\n    private extendQuery(part: any): this {\n\n        this._query = extend(this._query, part);\n        return this;\n    }\n}\n\n/**\n * Describes the search API\n *\n */\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Search class\n     *\n     * @param baseUrl The url for the search context\n     * @param query The SearchQuery object to execute\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/postquery\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * .......\n     * @returns Promise\n     */\n    public execute(query: SearchQuery): Promise<SearchResults> {\n\n        let formattedBody: any;\n        formattedBody = query;\n\n        if (formattedBody.SelectProperties) {\n            formattedBody.SelectProperties = this.fixupProp(query.SelectProperties);\n        }\n\n        if (formattedBody.RefinementFilters) {\n            formattedBody.RefinementFilters = this.fixupProp(query.RefinementFilters);\n        }\n\n        if (formattedBody.SortList) {\n            formattedBody.SortList = this.fixupProp(query.SortList);\n        }\n\n        if (formattedBody.HithighlightedProperties) {\n            formattedBody.HithighlightedProperties = this.fixupProp(query.HitHighlightedProperties);\n        }\n\n        if (formattedBody.ReorderingRules) {\n            formattedBody.ReorderingRules = this.fixupProp(query.ReorderingRules);\n        }\n\n        if (formattedBody.Properties) {\n            formattedBody.Properties = this.fixupProp(query.Properties);\n        }\n\n        const postBody = JSON.stringify({\n            request: extend({\n                \"__metadata\": { \"type\": \"Microsoft.Office.Server.Search.REST.SearchRequest\" },\n            }, formattedBody),\n        });\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fixes up properties that expect to consist of a \"results\" collection when needed\n     *\n     * @param prop property to fixup for container struct\n     */\n    private fixupProp(prop: any): any {\n\n        if (prop.hasOwnProperty(\"results\")) {\n            return prop;\n        }\n\n        return { results: prop };\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = typeof pageSize !== \"undefined\" ? pageSize : this._query.hasOwnProperty(\"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: true,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string[];\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifeTime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Dictionary<any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface ResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: { Name: string; Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[]; }[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    Intval?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32Type = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { MenuNodeCollection } from \"./types\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\n     * Gets a navigation node by id\n     *\n     * @param id The id of the node\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = JSON.stringify({\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        });\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = JSON.stringify({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n\n/**\n * Exposes the navigation components\n *\n */\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Creates a new instance of the Navigation class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of these navigation components\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"navigation\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\nexport interface INavigationService {\n    getMenuState(menuNodeKey?: string, depth?: number, mapProviderName?: string, customProperties?: string): Promise<MenuNodeCollection>;\n    getMenuNodeKey(currentUrl: string, mapProviderName?: string): Promise<string>;\n}\n\n/**\n * Represents the top level navigation service\n */\nexport class NavigationService extends SharePointQueryable implements INavigationService {\n\n    constructor(path: string = null) {\n        super(\"_api/navigation\", path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<MenuNodeCollection> {\n\n        return (new NavigationService(\"MenuState\")).postCore({\n            body: JSON.stringify({\n                customProperties: customProperties,\n                depth: depth,\n                mapProviderName: mapProviderName,\n                menuNodeKey: menuNodeKey,\n            }),\n        });\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return (new NavigationService(\"MenuNodeKey\")).postCore({\n            body: JSON.stringify({\n                currentUrl: currentUrl,\n                mapProviderName: mapProviderName,\n            }),\n        });\n    }\n}\n","import {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\n\nimport {\n    spODataEntity,\n} from \"./odata\";\n\nimport {\n    dateAdd,\n} from \"@pnp/common\";\n\n/**\n * Describes regional settings ODada object\n */\nexport class RegionalSettings extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the RegionalSettings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this regional settings collection\n     */\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"regionalsettings\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public get installedLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this);\n    }\n\n    /**\n     * Gets the collection of language packs that are installed on the server.\n     */\n    public get globalInstalledLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this, \"globalinstalledlanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): TimeZone {\n        return new TimeZone(this);\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): TimeZones {\n        return new TimeZones(this);\n    }\n}\n\n/**\n * Describes installed languages ODada queriable collection\n */\nexport class InstalledLanguages extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"installedlanguages\") {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes TimeZone ODada object\n */\nexport class TimeZone extends SharePointQueryableInstance {\n    constructor(baseUrl: string | SharePointQueryable, path = \"timezone\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    public utcToLocalTime(utcTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        return this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`)\n            .postCore()\n            .then(res => res.hasOwnProperty(\"UTCToLocalTime\") ? res.UTCToLocalTime : res);\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    public localTimeToUTC(localTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        return this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`)\n            .postCore()\n            .then(res => res.hasOwnProperty(\"LocalTimeToUTC\") ? res.LocalTimeToUTC : res);\n    }\n}\n\n/**\n * Describes time zones queriable collection\n */\nexport class TimeZones extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"timezones\") {\n        super(baseUrl, path);\n    }\n\n    // https://msdn.microsoft.com/en-us/library/office/jj247008.aspx - timezones ids\n    /**\n     * Gets an TimeZone by id\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    public getById(id: number): Promise<TimeZone> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return this.clone(TimeZones, `GetById(${id})`).postCore({}, spODataEntity(TimeZone));\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/suggest\") {\n        super(baseUrl, path);\n    }\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => new SearchSuggestResult(response));\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        this.query.add(\"querytext\", `'${query.querytext}'`);\n\n        if (query.hasOwnProperty(\"count\")) {\n            this.query.add(\"inumberofquerysuggestions\", query.count.toString());\n        }\n\n        if (query.hasOwnProperty(\"personalCount\")) {\n            this.query.add(\"inumberofresultsuggestions\", query.personalCount.toString());\n        }\n\n        if (query.hasOwnProperty(\"preQuery\")) {\n            this.query.add(\"fprequerysuggestions\", query.preQuery.toString());\n        }\n\n        if (query.hasOwnProperty(\"hitHighlighting\")) {\n            this.query.add(\"fhithighlighting\", query.hitHighlighting.toString());\n        }\n\n        if (query.hasOwnProperty(\"capitalize\")) {\n            this.query.add(\"fcapitalizefirstletters\", query.capitalize.toString());\n        }\n\n        if (query.hasOwnProperty(\"culture\")) {\n            this.query.add(\"culture\", query.culture.toString());\n        }\n\n        if (query.hasOwnProperty(\"stemming\")) {\n            this.query.add(\"enablestemming\", query.stemming.toString());\n        }\n\n        if (query.hasOwnProperty(\"includePeople\")) {\n            this.query.add(\"showpeoplenamesuggestions\", query.includePeople.toString());\n        }\n\n        if (query.hasOwnProperty(\"queryRules\")) {\n            this.query.add(\"enablequeryrules\", query.queryRules.toString());\n        }\n\n        if (query.hasOwnProperty(\"prefixMatch\")) {\n            this.query.add(\"fprefixmatchallterms\", query.prefixMatch.toString());\n        }\n    }\n}\n\nexport class SearchSuggestResult {\n\n    public PeopleNames: string[];\n    public PersonalResults: PersonalResultSuggestion[];\n    public Queries: any[];\n\n    constructor(json: any) {\n        if (json.hasOwnProperty(\"suggest\")) {\n            // verbose\n            this.PeopleNames = json.suggest.PeopleNames.results;\n            this.PersonalResults = json.suggest.PersonalResults.results;\n            this.Queries = json.suggest.Queries.results;\n        } else {\n            this.PeopleNames = json.PeopleNames;\n            this.PersonalResults = json.PersonalResults;\n            this.Queries = json.Queries;\n        }\n    }\n}\n\nexport interface PersonalResultSuggestion {\n    HighlightedTitle?: string;\n    IsBestBet?: boolean;\n    Title?: string;\n    TypeId?: string;\n    Url?: string;\n}\n","import { ODataBatch } from \"@pnp/odata\";\nimport { getGUID, isUrlAbsolute, combinePaths, mergeHeaders } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { SPBatchParseException } from \"./exceptions\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw new SPBatchParseException(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw new SPBatchParseException(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(new SPBatchParseException(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combinePaths(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (reqInfo.hasOwnProperty(\"options\") && reqInfo.options.hasOwnProperty(\"headers\") && typeof castHeaders[\"X-HTTP-Method\"] !== \"undefined\") {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(combinePaths(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(SPBatch.ParseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw new SPBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"features\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the feature (GUID)\n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: JSON.stringify({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: JSON.stringify({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.get<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/SP.RelatedItemManager\") {\n        super(baseUrl, path);\n    }\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n","import { extend, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Site } from \"./site\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery, StorageEntity } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\nimport { AppCatalog } from \"./appcatalog\";\nimport { RegionalSettings } from \"./regionalsettings\";\nimport { ClientSidePage, ClientSidePageComponent } from \"./clientsidepages\";\n\n/**\n * Describes a collection of webs\n *\n */\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Webs class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webs\") {\n        super(baseUrl, webPath);\n    }\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = JSON.stringify({\n            \"parameters\":\n                extend({\n                    \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n                }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(spExtractODataId(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\nexport class WebInfos extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the WebInfos class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web infos collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webinfos\") {\n        super(baseUrl, webPath);\n    }\n}\n\n/**\n * Describes a web\n *\n */\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new instance of the Web class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n     * Gets this web's parent web and data\n     *\n     */\n    public getParentWeb(): Promise<{ data: any; web: Web }> {\n        return this.select(\"ParentWeb/Id\").expand(\"ParentWeb\").get()\n            .then(({ ParentWeb }) => new Site(this.toUrlAndQuery().split(\"/_api\")[0]).openWebById(ParentWeb.Id));\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): Webs {\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): SharePointQueryableCollection {\n        return this.clone(SharePointQueryableCollection, \"allproperties\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets site user info list\n     *\n     */\n    public get siteUserInfoList(): List {\n        return new List(this, \"siteuserinfolist\");\n    }\n\n    /**\n     * Gets regional settings\n     *\n     */\n    public get regionalSettings(): RegionalSettings {\n        return new RegionalSettings(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a folder by server relative relative path if your folder name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123\");\n     * This works only in SharePoint online.\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativePath(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativePath(decodedUrl='${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url if your file name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123.docx\");\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativePath(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativePath(decodedUrl='${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = JSON.stringify(extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = JSON.stringify({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.add(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = JSON.stringify({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(spExtractODataId(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(spExtractODataId(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = JSON.stringify({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     *\n     * @param key Id of storage entity to be set\n     */\n    public getStorageEntity(key: string): Promise<StorageEntity> {\n        return this.clone(Web, `getStorageEntity('${key}')`).get();\n    }\n\n    /**\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\n     *\n     * @param key Id of storage entity to be set\n     * @param value Value of storage entity to be set\n     * @param description Description of storage entity to be set\n     * @param comments Comments of storage entity to be set\n     */\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\n        return this.clone(Web, `setStorageEntity`).postCore({\n            body: JSON.stringify({\n                comments,\n                description,\n                key,\n                value,\n            }),\n        });\n    }\n\n    /**\n     * This will remove the storage entity identified by the given key\n     *\n     * @param key Id of storage entity to be removed\n     */\n    public removeStorageEntity(key: string): Promise<void> {\n        return this.clone(Web, `removeStorageEntity('${key}')`).postCore();\n    }\n\n    /**\n     * Gets the app catalog for this web\n     *\n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this);\n    }\n\n    /**\n     * Gets the collection of available client side web parts for this web instance\n     */\n    public getClientSideWebParts(): Promise<ClientSidePageComponent[]> {\n        return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\").get();\n    }\n\n    /**\n     * Creates a new client side page\n     *\n     * @param pageName Name of the new page\n     * @param title Display title of the new page\n     * @param libraryTitle Title of the library in which to create the new page. Default: \"Site Pages\"\n     */\n    public addClientSidePage(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\"), libraryTitle = \"Site Pages\"): Promise<ClientSidePage> {\n        return ClientSidePage.create(this.lists.getByTitle(libraryTitle), pageName, title);\n    }\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation } from \"./types\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\n\n/**\n * Describes a site collection\n *\n */\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Site class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this site collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/site\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (data.hasOwnProperty(\"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.add(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.add(\"@v\", \"'\" + absolutePageUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => {\n\n            return {\n                data: d,\n                web: Web.fromUrl(spExtractODataId(d)),\n            };\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { ClientPeoplePickerQueryParameters, HashTagCollection, PeoplePickerEntity, UserProfile } from \"./types\";\nimport { readBlobAsArrayBuffer, extend } from \"@pnp/common\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.clientPeoplePickerQuery = new ClientPeoplePickerQuery(baseUrl);\n        this.profileLoader = new ProfileLoader(baseUrl);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.add(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.add(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n            readBlobAsArrayBuffer(profilePicSource).then((buffer) => {\n                const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n                request.postCore({\n                    body: String.fromCharCode.apply(null, new Uint16Array(buffer)),\n                }).then(_ => resolve());\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n        const postBody: string = JSON.stringify({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        });\n\n        return this.clone(UserProfileQuery, \"SetSingleValueProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n        const postBody: string = JSON.stringify({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        });\n\n        return this.clone(UserProfileQuery, \"SetMultiValuedProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\n    }\n}\n\nclass ProfileLoader extends SharePointQueryable {\n\n    /**\n   * Creates a new instance of the ProfileLoader class\n   *\n   * @param baseUrl The url or SharePointQueryable which forms the parent of this profile loader\n   */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.profileloader.getprofileloader\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: JSON.stringify({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n\nclass ClientPeoplePickerQuery extends SharePointQueryable {\n\n    /**\n     * Creates a new instance of the PeoplePickerQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this people picker query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickerresolveuser\");\n        return q.postCore<string | { ClientPeoplePickerResolveUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerResolveUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickersearchuser\");\n        return q.postCore<string | { ClientPeoplePickerSearchUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerSearchUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Creates ClientPeoplePickerQueryParameters request body\n     *\n     * @param queryParams The query parameters to create request body\n     */\n    private createClientPeoplePickerQueryParametersRequestBody(queryParams: ClientPeoplePickerQueryParameters): string {\n        return JSON.stringify({\n            \"queryParams\":\n                extend({\n                    \"__metadata\": { \"type\": \"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\" },\n                }, queryParams),\n        });\n    }\n}\n","import {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n} from \"./sharepointqueryable\";\n\nimport { extend } from \"@pnp/common\";\n\nexport interface SocialMethods {\n    my: MySocialQueryMethods;\n    getFollowedSitesUri(): Promise<string>;\n    getFollowedDocumentsUri(): Promise<string>;\n    follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult>;\n    isFollowed(actorInfo: SocialActorInfo): Promise<boolean>;\n    stopFollowing(actorInfo: SocialActorInfo): Promise<void>;\n}\n\n/**\n * Exposes social following methods\n */\nexport class SocialQuery extends SharePointQueryableInstance implements SocialMethods {\n\n    /**\n     * Creates a new instance of the SocialQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this social query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/social.following\") {\n        super(baseUrl, path);\n    }\n\n    public get my(): MySocialQueryMethods {\n        return new MySocialQuery(this);\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed sites.\n     */\n    public getFollowedSitesUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedSitesUri\").get().then(r => {\n            return r.FollowedSitesUri || r;\n        });\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed documents.\n     */\n    public getFollowedDocumentsUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedDocumentsUri\").get().then(r => {\n            return r.FollowedDocumentsUri || r;\n        });\n    }\n\n    /**\n     * Makes the current user start following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to start following\n     */\n    public follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult> {\n        return this.clone(SocialQuery, \"follow\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Indicates whether the current user is following a specified user, document, site, or tag\n     *\n     * @param actorInfo The actor to find the following status for\n     */\n    public isFollowed(actorInfo: SocialActorInfo): Promise<boolean> {\n        return this.clone(SocialQuery, \"isfollowed\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Makes the current user stop following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to stop following\n     */\n    public stopFollowing(actorInfo: SocialActorInfo): Promise<void> {\n        return this.clone(SocialQuery, \"stopfollowing\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Creates SocialActorInfo request body\n     *\n     * @param actorInfo The actor to create request body\n     */\n    private createSocialActorInfoRequestBody(actorInfo: SocialActorInfo): string {\n        return JSON.stringify({\n            \"actor\":\n                extend({\n                    Id: null,\n                    \"__metadata\": { \"type\": \"SP.Social.SocialActorInfo\" },\n                }, actorInfo),\n        });\n    }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface MySocialQueryMethods {\n    /**\n     * Gets this user's data\n     */\n    get(): Promise<MySocialData>;\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followed(types: SocialActorTypes): Promise<any[]>;\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followedCount(types: SocialActorTypes): Promise<number>;\n    /**\n     * Gets the users who are following the current user.\n     */\n    followers(): Promise<SocialActor[]>;\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    suggestions(): Promise<SocialActor[]>;\n}\n\nexport class MySocialQuery extends SharePointQueryableInstance implements MySocialQueryMethods {\n    /**\n     * Creates a new instance of the SocialQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this social query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"my\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followed(types: SocialActorTypes): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, `followed(types=${types})`).get().then(r => {\n            return r.hasOwnProperty(\"Followed\") ? r.Followed.results : r;\n        });\n    }\n\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followedCount(types: SocialActorTypes): Promise<number> {\n        return this.clone(MySocialQuery, `followedcount(types=${types})`).get().then(r => {\n            return r.FollowedCount || r;\n        });\n    }\n\n    /**\n     * Gets the users who are following the current user.\n     */\n    public followers(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"followers\").get().then(r => {\n            return r.hasOwnProperty(\"Followers\") ? r.Followers.results : r;\n        });\n    }\n\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    public suggestions(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"suggestions\").get().then(r => {\n            return r.hasOwnProperty(\"Suggestions\") ? r.Suggestions.results : r;\n        });\n    }\n}\n\n/**\n * Social actor info\n *\n */\nexport interface SocialActorInfo {\n    AccountName?: string;\n    ActorType: SocialActorType;\n    ContentUri?: string;\n    Id?: string;\n    TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n    User,\n    Document,\n    Site,\n    Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n    None = 0,\n    User = 1 << SocialActorType.User,\n    Document = 1 << SocialActorType.Document,\n    Site = 1 << SocialActorType.Site,\n    Tag = 1 << SocialActorType.Tag,\n    /**\n     * The set excludes documents and sites that do not have feeds.\n     */\n    ExcludeContentWithoutFeeds = 268435456,\n    /**\n     * The set includes group sites\n     */\n    IncludeGroupsSites = 536870912,\n    /**\n     * The set includes only items created within the last 24 hours\n     */\n    WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n    Ok = 0,\n    AlreadyFollowing = 1,\n    LimitReached = 2,\n    InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n    /**\n     * The operation completed successfully\n     */\n    OK,\n    /**\n     * The request is invalid.\n     */\n    InvalidRequest,\n    /**\n     *  The current user is not authorized to perform the operation.\n     */\n    AccessDenied,\n    /**\n     * The target of the operation was not found.\n     */\n    ItemNotFound,\n    /**\n     * The operation is invalid for the target's current state. \n     */\n    InvalidOperation,\n    /**\n     * The operation completed without modifying the target.\n     */\n    ItemNotModified,\n    /**\n     * The operation failed because an internal error occurred.\n     */\n    InternalError,\n    /**\n     * The operation failed because the server could not access the distributed cache.\n     */\n    CacheReadError,\n    /**\n     * The operation succeeded but the server could not update the distributed cache.\n     */\n    CacheUpdateError,\n    /**\n     * No personal site exists for the current user, and no further information is available.\n     */\n    PersonalSiteNotFound,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one failed.\n     */\n    FailedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n     */\n    NotAuthorizedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and no attempt should be made to create one.\n     */\n    CannotCreatePersonalSite,\n    /**\n     * The operation was rejected because an internal limit had been reached.\n     */\n    LimitReached,\n    /**\n     * The operation failed because an error occurred during the processing of the specified attachment.\n     */\n    AttachmentError,\n    /**\n     * The operation succeeded with recoverable errors; the returned data is incomplete.\n     */\n    PartialData,\n    /**\n     * A required SharePoint feature is not enabled.\n     */\n    FeatureDisabled,\n    /**\n     * The site's storage quota has been exceeded.\n     */\n    StorageQuotaExceeded,\n    /**\n     * The operation failed because the server could not access the database.\n     */\n    DatabaseError,\n}\n\nexport interface SocialActor {\n    /**\n     * Gets the actor type.\n     */\n    ActorType: SocialActorType;\n    /**\n     * Gets the actor's unique identifier.\n     */\n    Id: string;\n    /**\n     * Gets the actor's canonical URI.\n     */\n    Uri: string;\n    /**\n     * Gets the actor's display name.\n     */\n    Name: string;\n    /**\n     * Returns true if the current user is following the actor, false otherwise.\n     */\n    IsFollowed: boolean;\n    /**\n     * Gets a code that indicates recoverable errors that occurred during actor retrieval\n     */\n    Status: SocialStatusCode;\n    /**\n     * Returns true if the Actor can potentially be followed, false otherwise.\n     */\n    CanFollow: boolean;\n    /**\n     * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n     */\n    ImageUri: string;\n    /**\n     * Gets the actor's account name. Only valid when ActorType is User\n     */\n    AccountName: string;\n    /**\n     * Gets the actor's email address. Only valid when ActorType is User\n     */\n    EmailAddress: string;\n    /**\n     * Gets the actor's title. Only valid when ActorType is User\n     */\n    Title: string;\n    /**\n     * Gets the text of the actor's most recent post. Only valid when ActorType is User\n     */\n    StatusText: string;\n    /**\n     * Gets the URI of the actor's personal site. Only valid when ActorType is User\n     */\n    PersonalSiteUri: string;\n    /**\n     * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n     */\n    FollowedContentUri: string;\n    /**\n     * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n     */\n    ContentUri: string;\n    /**\n     * Gets the actor's library URI. Only valid when ActorType is Document\n     */\n    LibraryUri: string;\n    /**\n     * Gets the actor's tag GUID. Only valid when ActorType is Tag\n     */\n    TagGuid: string;\n}\n\n/**\n * Defines the properties retrurned from the my endpoint\n */\nexport interface MySocialData {\n    SocialActor: SocialActor;\n    MyFollowedDocumentsUri: string;\n    MyFollowedSitesUri: string;\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { extend } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n    usingCaching(options?: ICachingOptions): this;\n    inBatch(batch: SPBatch): this;\n    sendEmail(props: EmailProperties): Promise<void>;\n    getCurrentUserEmailAddresses(): Promise<string>;\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n    searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]>;\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n    createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n\n    /**\n     * Creates a new instance of the Utility method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Sends an email based on the supplied properties\n     *\n     * @param props The properties of the email to send\n     */\n    public sendEmail(props: EmailProperties): Promise<void> {\n\n        const params = {\n            properties: {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n                \"__metadata\": { \"type\": \"SP.Utilities.EmailProperties\" },\n            },\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = extend(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = extend(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = extend(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n            params.properties = extend(params.properties, {\n                AdditionalHeaders: props.AdditionalHeaders,\n            });\n        }\n\n        return this.clone(UtilityMethod, \"SendEmail\", true).excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n\n        return this.clone(UtilityMethod, \"GetCurrentUserEmailAddresses\", true).excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<PrincipalInfo> {\n\n        const params = {\n            addToUserInfoList: addToUserInfoList,\n            input: input,\n            inputIsEmailOnly: inputIsEmailOnly,\n            matchUserInfoList: matchUserInfoList,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]> {\n\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        return this.clone(UtilityMethod, \"CreateEmailBodyForInvitation\", true).excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        return this.clone(UtilityMethod, \"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n        return this.clone(UtilityMethod, \"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n            parameters: info,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n}\n\nexport interface CreateWikiPageResult {\n    data: any;\n    file: File;\n}\n","import { Search, SearchQuery, SearchResults, SearchQueryBuilder } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { ConfigOptions } from \"@pnp/common\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { INavigationService, NavigationService } from \"./navigation\";\nimport { SPBatch } from \"./batch\";\nimport { SocialQuery, SocialMethods } from \"./social\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport { SharePointQueryableConstructor, SharePointQueryable } from \"./sharepointqueryable\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: ConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(SearchSuggest).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: string | SearchQuery | SearchQueryBuilder): Promise<SearchResults> {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if (query instanceof SearchQueryBuilder) {\n            finalQuery = (query as SearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(Search).execute(finalQuery);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return this.create(Site);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return this.create(Web);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return this.create(UserProfileQuery);\n    }\n\n    /**\n     * Access to social methods\n     */\n    public get social(): SocialMethods {\n        return this.create(SocialQuery);\n    }\n\n    /**\n     * Access to the site collection level navigation service\n     */\n    public get navigation(): INavigationService {\n        return new NavigationService();\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return this.create(UtilityMethod, \"\");\n    }\n\n    /**\n     * Handles creating and configuring the objects returned from this class\n     * \n     * @param fm The factory method used to create the instance\n     * @param path Optional additional path information to pass to the factory method\n     */\n    private create<T extends SharePointQueryable>(fm: SharePointQueryableConstructor<T>, path?: string): T {\n        return new fm(this._baseUrl, path).configure(this._options);\n    }\n}\n\nexport const sp = new SPRest();\n"]}