{"version":3,"sources":["../../../../packages/sp/src/utils/extractweburl.ts","../../../../packages/sp/src/odata.ts","../../../../packages/sp/src/config/splibconfig.ts","../../../../packages/sp/src/utils/toabsoluteurl.ts","../../../../packages/sp/src/exceptions.ts","../../../../packages/sp/src/sitegroups.ts","../../../../packages/sp/src/net/fetchclient.ts","../../../../packages/sp/src/net/digestcache.ts","../../../../packages/sp/src/net/httpclient.ts","../../../../packages/sp/src/sharepointqueryable.ts","../../../../packages/sp/src/siteusers.ts","../../../../packages/sp/src/roles.ts","../../../../packages/sp/src/types.ts","../../../../packages/sp/src/sharepointqueryablesecurable.ts","../../../../packages/sp/src/sharepointqueryableshareable.ts","../../../../packages/sp/src/webparts.ts","../../../../packages/sp/src/folders.ts","../../../../packages/sp/src/contenttypes.ts","../../../../packages/sp/src/attachmentfiles.ts","../../../../packages/sp/src/views.ts","../../../../packages/sp/src/fields.ts","../../../../packages/sp/src/forms.ts","../../../../packages/sp/src/subscriptions.ts","../../../../packages/sp/src/usercustomactions.ts","../../../../packages/sp/src/lists.ts","../../../../packages/sp/src/items.ts","../../../../packages/sp/src/files.ts","../../../../packages/sp/src/navigation.ts","../../../../packages/sp/src/search.ts","../../../../packages/sp/src/searchsuggest.ts","../../../../packages/sp/src/batch.ts","../../../../packages/sp/src/features.ts","../../../../packages/sp/src/relateditems.ts","../../../../packages/sp/src/webs.ts","../../../../packages/sp/src/site.ts","../../../../packages/sp/src/userprofiles.ts","../../../../packages/sp/src/utilities.ts","../../../../packages/sp/src/rest.ts"],"names":["candidateUrl","index","indexOf","substr","candidate","hasOwnProperty","__metadata","id","SPODataIdException","spGetEntityUrl","entity","Util","combinePaths","extractWebUrl","uri","Logger","write","config","RuntimeConfig","extend","toAbsoluteUrl","Promise","resolve","isUrlAbsolute","SPRuntimeConfig","baseUrl","global","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","location","baseUrl_1","toString","toLowerCase","forEach","s","PrincipalType","SPBatchParseException","_super","msg","_this","call","this","name","log","data","level","message","tslib_1.__extends","Error","MaxCommentLengthException","NotSupportedInBatchException","operation","APIUrlException","SPODataEntityParserImpl","factory","hydrate","d","o","prototype","parse","r","then","ODataParserBase","SPODataEntityArrayParserImpl","map","v","FetchClient","fetch","url","options","SPRuntimeConfigImpl","Object","defineProperty","spPart","get","headers","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","CachedDigest","digests","Dictionary","DigestCache","_httpClient","_digests","getDigest","webUrl","cachedDigest","Date","expiration","value","Accept","Content-Type","fetchRaw","cache","credentials","method","response","ODataDefaultParser","GetContextWebInformation","newCachedDigest","FormDigestValue","seconds","FormDigestTimeoutSeconds","setTime","getTime","add","clear","HttpClient","_impl","_digestCache","opts","Headers","mergeHeaders","has","append","toUpperCase","digest","rawHeaders","retry","ctx","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","retryContext","post","patch","delete","SharePointQueryable","path","urlStr","lastIndexOf","_parentUrl","_url","slice","q","_options","target","_query","as","toUrlAndQuery","aliasedParams","toUrl","replace","match","labelName","merge","count","getKeys","key","join","getParent","batch","parentUrl","parent","configure","query","inBatch","clone","additionalPath","includeBatch","hasBatch","toRequestContext","verb","parser","pipeline","PipelineMethods","default","dependencyDispose","addBatchDependency","mergeOptions","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","SharePointQueryableCollection","filter","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","keys","asc","i","push","skip","top","SharePointQueryableInstance","SiteUsers","getByEmail","email","SiteUser","getById","getByLoginName","loginName","su","concat","encodeURIComponent","removeById","postCore","removeByLoginName","body","JSON","stringify","type","LoginName","SiteGroups","update","properties","postBody","X-HTTP-Method","user","CurrentUser","group","Id","getByName","groupName","SiteGroup","sg","retGroup","RoleAssignments","principalId","roleDefId","remove","ra","RoleAssignment","RoleDefinitionBindings","RoleDefinitions","RoleDefinition","getByType","roleTypeKind","description","order","basePermissions","BasePermissions","Description","Name","Order","definition","retDef","ControlMode","FieldTypes","DateTimeFieldFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","PrincipalSource","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","SharePointQueryableSecurable","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","getAs","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","num","SharePointQueryableShareable","getShareLink","kind","expString","toISOString","postAsCore","request","createLink","emailData","settings","linkKind","shareWith","loginNames","role","requireSignin","propagateAcl","Array","isArray","userStr","login","Key","roleFilter","Edit","Contributor","Reader","def","includeAnonymousLinkInEmail","peoplePickerInput","roleValue","useSimplifiedRoles","emailBody","emailSubject","subject","sendEmail","shareObject","bypass","sendShareObjectRequest","getRoleValue","unshareObjectWeb","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","g","Guest","getShareObjectWeb","SharePointQueryableShareableWeb","View","dependency","shareObjectRaw","SharePointQueryableShareableItem","OrganizationView","checkSharingPermissions","unshare","deleteSharingLinkByKind","FileFolderShared","getShareable","shareable","SharePointQueryableShareableFile","SharePointQueryableShareableFolder","shareEverything","LimitedWebPartManager","WebPartDefinitions","export","webPartId","import","xml","webPartXml","WebPartDefinition","getByControlId","WebPart","saveChanges","moveTo","zoneId","zoneIndex","close","open","Folders","f","Folder","folder","Files","eTag","IF-Match","recycle","getItem","listItemAllFields","apply","Item","ContentTypes","ct","ContentType","addAvailableContentType","contentTypeId","contentType","additionalSettings","Group","StringValue","FieldLinks","fl","FieldLink","AttachmentFiles","AttachmentFile","content","file","addMultiple","files","reduce","chain","getText","TextFileParser","getBlob","BlobFileParser","getBuffer","BufferFileParser","getJSON","JSONFileParser","setContent","_","Views","getByTitle","title","personalView","PersonalView","Title","view","ViewFields","renderAsHtml","getSchemaXml","fieldTitleOrInternalName","move","fieldInternalName","field","removeAll","Fields","Field","getByInternalNameOrTitle","createFieldAsXml","info","SchemaXml","parameters","fieldType","addText","maxLength","props","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","Forms","Form","Subscriptions","subscriptionId","subscription","Subscription","notificationUrl","expirationDate","clientState","expirationDateTime","resource","result","patchCore","deleteCore","UserCustomActions","uca","UserCustomAction","action","Lists","List","list","template","enableContentTypes","addSettings","AllowContentTypes","BaseTemplate","ContentTypesEnabled","ensure","addOrUpdateSettings","created","e","ensureSiteAssetsLibrary","json","spExtractODataId","ensureSitePagesLibrary","Items","getView","viewId","retList","getChanges","getItemsByCAMLQuery","getListItemChangesSinceToken","text","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","overrideParameters","renderListFormData","itemId","formId","mode","ListData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","getPaged","PagedItemCollectionParser","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","promise","item","candidatelistItemEntityTypeFullName","File","ItemUpdatedParser","getWopiFrameUrl","GetWOPIFrameUrl","validateUpdateListItem","formValues","newDocumentUpdate","bNewDocumentUpdate","PagedItemCollection","nextUrl","results","getNext","hasNext","handleError","__next","parseODataJSON","odata.etag","shouldOverWrite","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","CheckinType","Major","checkout","copyTo","deny","getLimitedWebPartManager","scope","WebPartsPersonalizationScope","Shared","moveOperations","MoveOperations","Overwrite","publish","undoCheckout","unpublish","binaryStringResponseBody","self","fileSize","size","blockCount","parseInt","blockNumber","currentPointer","stage","totalBlocks","startUpload","pointer","continueUpload","finishUpload","fragment","n","parseFloat","fileOffset","ServerRelativeUrl","versionId","Version","deleteAll","deleteById","deleteByLabel","label","restoreByLabel","TemplateFileType","NavigationNodes","node","NavigationNode","visible","IsVisible","Url","moveAfter","nodeId","previousNodeId","Navigation","SearchQueryBuilder","queryText","extendQuery","Querytext","create","queryTemplate","QueryTemplate","sourceId","SourceId","EnableInterleaving","EnableStemming","TrimDuplicates","trimDuplicatesIncludeId","TrimDuplicatesIncludeId","EnableNicknames","EnableFQL","EnablePhonetic","BypassResultTypes","ProcessBestBets","EnableQueryRules","EnableSorting","GenerateBlockRankLog","rankingModelId","RankingModelId","startRow","StartRow","rowLimit","RowLimit","rowsPerPage","RowsPerPage","selectProperties","SelectProperties","culture","Culture","timeZoneId","TimeZoneId","refinementFilters","filters","RefinementFilters","refiners","Refiners","hiddenConstraints","constraints","HiddenConstraints","sortList","sorts","SortList","timeout","milliseconds","Timeout","hithighlightedProperties","HitHighlightedProperties","clientType","ClientType","personalizationData","PersonalizationData","resultsURL","ResultsUrl","queryTag","tags","QueryTag","Properties","ProcessPersonalFavorites","queryTemplatePropertiesUrl","QueryTemplatePropertiesUrl","reorderingRules","rules","ReorderingRules","hitHighlightedMultivaluePropertyLimit","limit","HitHighlightedMultivaluePropertyLimit","EnableOrderingHitHighlightedProperty","collapseSpecification","spec","CollapseSpecification","uiLanguage","lang","UILanguage","desiredSnippetLength","len","DesiredSnippetLength","maxSnippetLength","MaxSnippetLength","summaryLength","SummaryLength","toSearchQuery","part","Search","execute","formattedBody","fixupProp","HithighlightedProperties","SearchResults","prop","rawResponse","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","rawResults","tempResults_1","tempResult","cells","Cells","res","cell","configurable","enumerable","Value","writable","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","SearchBuiltInSourceId","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","SearchSuggest","mapQueryToQueryString","SearchSuggestResult","querytext","personalCount","preQuery","hitHighlighting","capitalize","stemming","includePeople","queryRules","prefixMatch","PeopleNames","suggest","PersonalResults","Queries","SPBatch","executeImpl","batchId","requests","client","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","set","batchOptions","_parseResponse","responses","statusText","statusRegExp","RegExp","lines","split","state","line","trim","parts","exec","Response","ODataBatch","Features","feature","Feature","force","featdefScope","featureId","deactivate","DefinitionId","RelatedItemManagerImpl","FromUrl","getRelatedItems","sourceListName","sourceItemId","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","Webs","webPath","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","WebTemplate","Web","WebInfos","fromUrl","getSubwebsFilteredForCurrentUser","nWebTemplateFilter","nConfigurationFilter","createBatch","getFolderByServerRelativeUrl","folderRelativeUrl","getFileByServerRelativeUrl","fileRelativeUrl","getList","listRelativeUrl","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","ensureUser","logonName","availableWebTemplates","includeCrossLanugage","getCatalog","getUserById","mapToIcon","filename","progId","Site","getContextInfo","SupportedSchemaVersions","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","openWebById","webId","UserProfileQuery","profileLoader","ProfileLoader","ODataValue","amIFollowedBy","amIFollowing","getFollowedTags","maxCount","getFollowersFor","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","readBlobAsArrayBuffer","buffer","String","fromCharCode","Uint16Array","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","emailIDs","UtilityMethod","methodName","getBaseUrl","excute","params","Body","From","Subject","To","CC","BCC","AdditionalHeaders","getCurrentUserEmailAddresses","resolvePrincipal","input","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","SPRest","_baseUrl","setup","_setup","searchSuggest","finalQuery","search","sp"],"mappings":"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","sourcesContent":["export function extractWebUrl(candidateUrl: string) {\r\n\r\n    if (candidateUrl === null) {\r\n        return \"\";\r\n    }\r\n\r\n    const index = candidateUrl.indexOf(\"_api/\");\r\n\r\n    if (index > -1) {\r\n        return candidateUrl.substr(0, index);\r\n    }\r\n\r\n    // if all else fails just give them what they gave us back\r\n    return candidateUrl;\r\n}\r\n","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { Util } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPODataIdException } from \"./exceptions\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\n\nexport function spExtractODataId(candidate: any): string {\n\n    if (candidate.hasOwnProperty(\"odata.id\")) {\n        return candidate[\"odata.id\"];\n    } else if (candidate.hasOwnProperty(\"__metadata\") && candidate.__metadata.hasOwnProperty(\"id\")) {\n        return candidate.__metadata.id;\n    } else {\n        throw new SPODataIdException(candidate);\n    }\n}\n\nclass SPODataEntityParserImpl<T> extends ODataParserBase<T> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: any) => {\n        const o = <T>new this.factory(spGetEntityUrl(d), null);\n        return Util.extend(o, d);\n    }\n\n    public parse(r: Response): Promise<T> {\n        return super.parse(r).then((d: any) => {\n            const o = <T>new this.factory(spGetEntityUrl(d), null);\n            return Util.extend(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T> extends ODataParserBase<T[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: any[]) => {\n        return d.map(v => {\n            const o = <T>new this.factory(spGetEntityUrl(v), null);\n            return Util.extend(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<T[]> {\n        return super.parse(r).then((d: any[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(spGetEntityUrl(v), null);\n                return Util.extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spGetEntityUrl(entity: any): string {\n\n    if (entity.hasOwnProperty(\"odata.metadata\") && entity.hasOwnProperty(\"odata.editLink\")) {\n        // we are dealign with minimal metadata (default)\n        return Util.combinePaths(extractWebUrl(entity[\"odata.metadata\"]), \"_api\", entity[\"odata.editLink\"]);\n    } else if (entity.hasOwnProperty(\"__metadata\")) {\n        // we are dealing with verbose, which has an absolute uri\n        return entity.__metadata.uri;\n    } else {\n        // we are likely dealing with nometadata, so don't error but we won't be able to\n        // chain off these objects\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n}\n\nexport function spODataEntity<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T> {\n    return new SPODataEntityParserImpl(factory);\n}\n\nexport function spODataEntityArray<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T[]> {\n    return new SPODataEntityArrayParserImpl(factory);\n}\n","import { LibraryConfiguration, TypedHash, RuntimeConfig } from \"@pnp/common\";\r\nimport { HttpClientImpl } from \"../net/httpclient\";\r\nimport { FetchClient } from \"../net/fetchclient\";\r\n\r\nexport interface SPConfigurationPart {\r\n    sp?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: TypedHash<string>;\r\n\r\n        /**\r\n         * The base url used for all requests\r\n         */\r\n        baseUrl?: string;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => HttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\r\n\r\nexport function setup(config: SPConfiguration): void {\r\n    RuntimeConfig.extend(config);\r\n}\r\n\r\nexport class SPRuntimeConfigImpl {\r\n\r\n    public get headers(): TypedHash<string> {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (typeof spPart !== \"undefined\" && typeof spPart.headers !== \"undefined\") {\r\n            return spPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get baseUrl(): string | null {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== null && typeof spPart.baseUrl !== \"undefined\") {\r\n            return spPart.baseUrl;\r\n        }\r\n\r\n        if (RuntimeConfig.spfxContext !== null) {\r\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get fetchClientFactory(): () => HttpClientImpl {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        // use a configured factory firt\r\n        if (spPart !== null && typeof spPart.fetchClientFactory !== \"undefined\") {\r\n            return spPart.fetchClientFactory;\r\n        } else {\r\n            return () => new FetchClient();\r\n        }\r\n    }\r\n}\r\n\r\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\r\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\r\nimport { Util } from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\r\n\r\n/**\r\n * Ensures that a given url is absolute for the current web based on context\r\n *\r\n * @param candidateUrl The url to make absolute\r\n *\r\n */\r\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n        if (Util.isUrlAbsolute(candidateUrl)) {\r\n            // if we are already absolute, then just return the url\r\n            return resolve(candidateUrl);\r\n        }\r\n\r\n        if (SPRuntimeConfig.baseUrl !== null) {\r\n            // base url specified either with baseUrl of spfxContext config property\r\n            return resolve(Util.combinePaths(SPRuntimeConfig.baseUrl, candidateUrl));\r\n        }\r\n\r\n        if (typeof global._spPageContextInfo !== \"undefined\") {\r\n\r\n            // operating in classic pages\r\n            if (global._spPageContextInfo.hasOwnProperty(\"webAbsoluteUrl\")) {\r\n                return resolve(Util.combinePaths(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\r\n            } else if (global._spPageContextInfo.hasOwnProperty(\"webServerRelativeUrl\")) {\r\n                return resolve(Util.combinePaths(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\r\n            }\r\n        }\r\n\r\n        // does window.location exist and have a certain path part in it?\r\n        if (typeof global.location !== \"undefined\") {\r\n            const baseUrl = global.location.toString().toLowerCase();\r\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\r\n                const index = baseUrl.indexOf(s);\r\n                if (index > 0) {\r\n                    return resolve(Util.combinePaths(baseUrl.substr(0, index), candidateUrl));\r\n                }\r\n            });\r\n        }\r\n\r\n        return resolve(candidateUrl);\r\n    });\r\n}\r\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport class SPBatchParseException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"BatchParseException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class SPODataIdException extends Error {\r\n\r\n    constructor(data: any, msg = \"Could not extract odata id in object, you may be using nometadata. Object data logged to logger.\") {\r\n        super(msg);\r\n        this.name = \"ODataIdException\";\r\n        Logger.log({ data: data, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class MaxCommentLengthException extends Error {\r\n\r\n    constructor(msg = \"The maximum comment length is 1023 characters.\") {\r\n        super(msg);\r\n        this.name = \"MaxCommentLengthException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class NotSupportedInBatchException extends Error {\r\n\r\n    constructor(operation = \"This operation\") {\r\n        super(`${operation} is not supported as part of a batch.`);\r\n        this.name = \"NotSupportedInBatchException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class APIUrlException extends Error {\r\n\r\n    constructor(msg = \"Unable to determine API url.\") {\r\n        super(msg);\r\n        this.name = \"APIUrlException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n\n/**\n * Describes a collection of site groups\n *\n */\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteGroups class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this group collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"sitegroups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = JSON.stringify(Util.extend(\n            { \"__metadata\": { \"type\": \"SP.Group\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Gets a group from the collection by id\n     *\n     * @param id The id of the group to retrieve\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    /**\n    * Updates this group instance with the supplied properties\n    *\n    * @param properties A GroupWriteableProperties object of property names and values to update for the group\n    */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<GroupUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.Group\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retGroup: SiteGroup = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                group: retGroup,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n","import { HttpClientImpl } from \"./httpclient\";\r\n\r\ndeclare var global: any;\r\n\r\n/**\r\n * Makes requests using the fetch API\r\n */\r\nexport class FetchClient implements HttpClientImpl {\r\n    public fetch(url: string, options: any): Promise<Response> {\r\n        return global.fetch(url, options);\r\n    }\r\n}\r\n","import { HttpClient } from \"./httpclient\";\nimport { Util, Dictionary } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Dictionary<CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: HttpClient, private _digests: Dictionary<CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== null) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = Util.combinePaths(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: Util.extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.add(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n\n","import { DigestCache } from \"./digestcache\";\nimport { Util, mergeHeaders, FetchOptions, RequestClient } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { APIUrlException } from \"../exceptions\";\n\nexport interface HttpClientImpl {\n    fetch(url: string, options: FetchOptions): Promise<Response>;\n}\n\nexport class HttpClient implements RequestClient {\n\n    private _digestCache: DigestCache;\n    private _impl: HttpClientImpl;\n\n    constructor() {\n        this._impl = SPRuntimeConfig.fetchClientFactory();\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = Util.extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/$$Version$$\");\n        }\n\n        opts = Util.extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                const index = url.indexOf(\"_api/\");\n                if (index < 0) {\n                    throw new APIUrlException();\n                }\n                const webUrl = url.substr(0, index);\n                return this._digestCache.getDigest(webUrl)\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: {} | PromiseLike<{}>) => void;\n    retryCount: number;\n}\n","import {\n    Util,\n    Dictionary,\n    FetchOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n    PipelineMethods,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { HttpClient } from \"./net/httpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable extends ODataQueryable<SPBatch> {\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            const urlStr = baseUrl as string;\n            if (Util.isUrlAbsolute(urlStr) || urlStr.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = urlStr;\n                this._url = Util.combinePaths(urlStr, path);\n            } else if (urlStr.lastIndexOf(\"/\") > urlStr.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = urlStr.lastIndexOf(\"/\");\n                this._parentUrl = urlStr.slice(0, index);\n                path = Util.combinePaths(urlStr.slice(index), path);\n                this._url = Util.combinePaths(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = urlStr.lastIndexOf(\"(\");\n                this._parentUrl = urlStr.slice(0, index);\n                this._url = Util.combinePaths(urlStr, path);\n            }\n        } else {\n            const q = baseUrl as SharePointQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            const target = q._query.get(\"@target\");\n            if (target !== null) {\n                this._query.add(\"@target\", target);\n            }\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n         * Creates a new instance of the supplied factory and extends this into that new instance\n         *\n         * @param factory constructor for the new SharePointQueryable\n         */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Dictionary<string>();\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.add(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        // inlude our explicitly set query string params\n        aliasedParams.merge(this._query);\n\n        if (aliasedParams.count() > 0) {\n            url += `?${aliasedParams.getKeys().map(key => `${key}=${aliasedParams.get(key)}`).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path);\n        parent.configure(this._options);\n\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            parent.query.add(\"@target\", target);\n        }\n        if (typeof batch !== \"undefined\") {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n        let clone = new factory(this, additionalPath);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>> = PipelineMethods.default): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this.addBatchDependency() : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new HttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._useCaching,\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: Util.getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection extends SharePointQueryable {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n}\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance extends SharePointQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteUsers class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"siteusers\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(\"(@v)\");\n        su.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: JSON.stringify({ \"__metadata\": { \"type\": \"SP.User\" }, LoginName: loginName }),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update(properties: TypedHash<any>): Promise<UserUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.User\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                user: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Represents the current user\n */\nexport class CurrentUser extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"currentuser\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleAssignments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role assignments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roleassignments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Gets the role assignment associated with the specified principal id from the collection.\n     *\n     * @param id The id of the role assignment\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definitions collection\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the role definition with the specified id from the collection\n     *\n     * @param id The id of the role definition\n     *\n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = JSON.stringify({\n            BasePermissions: Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        if (typeof properties.hasOwnProperty(\"BasePermissions\") !== \"undefined\") {\n            properties[\"BasePermissions\"] = Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, properties[\"BasePermissions\"]);\n        }\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.RoleDefinition\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (properties.hasOwnProperty(\"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\nexport class RoleDefinitionBindings extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitionBindings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definition bindings collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitionbindings\") {\n        super(baseUrl, path);\n    }\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\nexport enum PrincipalSource {\n    None = 0,\n    UserInfoList = 1,\n    Windows = 2,\n    MembershipProvider = 4,\n    RoleProvider = 8,\n    All = 15,\n}\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n}\n\nexport interface RenderListDataParameters {\n    ViewXml?: string;\n    Paging?: string;\n    FolderServerRelativeUrl?: string;\n    RenderOptions?: RenderListDataOptions;\n}\n","import { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.add(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get().then(r => {\n            // handle verbose mode\n            return r.hasOwnProperty(\"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableInstance(\"_api/web\", \"currentuser\");\n        return w.select(\"LoginName\").getAs<{ LoginName: string }>().then(user => {\n\n            return this.getUserEffectivePermissions(user.LoginName);\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n","import { Util } from \"@pnp/common\";\nimport { spGetEntityUrl } from \"./odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postAsCore<ShareLinkResponse>({\n            body: JSON.stringify({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = JSON.stringify(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw new Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (typeof emailData !== \"undefined\") {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: typeof emailData.subject !== \"undefined\" ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postAsCore<SharingResult>({\n                body: JSON.stringify(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = Util.extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = JSON.stringify(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (typeof options.emailData !== \"undefined\" && options.emailData !== null) {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: typeof options.emailData.subject !== \"undefined\" ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postAsCore<SharingResult>({\n            body: JSON.stringify({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postAsCore<SharingEntityPermission[]>({\n            body: JSON.stringify({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, \"getSharingInformation\").postAsCore<SharingInformation>({\n            body: JSON.stringify({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postAsCore<ObjectSharingSettings>({\n            body: JSON.stringify({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postAsCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: JSON.stringify({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: JSON.stringify({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (typeof group !== \"undefined\" && group !== null) {\n\n\n\n            switch (group) {\n                case RoleType.Contributor:\n                    // remove need to reference Web here, which created a circular build issue\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\n                    return memberGroup.select(\"Id\").getAs<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    // remove need to reference Web here, which created a circular build issue\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\n                    return visitorGroup.select(\"Id\").getAs<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw new Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            // remove need to reference Web here, which created a circular build issue\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).getAs<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw new Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<SharePointQueryableInstance> {\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: JSON.stringify(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n        // remove need to reference Web here, which created a circular build issue\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n        return web.get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(Util.combinePaths(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.editlink\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(spGetEntityUrl(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: JSON.stringify({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: JSON.stringify({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\nexport class WebPart extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the WebPart class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     * @param path Optional, if supplied will be appended to the supplied baseUrl\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"webpart\") {\n        super(baseUrl, path);\n    }\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { spGetEntityUrl } from \"./odata\";\nimport { Item } from \"./items\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Folders class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"folders\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((response) => {\n            return {\n                data: response,\n                folder: this.getByName(url),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update(properties: TypedHash<string | number | boolean>): Promise<FolderUpdateResult> {\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Folder\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                folder: this,\n            };\n        });\n    }\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of content types\n *\n */\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentTypes class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content types collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"contenttypes\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a ContentType by content type id\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = JSON.stringify({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postAsCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n            \"__metadata\": { \"type\": \"SP.ContentType\" },\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\nexport class FieldLinks extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentType class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content type instance\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fieldlinks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a FieldLink by GUID id\n     *\n     * @param id The GUID id of the field link\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { TextFileParser, BlobFileParser, JSONFileParser, BufferFileParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the AttachmentFiles class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this attachments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"AttachmentFiles\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds mjultiple new attachment to the collection. Not supported for batching.\n     *\n     * @files name The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new TextFileParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new BlobFileParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new BufferFileParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new JSONFileParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes the views available in the current context\n *\n */\nexport class Views extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Views class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"views\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a view by guid id\n     *\n     * @param id The GUID id of the view\n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"PersonalView\": personalView,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, additionalSettings));\n\n        return this.clone(Views, null).postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update(properties: TypedHash<any>): Promise<ViewUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                view: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n}\n\nexport class ViewFields extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"viewfields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: JSON.stringify({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n} from \"./types\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param title The Id of the list\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = JSON.stringify({\n            \"parameters\":\n            Util.extend({\n                \"__metadata\":\n                {\n                    \"type\": \"SP.XmlSchemaFieldCreationInformation\",\n                },\n            }, info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: TypedHash<string | number | boolean> = {}): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"Title\": title,\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.clone(Fields, null).postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n                DateFormat: dateFormat,\n                FieldTypeKind: 17,\n                Formula: formula,\n                OutputType: outputType,\n            };\n\n        return this.add(title, \"SP.FieldCalculated\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat = 0,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            DateTimeCalendarType: CalendarType;\n            DisplayFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            FriendlyDisplayFormat: number;\n        } = {\n                DateTimeCalendarType: calendarType,\n                DisplayFormat: displayFormat,\n                FieldTypeKind: 4,\n                FriendlyDisplayFormat: friendlyDisplayFormat,\n            };\n\n        return this.add(title, \"SP.FieldDateTime\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            AllowHyperlink: boolean;\n            AppendOnly: boolean;\n            FieldTypeKind: number;\n            NumberOfLines: number;\n            RestrictedMode: boolean;\n            RichText: boolean;\n        } = {\n                AllowHyperlink: allowHyperlink,\n                AppendOnly: appendOnly,\n                FieldTypeKind: 3,\n                NumberOfLines: numberOfLines,\n                RestrictedMode: restrictedMode,\n                RichText: richText,\n            };\n\n        return this.add(title, \"SP.FieldMultiLineText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: TypedHash<string | number | boolean>,\n    ): Promise<FieldAddResult> {\n\n        const props: { DisplayFormat: UrlFieldFormatType; FieldTypeKind: number } = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", Util.extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Forms extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"forms\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a form by id\n     *\n     * @param id The guid id of the item to retrieve\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Subscriptions class\n     *\n     * @param baseUrl - The url or SharePointQueryable which forms the parent of this webhook subscriptions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"subscriptions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const subscription = new Subscription(this);\n        subscription.concat(`('${subscriptionId}')`);\n        return subscription;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (defaults to pnp-js-core-subscription when omitted)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody = JSON.stringify({\n            \"clientState\": clientState || \"pnp-js-core-subscription\",\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        });\n\n        return this.postCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     */\n    public update(expirationDate: string): Promise<SubscriptionUpdateResult> {\n\n        const postBody = JSON.stringify({\n            \"expirationDateTime\": expirationDate,\n        });\n\n        return this.patchCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n            return { data: data, subscription: this };\n        });\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the UserCustomActions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user custom actions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"usercustomactions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns the user custom action with the specified id\n     *\n     * @param id The GUID id of the user custom action to retrieve\n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.UserCustomAction\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                action: this,\n                data: data,\n            };\n        });\n    }\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { NotSupportedInBatchException } from \"./exceptions\";\nimport { Folder } from \"./folders\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"lists\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = Util.extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: JSON.stringify(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw new NotSupportedInBatchException(\"The ensure list method\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = Util.extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n}\n\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (data.hasOwnProperty(\"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.add(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"RenderListData\")) {\n                return data.RenderListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     * \n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null): Promise<any> {\n\n        const postBody = {\n            overrideParameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataOverrideParameters\" },\n            }, overrideParameters),\n            parameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataParameters\" },\n            }, parameters),\n        };\n\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\n            body: JSON.stringify(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"ListData\")) {\n                return data.ListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (data.hasOwnProperty(\"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").getAs<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ListItemFormUpdateValue } from \"./types\";\nimport { ODataParserBase } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class Items extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Items class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"items\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Item by id\n     *\n     * @param id The integer id of the item to retrieve\n     */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged(): Promise<PagedItemCollection<any>> {\n        return this.getAs(new PagedItemCollectionParser());\n    }\n\n    //\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = JSON.stringify(Util.extend({\n                \"__metadata\": { \"type\": listItemEntityType },\n            }, properties));\n\n            const promise = this.clone(Items, null).postAsCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = JSON.stringify(Util.extend({\n                    \"__metadata\": { \"type\": listItemEntityType },\n                }, properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i._query.add(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (data.hasOwnProperty(\"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: JSON.stringify({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\"))).getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<any>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null);\n            return items.getPaged();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser extends ODataParserBase<PagedItemCollection<any>> {\n    public parse(r: Response): Promise<PagedItemCollection<any>> {\n\n        return new Promise<PagedItemCollection<any>>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = json.hasOwnProperty(\"d\") && json.d.hasOwnProperty(\"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection(nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public parse(r: Response): Promise<ItemUpdateResultData> {\n\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { TextFileParser, BlobFileParser, JSONFileParser, BufferFileParser } from \"@pnp/odata\";\nimport { Util } from \"@pnp/common\";\nimport { MaxCommentLengthException } from \"./exceptions\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { spGetEntityUrl } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Files class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"files\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\n        return adder.postCore().then(() => this.getByName(url)).then(file => file.setContentChunked(content, progress, chunkSize)).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(url),\n            };\n        });\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(\n        file: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        chunkSize = 10485760): Promise<File> {\n\n        if (typeof progress === \"undefined\") {\n            progress = () => null;\n        }\n\n        const self = this;\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = Util.getGUID();\n\n        // start the chain with the first fragment\n        progress({ blockNumber: 1, chunkSize: chunkSize, currentPointer: 0, fileSize: fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = self.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n\n            chain = chain.then(pointer => {\n\n                progress({ blockNumber: i, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"continue\", totalBlocks: blockCount });\n\n                return self.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n\n            progress({ blockNumber: blockCount, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"finishing\", totalBlocks: blockCount });\n\n            return self.finishUpload(uploadId, pointer, file.slice(pointer));\n\n        }).then(_ => {\n\n            return self;\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false).postAsCore<string>({ body: fragment }).then(n => parseFloat(n));\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false).postAsCore<string>({ body: fragment }).then(n => parseFloat(n));\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    private finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postAsCore<{ ServerRelativeUrl: string }>({ body: fragment }).then((response) => {\n                return {\n                    data: response,\n                    file: new File(response.ServerRelativeUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel='${label}')`).postCore();\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Result from udpdating a navigation node\n *\n */\nexport interface NavigationNodeUpdateResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\n     * Gets a navigation node by id\n     *\n     * @param id The id of the node\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = JSON.stringify({\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        });\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = JSON.stringify({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Updates this node based on the supplied properties\n     *\n     * @param properties The hash of key/value pairs to update\n     */\n    public update(properties: TypedHash<boolean | string | number>): Promise<NavigationNodeUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                node: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n\n/**\n * Exposes the navigation components\n *\n */\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Creates a new instance of the Navigation class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of these navigation components\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"navigation\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, Dictionary } from \"@pnp/common\";\n\n/**\n * Allows for the fluent construction of search queries\n */\nexport class SearchQueryBuilder {\n\n    constructor(queryText = \"\", private _query = {}) {\n\n        if (typeof queryText === \"string\" && queryText.length > 0) {\n\n            this.extendQuery({ Querytext: queryText });\n        }\n    }\n\n    public static create(queryText = \"\", queryTemplate: SearchQuery = {}): SearchQueryBuilder {\n        return new SearchQueryBuilder(queryText, queryTemplate);\n    }\n\n    public text(queryText: string): this {\n        return this.extendQuery({ Querytext: queryText });\n    }\n\n    public template(template: string): this {\n        return this.extendQuery({ QueryTemplate: template });\n    }\n\n    public sourceId(id: string): this {\n        return this.extendQuery({ SourceId: id });\n    }\n\n    public get enableInterleaving(): this {\n        return this.extendQuery({ EnableInterleaving: true });\n    }\n\n    public get enableStemming(): this {\n        return this.extendQuery({ EnableStemming: true });\n    }\n\n    public get trimDuplicates(): this {\n        return this.extendQuery({ TrimDuplicates: true });\n    }\n\n    public trimDuplicatesIncludeId(n: number): this {\n        return this.extendQuery({ TrimDuplicatesIncludeId: n });\n    }\n\n    public get enableNicknames(): this {\n        return this.extendQuery({ EnableNicknames: true });\n    }\n\n    public get enableFql(): this {\n        return this.extendQuery({ EnableFQL: true });\n    }\n\n    public get enablePhonetic(): this {\n        return this.extendQuery({ EnablePhonetic: true });\n    }\n\n    public get bypassResultTypes(): this {\n        return this.extendQuery({ BypassResultTypes: true });\n    }\n\n    public get processBestBets(): this {\n        return this.extendQuery({ ProcessBestBets: true });\n    }\n\n    public get enableQueryRules(): this {\n        return this.extendQuery({ EnableQueryRules: true });\n    }\n\n    public get enableSorting(): this {\n        return this.extendQuery({ EnableSorting: true });\n    }\n\n    public get generateBlockRankLog(): this {\n        return this.extendQuery({ GenerateBlockRankLog: true });\n    }\n\n    public rankingModelId(id: string): this {\n        return this.extendQuery({ RankingModelId: id });\n    }\n\n    public startRow(n: number): this {\n        return this.extendQuery({ StartRow: n });\n    }\n\n    public rowLimit(n: number): this {\n        return this.extendQuery({ RowLimit: n });\n    }\n\n    public rowsPerPage(n: number): this {\n        return this.extendQuery({ RowsPerPage: n });\n    }\n\n    public selectProperties(...properties: string[]): this {\n        return this.extendQuery({ SelectProperties: properties });\n    }\n\n    public culture(culture: number): this {\n        return this.extendQuery({ Culture: culture });\n    }\n\n    public timeZoneId(id: number): this {\n        return this.extendQuery({ TimeZoneId: id });\n    }\n\n    public refinementFilters(...filters: string[]): this {\n        return this.extendQuery({ RefinementFilters: filters });\n    }\n\n    public refiners(refiners: string): this {\n        return this.extendQuery({ Refiners: refiners });\n    }\n\n    public hiddenConstraints(constraints: string): this {\n        return this.extendQuery({ HiddenConstraints: constraints });\n    }\n\n    public sortList(...sorts: Sort[]): this {\n        return this.extendQuery({ SortList: sorts });\n    }\n\n    public timeout(milliseconds: number): this {\n        return this.extendQuery({ Timeout: milliseconds });\n    }\n\n    public hithighlightedProperties(...properties: string[]): this {\n        return this.extendQuery({ HitHighlightedProperties: properties });\n    }\n\n    public clientType(clientType: string): this {\n        return this.extendQuery({ ClientType: clientType });\n    }\n\n    public personalizationData(data: string): this {\n        return this.extendQuery({ PersonalizationData: data });\n    }\n\n    public resultsURL(url: string): this {\n        return this.extendQuery({ ResultsUrl: url });\n    }\n\n    public queryTag(...tags: string[]): this {\n        return this.extendQuery({ QueryTag: tags });\n    }\n\n    public properties(...properties: SearchProperty[]): this {\n        return this.extendQuery({ Properties: properties });\n    }\n\n    public get processPersonalFavorites(): this {\n        return this.extendQuery({ ProcessPersonalFavorites: true });\n    }\n\n    public queryTemplatePropertiesUrl(url: string): this {\n        return this.extendQuery({ QueryTemplatePropertiesUrl: url });\n    }\n\n    public reorderingRules(...rules: ReorderingRule[]): this {\n        return this.extendQuery({ ReorderingRules: rules });\n    }\n\n    public hitHighlightedMultivaluePropertyLimit(limit: number): this {\n        return this.extendQuery({ HitHighlightedMultivaluePropertyLimit: limit });\n    }\n\n    public get enableOrderingHitHighlightedProperty(): this {\n        return this.extendQuery({ EnableOrderingHitHighlightedProperty: true });\n    }\n\n    public collapseSpecification(spec: string): this {\n        return this.extendQuery({ CollapseSpecification: spec });\n    }\n\n    public uiLanguage(lang: number): this {\n        return this.extendQuery({ UILanguage: lang });\n    }\n\n    public desiredSnippetLength(len: number): this {\n        return this.extendQuery({ DesiredSnippetLength: len });\n    }\n\n    public maxSnippetLength(len: number): this {\n        return this.extendQuery({ MaxSnippetLength: len });\n    }\n\n    public summaryLength(len: number): this {\n        return this.extendQuery({ SummaryLength: len });\n    }\n\n    public toSearchQuery(): SearchQuery {\n        return <SearchQuery>this._query;\n    }\n\n    private extendQuery(part: any): this {\n\n        this._query = Util.extend(this._query, part);\n        return this;\n    }\n}\n\n/**\n * Describes the search API\n *\n */\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Search class\n     *\n     * @param baseUrl The url for the search context\n     * @param query The SearchQuery object to execute\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/postquery\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * .......\n     * @returns Promise\n     */\n    public execute(query: SearchQuery): Promise<SearchResults> {\n\n        let formattedBody: any;\n        formattedBody = query;\n\n        if (formattedBody.SelectProperties) {\n            formattedBody.SelectProperties = this.fixupProp(query.SelectProperties);\n        }\n\n        if (formattedBody.RefinementFilters) {\n            formattedBody.RefinementFilters = this.fixupProp(query.RefinementFilters);\n        }\n\n        if (formattedBody.SortList) {\n            formattedBody.SortList = this.fixupProp(query.SortList);\n        }\n\n        if (formattedBody.HithighlightedProperties) {\n            formattedBody.HithighlightedProperties = this.fixupProp(query.HitHighlightedProperties);\n        }\n\n        if (formattedBody.ReorderingRules) {\n            formattedBody.ReorderingRules = this.fixupProp(query.ReorderingRules);\n        }\n\n        if (formattedBody.Properties) {\n            formattedBody.Properties = this.fixupProp(query.Properties);\n        }\n\n        const postBody = JSON.stringify({\n            request: Util.extend({\n                \"__metadata\": { \"type\": \"Microsoft.Office.Server.Search.REST.SearchRequest\" },\n            }, formattedBody),\n        });\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fixes up properties that expect to consist of a \"results\" collection when needed\n     *\n     * @param prop property to fixup for container struct\n     */\n    private fixupProp(prop: any): any {\n\n        if (prop.hasOwnProperty(\"results\")) {\n            return prop;\n        }\n\n        return { results: prop };\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = typeof pageSize !== \"undefined\" ? pageSize : this._query.hasOwnProperty(\"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = Util.extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: false,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string[];\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifeTime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Dictionary<any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface ResultTable {\n\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    Intval?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32TYpe = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/suggest\") {\n        super(baseUrl, path);\n    }\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => new SearchSuggestResult(response));\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        this.query.add(\"querytext\", `'${query.querytext}'`);\n\n        if (query.hasOwnProperty(\"count\")) {\n            this.query.add(\"inumberofquerysuggestions\", query.count.toString());\n        }\n\n        if (query.hasOwnProperty(\"personalCount\")) {\n            this.query.add(\"inumberofresultsuggestions\", query.personalCount.toString());\n        }\n\n        if (query.hasOwnProperty(\"preQuery\")) {\n            this.query.add(\"fprequerysuggestions\", query.preQuery.toString());\n        }\n\n        if (query.hasOwnProperty(\"hitHighlighting\")) {\n            this.query.add(\"fhithighlighting\", query.hitHighlighting.toString());\n        }\n\n        if (query.hasOwnProperty(\"capitalize\")) {\n            this.query.add(\"fcapitalizefirstletters\", query.capitalize.toString());\n        }\n\n        if (query.hasOwnProperty(\"culture\")) {\n            this.query.add(\"culture\", query.culture.toString());\n        }\n\n        if (query.hasOwnProperty(\"stemming\")) {\n            this.query.add(\"enablestemming\", query.stemming.toString());\n        }\n\n        if (query.hasOwnProperty(\"includePeople\")) {\n            this.query.add(\"showpeoplenamesuggestions\", query.includePeople.toString());\n        }\n\n        if (query.hasOwnProperty(\"queryRules\")) {\n            this.query.add(\"enablequeryrules\", query.queryRules.toString());\n        }\n\n        if (query.hasOwnProperty(\"prefixMatch\")) {\n            this.query.add(\"fprefixmatchallterms\", query.prefixMatch.toString());\n        }\n    }\n}\n\nexport class SearchSuggestResult {\n\n    public PeopleNames: string[];\n    public PersonalResults: PersonalResultSuggestion[];\n    public Queries: any[];\n\n    constructor(json: any) {\n        if (json.hasOwnProperty(\"suggest\")) {\n            // verbose\n            this.PeopleNames = json.suggest.PeopleNames.results;\n            this.PersonalResults = json.suggest.PersonalResults.results;\n            this.Queries = json.suggest.Queries.results;\n        } else {\n            this.PeopleNames = json.PeopleNames;\n            this.PersonalResults = json.PersonalResults;\n            this.Queries = json.Queries;\n        }\n    }\n}\n\nexport interface PersonalResultSuggestion {\n    HighlightedTitle?: string;\n    IsBestBet?: boolean;\n    Title?: string;\n    TypeId?: string;\n    Url?: string;\n}\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Util, mergeHeaders } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { HttpClient } from \"./net/httpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { SPBatchParseException } from \"./exceptions\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new HttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = Util.getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = Util.isUrlAbsolute(reqInfo.url) ? reqInfo.url : Util.combinePaths(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (reqInfo.hasOwnProperty(\"options\") && reqInfo.options.hasOwnProperty(\"headers\") && typeof castHeaders[\"X-HTTP-Method\"] !== \"undefined\") {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(Util.combinePaths(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(this._parseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw new SPBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    private _parseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw new SPBatchParseException(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw new SPBatchParseException(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(new SPBatchParseException(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"features\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the feature (GUID)\n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: JSON.stringify({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: JSON.stringify({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.getAs<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/SP.RelatedItemManager\") {\n        super(baseUrl, path);\n    }\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\n\n/**\n * Describes a collection of webs\n *\n */\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Webs class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webs\") {\n        super(baseUrl, webPath);\n    }\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = JSON.stringify({\n            \"parameters\":\n            Util.extend({\n                \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n            }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(spExtractODataId(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\nexport class WebInfos extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the WebInfos class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web infos collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webinfos\") {\n        super(baseUrl, webPath);\n    }\n}\n\n/**\n * Describes a web\n *\n */\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new instance of the Web class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): Webs {\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = JSON.stringify({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.add(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = JSON.stringify({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(spExtractODataId(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(spExtractODataId(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation } from \"./types\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\n\n/**\n * Describes a site collection\n *\n */\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Site class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this site collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/site\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (data.hasOwnProperty(\"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.add(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.add(\"@v\", \"'\" + absolutePageUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => {\n\n            return {\n                data: d,\n                web: Web.fromUrl(spExtractODataId(d)),\n            };\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { HashTagCollection, UserProfile } from \"./types\";\nimport { readBlobAsArrayBuffer } from \"@pnp/common\";\nimport { ODataValue } from \"@pnp/odata\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.profileLoader = new ProfileLoader(baseUrl);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").getAs(ODataValue<string>());\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").getAs(ODataValue<boolean>());\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.add(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.add(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n            readBlobAsArrayBuffer(profilePicSource).then((buffer) => {\n                const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n                request.postCore({\n                    body: String.fromCharCode.apply(null, new Uint16Array(buffer)),\n                }).then(_ => resolve());\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n}\n\nclass ProfileLoader extends SharePointQueryable {\n\n      /**\n     * Creates a new instance of the ProfileLoader class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this profile loader\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.profileloader.getprofileloader\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: JSON.stringify({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postAsCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postAsCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { Util } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n    usingCaching(options?: ICachingOptions): this;\n    inBatch(batch: SPBatch): this;\n    sendEmail(props: EmailProperties): Promise<void>;\n    getCurrentUserEmailAddresses(): Promise<string>;\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n    searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]>;\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n    createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n\n    /**\n     * Creates a new instance of the Utility method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n\n        return this.postAsCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Sends an email based on the supplied properties\n     *\n     * @param props The properties of the email to send\n     */\n    public sendEmail(props: EmailProperties): Promise<void> {\n\n        const params = {\n            properties: {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n                \"__metadata\": { \"type\": \"SP.Utilities.EmailProperties\" },\n            },\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n            params.properties = Util.extend(params.properties, {\n                AdditionalHeaders: props.AdditionalHeaders,\n            });\n        }\n\n        return this.create(\"SendEmail\", true).excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n\n        return this.create(\"GetCurrentUserEmailAddresses\", true).excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<PrincipalInfo> {\n\n        const params = {\n            addToUserInfoList: addToUserInfoList,\n            input: input,\n            inputIsEmailOnly: inputIsEmailOnly,\n            matchUserInfoList: matchUserInfoList,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.create(\"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]> {\n\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.create(\"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        return this.create(\"CreateEmailBodyForInvitation\", true).excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        return this.create(\"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n        return this.create(\"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n            parameters: info,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected create(methodName: string, includeBatch: boolean): UtilityMethod {\n        let clone = new UtilityMethod(this.parentUrl, methodName);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n}\n\nexport interface CreateWikiPageResult {\n    data: any;\n    file: File;\n}\n","import { Search, SearchQuery, SearchResults, SearchQueryBuilder } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { ConfigOptions } from \"@pnp/common\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { SPBatch } from \"./batch\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: ConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return new SearchSuggest(this._baseUrl).configure(this._options).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: string | SearchQuery | SearchQueryBuilder): Promise<SearchResults> {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if (query instanceof SearchQueryBuilder) {\n            finalQuery = (query as SearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = query;\n        }\n\n        return new Search(this._baseUrl).configure(this._options).execute(finalQuery);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return new Site(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return new Web(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return new UserProfileQuery(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return new UtilityMethod(this._baseUrl, \"\").configure(this._options);\n    }\n}\n\nexport const sp = new SPRest();\n"]}