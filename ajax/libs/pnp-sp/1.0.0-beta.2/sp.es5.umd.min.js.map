{"version":3,"sources":["../../../../packages/sp/src/config/splibconfig.ts","../../../../packages/sp/src/utils/toabsoluteurl.ts","../../../../packages/sp/src/utils/extractweburl.ts","../../../../packages/sp/src/odata.ts","../../../../packages/sp/src/net/fetchclient.ts","../../../../packages/sp/src/net/digestcache.ts","../../../../packages/sp/src/exceptions.ts","../../../../packages/sp/src/net/httpclient.ts","../../../../packages/sp/src/sharepointqueryable.ts","../../../../packages/sp/src/search.ts","../../../../packages/sp/src/sitegroups.ts","../../../../packages/sp/src/searchsuggest.ts","../../../../packages/sp/src/siteusers.ts","../../../../packages/sp/src/roles.ts","../../../../packages/sp/src/types.ts","../../../../packages/sp/src/sharepointqueryablesecurable.ts","../../../../packages/sp/src/sharepointqueryableshareable.ts","../../../../packages/sp/src/webparts.ts","../../../../packages/sp/src/contenttypes.ts","../../../../packages/sp/src/attachmentfiles.ts","../../../../packages/sp/src/views.ts","../../../../packages/sp/src/fields.ts","../../../../packages/sp/src/forms.ts","../../../../packages/sp/src/subscriptions.ts","../../../../packages/sp/src/usercustomactions.ts","../../../../packages/sp/src/lists.ts","../../../../packages/sp/src/items.ts","../../../../packages/sp/src/files.ts","../../../../packages/sp/src/folders.ts","../../../../packages/sp/src/navigation.ts","../../../../packages/sp/src/batch.ts","../../../../packages/sp/src/features.ts","../../../../packages/sp/src/relateditems.ts","../../../../packages/sp/src/webs.ts","../../../../packages/sp/src/site.ts","../../../../packages/sp/src/userprofiles.ts","../../../../packages/sp/src/utilities.ts","../../../../packages/sp/index.ts","../../../../packages/sp/src/rest.ts"],"names":["config","RuntimeConfig","extend","toAbsoluteUrl","candidateUrl","Promise","resolve","Util","isUrlAbsolute","SPRuntimeConfig","baseUrl","combinePaths","global","_spPageContextInfo","hasOwnProperty","webAbsoluteUrl","webServerRelativeUrl","location","baseUrl_1","toString","toLowerCase","forEach","s","index","indexOf","substr","spExtractODataId","candidate","__metadata","id","SPODataIdException","spGetEntityUrl","entity","extractWebUrl","uri","Logger","write","LogLevel","Warning","FetchClient","prototype","fetch","url","options","SPRuntimeConfigImpl","Object","defineProperty","spPart","get","headers","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","CachedDigest","digests","Dictionary","DigestCache","_httpClient","_digests","this","getDigest","webUrl","_this","cachedDigest","Date","expiration","value","Accept","Content-Type","fetchRaw","cache","credentials","method","then","response","ODataDefaultParser","parse","d","GetContextWebInformation","data","newCachedDigest","FormDigestValue","seconds","FormDigestTimeoutSeconds","setTime","getTime","add","clear","SPBatchParseException","_super","msg","call","name","log","level","Error","message","__extends","MaxCommentLengthException","NotSupportedInBatchException","operation","APIUrlException","HttpClient","_impl","_digestCache","opts","Headers","mergeHeaders","has","append","toUpperCase","digest","rawHeaders","retry","ctx","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","retryContext","post","patch","delete","SharePointQueryable","path","urlStr","lastIndexOf","_parentUrl","_url","slice","q","_options","target","_query","as","factory","o","toUrlAndQuery","aliasedParams","toUrl","replace","match","labelName","Verbose","merge","count","getKeys","map","key","join","getParent","batch","parentUrl","parent","configure","query","inBatch","clone","additionalPath","includeBatch","hasBatch","toRequestContext","verb","parser","pipeline","PipelineMethods","default","dependencyDispose","addBatchDependency","mergeOptions","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","SharePointQueryableCollection","filter","select","selects","_i","arguments","length","expand","expands","orderBy","ascending","keys","asc","i","push","skip","top","SharePointQueryableInstance","SearchQueryBuilder","queryText","extendQuery","Querytext","create","queryTemplate","text","template","QueryTemplate","sourceId","SourceId","EnableInterleaving","EnableStemming","TrimDuplicates","trimDuplicatesIncludeId","n","TrimDuplicatesIncludeId","EnableNicknames","EnableFQL","EnablePhonetic","BypassResultTypes","ProcessBestBets","EnableQueryRules","EnableSorting","GenerateBlockRankLog","rankingModelId","RankingModelId","startRow","StartRow","rowLimit","RowLimit","rowsPerPage","RowsPerPage","selectProperties","properties","SelectProperties","culture","Culture","timeZoneId","TimeZoneId","refinementFilters","filters","RefinementFilters","refiners","Refiners","hiddenConstraints","constraints","HiddenConstraints","sortList","sorts","SortList","timeout","milliseconds","Timeout","hithighlightedProperties","HitHighlightedProperties","clientType","ClientType","personalizationData","PersonalizationData","resultsURL","ResultsUrl","queryTag","tags","QueryTag","Properties","ProcessPersonalFavorites","queryTemplatePropertiesUrl","QueryTemplatePropertiesUrl","reorderingRules","rules","ReorderingRules","hitHighlightedMultivaluePropertyLimit","limit","HitHighlightedMultivaluePropertyLimit","EnableOrderingHitHighlightedProperty","collapseSpecification","spec","CollapseSpecification","uiLanguage","lang","UILanguage","desiredSnippetLength","len","DesiredSnippetLength","maxSnippetLength","MaxSnippetLength","summaryLength","SummaryLength","toSearchQuery","part","Search","execute","formattedBody","fixupProp","HithighlightedProperties","postBody","JSON","stringify","request","type","postCore","body","SearchResults","prop","results","rawResponse","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","rawResults","Array","tempResults_1","tempResult","cells","Cells","reduce","res","cell","Key","configurable","enumerable","Value","writable","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","PrincipalType","SearchBuiltInSourceId","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","SearchSuggest","mapQueryToQueryString","SearchSuggestResult","querytext","personalCount","preQuery","hitHighlighting","capitalize","stemming","includePeople","queryRules","prefixMatch","json","PeopleNames","suggest","PersonalResults","Queries","SPODataEntityParserImpl","r","ODataParserBase","SPODataEntityArrayParserImpl","v","SiteUsers","getByEmail","email","SiteUser","getById","getByLoginName","loginName","su","concat","encodeURIComponent","removeById","removeByLoginName","LoginName","SiteGroups","update","X-HTTP-Method","user","CurrentUser","group","Id","getByName","groupName","SiteGroup","sg","retGroup","RoleAssignments","principalId","roleDefId","remove","ra","RoleAssignment","RoleDefinitionBindings","RoleDefinitions","RoleDefinition","getByType","roleTypeKind","description","order","basePermissions","BasePermissions","Description","Name","Order","definition","retDef","ControlMode","FieldTypes","DateTimeFieldFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","PrincipalSource","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","SharePointQueryableSecurable","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","Web","fromUrl","currentUser","getAs","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","num","SharePointQueryableShareable","getShareLink","kind","expString","toISOString","postAsCore","createLink","emailData","settings","linkKind","shareWith","loginNames","role","requireSignin","propagateAcl","isArray","userStr","login","roleFilter","Edit","Contributor","Reader","roleDefinitions","def","includeAnonymousLinkInEmail","peoplePickerInput","roleValue","useSimplifiedRoles","emailBody","emailSubject","subject","sendEmail","shareObject","bypass","sendShareObjectRequest","getRoleValue","unshareObjectWeb","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","associatedMemberGroup","g","Guest","associatedVisitorGroup","getShareObjectWeb","SharePointQueryableShareableWeb","View","dependency","shareObjectRaw","SharePointQueryableShareableItem","OrganizationView","checkSharingPermissions","unshare","deleteSharingLinkByKind","FileFolderShared","getShareable","shareable","SharePointQueryableShareableFile","SharePointQueryableShareableFolder","shareEverything","LimitedWebPartManager","WebPartDefinitions","export","webPartId","import","xml","webPartXml","WebPartDefinition","getByControlId","WebPart","saveChanges","moveTo","zoneId","zoneIndex","close","open","ContentTypes","ct","ContentType","addAvailableContentType","contentTypeId","contentType","additionalSettings","Group","StringValue","FieldLinks","fl","FieldLink","AttachmentFiles","f","AttachmentFile","content","file","addMultiple","files","chain","getText","TextFileParser","getBlob","BlobFileParser","getBuffer","BufferFileParser","getJSON","JSONFileParser","setContent","_","eTag","IF-Match","Views","getByTitle","title","personalView","PersonalView","Title","view","ViewFields","renderAsHtml","getSchemaXml","fieldTitleOrInternalName","move","fieldInternalName","field","removeAll","Fields","Field","getByInternalNameOrTitle","createFieldAsXml","info","SchemaXml","parameters","fieldType","addText","maxLength","props","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","Forms","Form","Subscriptions","subscriptionId","subscription","Subscription","notificationUrl","expirationDate","clientState","expirationDateTime","resource","result","patchCore","deleteCore","UserCustomActions","uca","UserCustomAction","action","Lists","List","list","enableContentTypes","addSettings","AllowContentTypes","BaseTemplate","ContentTypesEnabled","ensure","addOrUpdateSettings","created","e","ensureSiteAssetsLibrary","ensureSitePagesLibrary","Items","Folder","getView","viewId","retList","getChanges","getItemsByCAMLQuery","apply","getListItemChangesSinceToken","recycle","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","overrideParameters","renderListFormData","itemId","formId","mode","ListData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","Item","getPaged","PagedItemCollectionParser","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","promise","item","candidatelistItemEntityTypeFullName","File","ItemUpdatedParser","getWopiFrameUrl","GetWOPIFrameUrl","validateUpdateListItem","formValues","newDocumentUpdate","bNewDocumentUpdate","PagedItemCollection","nextUrl","getNext","hasNext","handleError","__next","parseODataJSON","odata.etag","Files","shouldOverWrite","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","CheckinType","Major","checkout","copyTo","deny","getLimitedWebPartManager","scope","WebPartsPersonalizationScope","Shared","moveOperations","MoveOperations","Overwrite","publish","undoCheckout","unpublish","binaryStringResponseBody","getItem","listItemAllFields","self","fileSize","size","blockCount","parseInt","blockNumber","currentPointer","stage","totalBlocks","startUpload","pointer","continueUpload","finishUpload","fragment","parseFloat","fileOffset","ServerRelativeUrl","versionId","Version","deleteAll","deleteById","deleteByLabel","label","restoreByLabel","TemplateFileType","Folders","folder","NavigationNodes","node","NavigationNode","visible","IsVisible","Url","moveAfter","nodeId","previousNodeId","Navigation","SPBatch","executeImpl","batchId","requests","Info","client","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","set","batchOptions","_parseResponse","responses","statusText","statusRegExp","RegExp","lines","split","state","line","trim","parts","exec","Response","ODataBatch","Features","feature","Feature","force","featdefScope","featureId","deactivate","DefinitionId","RelatedItemManagerImpl","FromUrl","getRelatedItems","sourceListName","sourceItemId","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","Webs","webPath","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","WebTemplate","WebInfos","createBatch","getFolderByServerRelativeUrl","folderRelativeUrl","getFileByServerRelativeUrl","fileRelativeUrl","getList","listRelativeUrl","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","ensureUser","logonName","availableWebTemplates","includeCrossLanugage","getCatalog","getUserById","mapToIcon","filename","progId","Site","getContextInfo","SupportedSchemaVersions","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","openWebById","webId","UserProfileQuery","profileLoader","ProfileLoader","ODataValue","amIFollowedBy","amIFollowing","getFollowedTags","maxCount","getFollowersFor","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","readBlobAsArrayBuffer","buffer","String","fromCharCode","Uint16Array","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","emailIDs","UtilityMethod","methodName","getBaseUrl","excute","params","Body","From","Subject","To","CC","BCC","AdditionalHeaders","getCurrentUserEmailAddresses","resolvePrincipal","input","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","sp","SPRest","_baseUrl","setup","_setup","searchSuggest","finalQuery","search","crossDomainSite","addInWebUrl","hostWebUrl","_cdImpl","crossDomainWeb","urlPart","UrlException","instance"],"mappings":"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","sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig } from \"@pnp/common\";\r\nimport { HttpClientImpl } from \"../net/httpclient\";\r\nimport { FetchClient } from \"../net/fetchclient\";\r\n\r\nexport interface SPConfigurationPart {\r\n    sp?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: TypedHash<string>;\r\n\r\n        /**\r\n         * The base url used for all requests\r\n         */\r\n        baseUrl?: string;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => HttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\r\n\r\nexport function setup(config: SPConfiguration): void {\r\n    RuntimeConfig.extend(config);\r\n}\r\n\r\nexport class SPRuntimeConfigImpl {\r\n\r\n    public get headers(): TypedHash<string> {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (typeof spPart !== \"undefined\" && typeof spPart.headers !== \"undefined\") {\r\n            return spPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get baseUrl(): string | null {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== null && typeof spPart.baseUrl !== \"undefined\") {\r\n            return spPart.baseUrl;\r\n        }\r\n\r\n        if (RuntimeConfig.spfxContext !== null) {\r\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get fetchClientFactory(): () => HttpClientImpl {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        // use a configured factory firt\r\n        if (spPart !== null && typeof spPart.fetchClientFactory !== \"undefined\") {\r\n            return spPart.fetchClientFactory;\r\n        } else {\r\n            return () => new FetchClient();\r\n        }\r\n    }\r\n}\r\n\r\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\r\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\r\nimport { Util } from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\r\n\r\n/**\r\n * Ensures that a given url is absolute for the current web based on context\r\n *\r\n * @param candidateUrl The url to make absolute\r\n *\r\n */\r\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n        if (Util.isUrlAbsolute(candidateUrl)) {\r\n            // if we are already absolute, then just return the url\r\n            return resolve(candidateUrl);\r\n        }\r\n\r\n        if (SPRuntimeConfig.baseUrl !== null) {\r\n            // base url specified either with baseUrl of spfxContext config property\r\n            return resolve(Util.combinePaths(SPRuntimeConfig.baseUrl, candidateUrl));\r\n        }\r\n\r\n        if (typeof global._spPageContextInfo !== \"undefined\") {\r\n\r\n            // operating in classic pages\r\n            if (global._spPageContextInfo.hasOwnProperty(\"webAbsoluteUrl\")) {\r\n                return resolve(Util.combinePaths(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\r\n            } else if (global._spPageContextInfo.hasOwnProperty(\"webServerRelativeUrl\")) {\r\n                return resolve(Util.combinePaths(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\r\n            }\r\n        }\r\n\r\n        // does window.location exist and have a certain path part in it?\r\n        if (typeof global.location !== \"undefined\") {\r\n            const baseUrl = global.location.toString().toLowerCase();\r\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\r\n                const index = baseUrl.indexOf(s);\r\n                if (index > 0) {\r\n                    return resolve(Util.combinePaths(baseUrl.substr(0, index), candidateUrl));\r\n                }\r\n            });\r\n        }\r\n\r\n        return resolve(candidateUrl);\r\n    });\r\n}\r\n","export function extractWebUrl(candidateUrl: string) {\r\n\r\n    if (candidateUrl === null) {\r\n        return \"\";\r\n    }\r\n\r\n    const index = candidateUrl.indexOf(\"_api/\");\r\n\r\n    if (index > -1) {\r\n        return candidateUrl.substr(0, index);\r\n    }\r\n\r\n    // if all else fails just give them what they gave us back\r\n    return candidateUrl;\r\n}\r\n","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { Util } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPODataIdException } from \"./exceptions\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\n\nexport function spExtractODataId(candidate: any): string {\n\n    if (candidate.hasOwnProperty(\"odata.id\")) {\n        return candidate[\"odata.id\"];\n    } else if (candidate.hasOwnProperty(\"__metadata\") && candidate.__metadata.hasOwnProperty(\"id\")) {\n        return candidate.__metadata.id;\n    } else {\n        throw new SPODataIdException(candidate);\n    }\n}\n\nclass SPODataEntityParserImpl<T> extends ODataParserBase<T> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public parse(r: Response): Promise<T> {\n        return super.parse(r).then(d => {\n            const o = <T>new this.factory(spGetEntityUrl(d), null);\n            return Util.extend(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T> extends ODataParserBase<T[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public parse(r: Response): Promise<T[]> {\n        return super.parse(r).then((d: any[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(spGetEntityUrl(v), null);\n                return Util.extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spGetEntityUrl(entity: any): string {\n\n    if (entity.hasOwnProperty(\"odata.metadata\") && entity.hasOwnProperty(\"odata.editLink\")) {\n        // we are dealign with minimal metadata (default)\n        return Util.combinePaths(extractWebUrl(entity[\"odata.metadata\"]), \"_api\", entity[\"odata.editLink\"]);\n    } else if (entity.hasOwnProperty(\"__metadata\")) {\n        // we are dealing with verbose, which has an absolute uri\n        return entity.__metadata.uri;\n    } else {\n        // we are likely dealing with nometadata, so don't error but we won't be able to\n        // chain off these objects\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n}\n\nexport function spODataEntity<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T> {\n    return new SPODataEntityParserImpl(factory);\n}\n\nexport function spODataEntityArray<T>(factory: SharePointQueryableConstructor<T>): ODataParser<T[]> {\n    return new SPODataEntityArrayParserImpl(factory);\n}\n","import { HttpClientImpl } from \"./httpclient\";\r\n\r\ndeclare var global: any;\r\n\r\n/**\r\n * Makes requests using the fetch API\r\n */\r\nexport class FetchClient implements HttpClientImpl {\r\n    public fetch(url: string, options: any): Promise<Response> {\r\n        return global.fetch(url, options);\r\n    }\r\n}\r\n","import { HttpClient } from \"./httpclient\";\nimport { Util, Dictionary } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Dictionary<CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: HttpClient, private _digests: Dictionary<CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== null) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = Util.combinePaths(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: Util.extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.add(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n\n","import { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport class SPBatchParseException extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        this.name = \"BatchParseException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class SPODataIdException extends Error {\r\n\r\n    constructor(data: any, msg = \"Could not extract odata id in object, you may be using nometadata. Object data logged to logger.\") {\r\n        super(msg);\r\n        this.name = \"ODataIdException\";\r\n        Logger.log({ data: data, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class MaxCommentLengthException extends Error {\r\n\r\n    constructor(msg = \"The maximum comment length is 1023 characters.\") {\r\n        super(msg);\r\n        this.name = \"MaxCommentLengthException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class NotSupportedInBatchException extends Error {\r\n\r\n    constructor(operation = \"This operation\") {\r\n        super(`${operation} is not supported as part of a batch.`);\r\n        this.name = \"NotSupportedInBatchException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\nexport class APIUrlException extends Error {\r\n\r\n    constructor(msg = \"Unable to determine API url.\") {\r\n        super(msg);\r\n        this.name = \"APIUrlException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n\r\n","import { DigestCache } from \"./digestcache\";\nimport { Util, mergeHeaders, FetchOptions, RequestClient } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { APIUrlException } from \"../exceptions\";\n\nexport interface HttpClientImpl {\n    fetch(url: string, options: FetchOptions): Promise<Response>;\n}\n\nexport class HttpClient implements RequestClient {\n\n    private _digestCache: DigestCache;\n    private _impl: HttpClientImpl;\n\n    constructor() {\n        this._impl = SPRuntimeConfig.fetchClientFactory();\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = Util.extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        opts = Util.extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                const index = url.indexOf(\"_api/\");\n                if (index < 0) {\n                    throw new APIUrlException();\n                }\n                const webUrl = url.substr(0, index);\n                return this._digestCache.getDigest(webUrl)\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = Util.extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(Util.getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = Util.extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: {} | PromiseLike<{}>) => void;\n    retryCount: number;\n}\n","import {\n    Util,\n    Dictionary,\n    FetchOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n    PipelineMethods,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { HttpClient } from \"./net/httpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable extends ODataQueryable<SPBatch> {\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            const urlStr = baseUrl as string;\n            if (Util.isUrlAbsolute(urlStr) || urlStr.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = urlStr;\n                this._url = Util.combinePaths(urlStr, path);\n            } else if (urlStr.lastIndexOf(\"/\") > urlStr.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = urlStr.lastIndexOf(\"/\");\n                this._parentUrl = urlStr.slice(0, index);\n                path = Util.combinePaths(urlStr.slice(index), path);\n                this._url = Util.combinePaths(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = urlStr.lastIndexOf(\"(\");\n                this._parentUrl = urlStr.slice(0, index);\n                this._url = Util.combinePaths(urlStr, path);\n            }\n        } else {\n            const q = baseUrl as SharePointQueryable;\n            this._parentUrl = q._url;\n            this._options = q._options;\n            const target = q._query.get(\"@target\");\n            if (target !== null) {\n                this._query.add(\"@target\", target);\n            }\n            this._url = Util.combinePaths(this._parentUrl, path);\n        }\n    }\n\n    /**\n         * Creates a new instance of the supplied factory and extends this into that new instance\n         *\n         * @param factory constructor for the new SharePointQueryable\n         */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return Util.extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Dictionary<string>();\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.add(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        // inlude our explicitly set query string params\n        aliasedParams.merge(this._query);\n\n        if (aliasedParams.count() > 0) {\n            url += `?${aliasedParams.getKeys().map(key => `${key}=${aliasedParams.get(key)}`).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path);\n        parent.configure(this._options);\n\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            parent.query.add(\"@target\", target);\n        }\n        if (typeof batch !== \"undefined\") {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n        let clone = new factory(this, additionalPath);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>> = PipelineMethods.default): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this.addBatchDependency() : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new HttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._useCaching,\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: Util.getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection extends SharePointQueryable {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this._query.add(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields ascending\n     *\n     * @param orderby The name of the field to sort on\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const keys = this._query.getKeys();\n        const query: string[] = [];\n        const asc = ascending ? \" asc\" : \" desc\";\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === \"$orderby\") {\n                query.push(this._query.get(\"$orderby\"));\n                break;\n            }\n        }\n        query.push(`${orderBy}${asc}`);\n\n        this._query.add(\"$orderby\", query.join(\",\"));\n\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this._query.add(\"$top\", top.toString());\n        return this;\n    }\n}\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance extends SharePointQueryable {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this._query.add(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this._query.add(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, Dictionary } from \"@pnp/common\";\n\n/**\n * Allows for the fluent construction of search queries\n */\nexport class SearchQueryBuilder {\n\n    constructor(queryText = \"\", private _query = {}) {\n\n        if (typeof queryText === \"string\" && queryText.length > 0) {\n\n            this.extendQuery({ Querytext: queryText });\n        }\n    }\n\n    public static create(queryText = \"\", queryTemplate: SearchQuery = {}): SearchQueryBuilder {\n        return new SearchQueryBuilder(queryText, queryTemplate);\n    }\n\n    public text(queryText: string): this {\n        return this.extendQuery({ Querytext: queryText });\n    }\n\n    public template(template: string): this {\n        return this.extendQuery({ QueryTemplate: template });\n    }\n\n    public sourceId(id: string): this {\n        return this.extendQuery({ SourceId: id });\n    }\n\n    public get enableInterleaving(): this {\n        return this.extendQuery({ EnableInterleaving: true });\n    }\n\n    public get enableStemming(): this {\n        return this.extendQuery({ EnableStemming: true });\n    }\n\n    public get trimDuplicates(): this {\n        return this.extendQuery({ TrimDuplicates: true });\n    }\n\n    public trimDuplicatesIncludeId(n: number): this {\n        return this.extendQuery({ TrimDuplicatesIncludeId: n });\n    }\n\n    public get enableNicknames(): this {\n        return this.extendQuery({ EnableNicknames: true });\n    }\n\n    public get enableFql(): this {\n        return this.extendQuery({ EnableFQL: true });\n    }\n\n    public get enablePhonetic(): this {\n        return this.extendQuery({ EnablePhonetic: true });\n    }\n\n    public get bypassResultTypes(): this {\n        return this.extendQuery({ BypassResultTypes: true });\n    }\n\n    public get processBestBets(): this {\n        return this.extendQuery({ ProcessBestBets: true });\n    }\n\n    public get enableQueryRules(): this {\n        return this.extendQuery({ EnableQueryRules: true });\n    }\n\n    public get enableSorting(): this {\n        return this.extendQuery({ EnableSorting: true });\n    }\n\n    public get generateBlockRankLog(): this {\n        return this.extendQuery({ GenerateBlockRankLog: true });\n    }\n\n    public rankingModelId(id: string): this {\n        return this.extendQuery({ RankingModelId: id });\n    }\n\n    public startRow(n: number): this {\n        return this.extendQuery({ StartRow: n });\n    }\n\n    public rowLimit(n: number): this {\n        return this.extendQuery({ RowLimit: n });\n    }\n\n    public rowsPerPage(n: number): this {\n        return this.extendQuery({ RowsPerPage: n });\n    }\n\n    public selectProperties(...properties: string[]): this {\n        return this.extendQuery({ SelectProperties: properties });\n    }\n\n    public culture(culture: number): this {\n        return this.extendQuery({ Culture: culture });\n    }\n\n    public timeZoneId(id: number): this {\n        return this.extendQuery({ TimeZoneId: id });\n    }\n\n    public refinementFilters(...filters: string[]): this {\n        return this.extendQuery({ RefinementFilters: filters });\n    }\n\n    public refiners(refiners: string): this {\n        return this.extendQuery({ Refiners: refiners });\n    }\n\n    public hiddenConstraints(constraints: string): this {\n        return this.extendQuery({ HiddenConstraints: constraints });\n    }\n\n    public sortList(...sorts: Sort[]): this {\n        return this.extendQuery({ SortList: sorts });\n    }\n\n    public timeout(milliseconds: number): this {\n        return this.extendQuery({ Timeout: milliseconds });\n    }\n\n    public hithighlightedProperties(...properties: string[]): this {\n        return this.extendQuery({ HitHighlightedProperties: properties });\n    }\n\n    public clientType(clientType: string): this {\n        return this.extendQuery({ ClientType: clientType });\n    }\n\n    public personalizationData(data: string): this {\n        return this.extendQuery({ PersonalizationData: data });\n    }\n\n    public resultsURL(url: string): this {\n        return this.extendQuery({ ResultsUrl: url });\n    }\n\n    public queryTag(...tags: string[]): this {\n        return this.extendQuery({ QueryTag: tags });\n    }\n\n    public properties(...properties: SearchProperty[]): this {\n        return this.extendQuery({ Properties: properties });\n    }\n\n    public get processPersonalFavorites(): this {\n        return this.extendQuery({ ProcessPersonalFavorites: true });\n    }\n\n    public queryTemplatePropertiesUrl(url: string): this {\n        return this.extendQuery({ QueryTemplatePropertiesUrl: url });\n    }\n\n    public reorderingRules(...rules: ReorderingRule[]): this {\n        return this.extendQuery({ ReorderingRules: rules });\n    }\n\n    public hitHighlightedMultivaluePropertyLimit(limit: number): this {\n        return this.extendQuery({ HitHighlightedMultivaluePropertyLimit: limit });\n    }\n\n    public get enableOrderingHitHighlightedProperty(): this {\n        return this.extendQuery({ EnableOrderingHitHighlightedProperty: true });\n    }\n\n    public collapseSpecification(spec: string): this {\n        return this.extendQuery({ CollapseSpecification: spec });\n    }\n\n    public uiLanguage(lang: number): this {\n        return this.extendQuery({ UILanguage: lang });\n    }\n\n    public desiredSnippetLength(len: number): this {\n        return this.extendQuery({ DesiredSnippetLength: len });\n    }\n\n    public maxSnippetLength(len: number): this {\n        return this.extendQuery({ MaxSnippetLength: len });\n    }\n\n    public summaryLength(len: number): this {\n        return this.extendQuery({ SummaryLength: len });\n    }\n\n    public toSearchQuery(): SearchQuery {\n        return <SearchQuery>this._query;\n    }\n\n    private extendQuery(part: any): this {\n\n        this._query = Util.extend(this._query, part);\n        return this;\n    }\n}\n\n/**\n * Describes the search API\n *\n */\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Search class\n     *\n     * @param baseUrl The url for the search context\n     * @param query The SearchQuery object to execute\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/postquery\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * .......\n     * @returns Promise\n     */\n    public execute(query: SearchQuery): Promise<SearchResults> {\n\n        let formattedBody: any;\n        formattedBody = query;\n\n        if (formattedBody.SelectProperties) {\n            formattedBody.SelectProperties = this.fixupProp(query.SelectProperties);\n        }\n\n        if (formattedBody.RefinementFilters) {\n            formattedBody.RefinementFilters = this.fixupProp(query.RefinementFilters);\n        }\n\n        if (formattedBody.SortList) {\n            formattedBody.SortList = this.fixupProp(query.SortList);\n        }\n\n        if (formattedBody.HithighlightedProperties) {\n            formattedBody.HithighlightedProperties = this.fixupProp(query.HitHighlightedProperties);\n        }\n\n        if (formattedBody.ReorderingRules) {\n            formattedBody.ReorderingRules = this.fixupProp(query.ReorderingRules);\n        }\n\n        if (formattedBody.Properties) {\n            formattedBody.Properties = this.fixupProp(query.Properties);\n        }\n\n        const postBody = JSON.stringify({\n            request: Util.extend({\n                \"__metadata\": { \"type\": \"Microsoft.Office.Server.Search.REST.SearchRequest\" },\n            }, formattedBody),\n        });\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fixes up properties that expect to consist of a \"results\" collection when needed\n     *\n     * @param prop property to fixup for container struct\n     */\n    private fixupProp(prop: any): any {\n\n        if (prop.hasOwnProperty(\"results\")) {\n            return prop;\n        }\n\n        return { results: prop };\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = typeof pageSize !== \"undefined\" ? pageSize : this._query.hasOwnProperty(\"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = Util.extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: false,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string[];\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifeTime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Dictionary<any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface ResultTable {\n\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    Intval?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32TYpe = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n\n/**\n * Describes a collection of site groups\n *\n */\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteGroups class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this group collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"sitegroups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = JSON.stringify(Util.extend(\n            { \"__metadata\": { \"type\": \"SP.Group\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Gets a group from the collection by id\n     *\n     * @param id The id of the group to retrieve\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    /**\n    * Updates this group instance with the supplied properties\n    *\n    * @param properties A GroupWriteableProperties object of property names and values to update for the group\n    */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<GroupUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.Group\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retGroup: SiteGroup = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                group: retGroup,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/search/suggest\") {\n        super(baseUrl, path);\n    }\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => new SearchSuggestResult(response));\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        this.query.add(\"querytext\", `'${query.querytext}'`);\n\n        if (query.hasOwnProperty(\"count\")) {\n            this.query.add(\"inumberofquerysuggestions\", query.count.toString());\n        }\n\n        if (query.hasOwnProperty(\"personalCount\")) {\n            this.query.add(\"inumberofresultsuggestions\", query.personalCount.toString());\n        }\n\n        if (query.hasOwnProperty(\"preQuery\")) {\n            this.query.add(\"fprequerysuggestions\", query.preQuery.toString());\n        }\n\n        if (query.hasOwnProperty(\"hitHighlighting\")) {\n            this.query.add(\"fhithighlighting\", query.hitHighlighting.toString());\n        }\n\n        if (query.hasOwnProperty(\"capitalize\")) {\n            this.query.add(\"fcapitalizefirstletters\", query.capitalize.toString());\n        }\n\n        if (query.hasOwnProperty(\"culture\")) {\n            this.query.add(\"culture\", query.culture.toString());\n        }\n\n        if (query.hasOwnProperty(\"stemming\")) {\n            this.query.add(\"enablestemming\", query.stemming.toString());\n        }\n\n        if (query.hasOwnProperty(\"includePeople\")) {\n            this.query.add(\"showpeoplenamesuggestions\", query.includePeople.toString());\n        }\n\n        if (query.hasOwnProperty(\"queryRules\")) {\n            this.query.add(\"enablequeryrules\", query.queryRules.toString());\n        }\n\n        if (query.hasOwnProperty(\"prefixMatch\")) {\n            this.query.add(\"fprefixmatchallterms\", query.prefixMatch.toString());\n        }\n    }\n}\n\nexport class SearchSuggestResult {\n\n    public PeopleNames: string[];\n    public PersonalResults: PersonalResultSuggestion[];\n    public Queries: any[];\n\n    constructor(json: any) {\n        if (json.hasOwnProperty(\"suggest\")) {\n            // verbose\n            this.PeopleNames = json.suggest.PeopleNames.results;\n            this.PersonalResults = json.suggest.PersonalResults.results;\n            this.Queries = json.suggest.Queries.results;\n        } else {\n            this.PeopleNames = json.PeopleNames;\n            this.PersonalResults = json.PersonalResults;\n            this.Queries = json.Queries;\n        }\n    }\n}\n\nexport interface PersonalResultSuggestion {\n    HighlightedTitle?: string;\n    IsBestBet?: boolean;\n    Title?: string;\n    TypeId?: string;\n    Url?: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the SiteUsers class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"siteusers\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(\"(@v)\");\n        su.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: JSON.stringify({ \"__metadata\": { \"type\": \"SP.User\" }, LoginName: loginName }),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update(properties: TypedHash<any>): Promise<UserUpdateResult> {\n\n        const postBody = Util.extend({ \"__metadata\": { \"type\": \"SP.User\" } }, properties);\n\n        return this.postCore({\n            body: JSON.stringify(postBody),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                user: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Represents the current user\n */\nexport class CurrentUser extends SharePointQueryableInstance {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"currentuser\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleAssignments class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role assignments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roleassignments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Gets the role assignment associated with the specified principal id from the collection.\n     *\n     * @param id The id of the role assignment\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definitions collection\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the role definition with the specified id from the collection\n     *\n     * @param id The id of the role definition\n     *\n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = JSON.stringify({\n            BasePermissions: Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        if (typeof properties.hasOwnProperty(\"BasePermissions\") !== \"undefined\") {\n            properties[\"BasePermissions\"] = Util.extend({ __metadata: { type: \"SP.BasePermissions\" } }, properties[\"BasePermissions\"]);\n        }\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.RoleDefinition\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (properties.hasOwnProperty(\"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\nexport class RoleDefinitionBindings extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the RoleDefinitionBindings class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this role definition bindings collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"roledefinitionbindings\") {\n        super(baseUrl, path);\n    }\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\nexport enum PrincipalSource {\n    None = 0,\n    UserInfoList = 1,\n    Windows = 2,\n    MembershipProvider = 4,\n    RoleProvider = 8,\n    All = 15,\n}\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n}\n\nexport interface RenderListDataParameters {\n    ViewXml?: string;\n    Paging?: string;\n    FolderServerRelativeUrl?: string;\n    RenderOptions?: RenderListDataOptions;\n}\n","import { Web } from \"./webs\";\nimport { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.add(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get().then(r => {\n            // handle verbose mode\n            return r.hasOwnProperty(\"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n\n        const w = Web.fromUrl(this.toUrl());\n        return w.currentUser.select(\"LoginName\").getAs<{ LoginName: string }>().then(user => {\n\n            return this.getUserEffectivePermissions(user.LoginName);\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n","import { Util } from \"@pnp/common\";\nimport { Web } from \"./webs\";\nimport { spGetEntityUrl } from \"./odata\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postAsCore<ShareLinkResponse>({\n            body: JSON.stringify({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = JSON.stringify(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        return Web.fromUrl(this.toUrl()).roleDefinitions.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw new Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (typeof emailData !== \"undefined\") {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: typeof emailData.subject !== \"undefined\" ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postAsCore<SharingResult>({\n                body: JSON.stringify(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = Util.extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = JSON.stringify(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (typeof options.emailData !== \"undefined\" && options.emailData !== null) {\n\n                postBody = Util.extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: typeof options.emailData.subject !== \"undefined\" ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postAsCore<SharingResult>({\n            body: JSON.stringify({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postAsCore<SharingEntityPermission[]>({\n            body: JSON.stringify({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, \"getSharingInformation\").postAsCore<SharingInformation>({\n            body: JSON.stringify({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postAsCore<ObjectSharingSettings>({\n            body: JSON.stringify({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postAsCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: JSON.stringify({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: JSON.stringify({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (typeof group !== \"undefined\" && group !== null) {\n\n            switch (group) {\n                case RoleType.Contributor:\n                    return Web.fromUrl(this.toUrl()).associatedMemberGroup.select(\"Id\").getAs<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    return Web.fromUrl(this.toUrl()).associatedVisitorGroup.select(\"Id\").getAs<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw new Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            return Web.fromUrl(this.toUrl()).roleDefinitions.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).getAs<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw new Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<Web> {\n        return Promise.resolve(Web.fromUrl(candidate, \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: JSON.stringify(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return Web.fromUrl(this.toUrl(), \"/_api/web/url\").get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(Util.combinePaths(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     */\n    public getSharingInformation(request: SharingInformationRequest = null): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.editlink\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(spGetEntityUrl(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: JSON.stringify({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: JSON.stringify({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\nexport class WebPart extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the WebPart class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     * @param path Optional, if supplied will be appended to the supplied baseUrl\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"webpart\") {\n        super(baseUrl, path);\n    }\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of content types\n *\n */\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentTypes class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content types collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"contenttypes\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a ContentType by content type id\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = JSON.stringify({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postAsCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n            \"__metadata\": { \"type\": \"SP.ContentType\" },\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\nexport class FieldLinks extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the ContentType class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this content type instance\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fieldlinks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a FieldLink by GUID id\n     *\n     * @param id The GUID id of the field link\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { TextFileParser, BlobFileParser, JSONFileParser, BufferFileParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the AttachmentFiles class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this attachments collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"AttachmentFiles\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds mjultiple new attachment to the collection. Not supported for batching.\n     *\n     * @files name The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new TextFileParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new BlobFileParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new BufferFileParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(AttachmentFile, \"$value\", false).get(new JSONFileParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes the views available in the current context\n *\n */\nexport class Views extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Views class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"views\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a view by guid id\n     *\n     * @param id The GUID id of the view\n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"PersonalView\": personalView,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, additionalSettings));\n\n        return this.clone(Views, null).postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update(properties: TypedHash<any>): Promise<ViewUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.View\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                view: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n}\n\nexport class ViewFields extends SharePointQueryableCollection {\n    constructor(baseUrl: string | SharePointQueryable, path = \"viewfields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: JSON.stringify({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n} from \"./types\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"fields\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param title The Id of the list\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = JSON.stringify({\n            \"parameters\":\n            Util.extend({\n                \"__metadata\":\n                {\n                    \"type\": \"SP.XmlSchemaFieldCreationInformation\",\n                },\n            }, info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: TypedHash<string | number | boolean> = {}): Promise<FieldAddResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"Title\": title,\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.clone(Fields, null).postAsCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n                DateFormat: dateFormat,\n                FieldTypeKind: 17,\n                Formula: formula,\n                OutputType: outputType,\n            };\n\n        return this.add(title, \"SP.FieldCalculated\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat = 0,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            DateTimeCalendarType: CalendarType;\n            DisplayFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            FriendlyDisplayFormat: number;\n        } = {\n                DateTimeCalendarType: calendarType,\n                DisplayFormat: displayFormat,\n                FieldTypeKind: 4,\n                FriendlyDisplayFormat: friendlyDisplayFormat,\n            };\n\n        return this.add(title, \"SP.FieldDateTime\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (typeof minValue !== \"undefined\") {\n            props = Util.extend({ MinimumValue: minValue }, props);\n        }\n\n        if (typeof maxValue !== \"undefined\") {\n            props = Util.extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: TypedHash<string | number | boolean>): Promise<FieldAddResult> {\n\n        const props: {\n            AllowHyperlink: boolean;\n            AppendOnly: boolean;\n            FieldTypeKind: number;\n            NumberOfLines: number;\n            RestrictedMode: boolean;\n            RichText: boolean;\n        } = {\n                AllowHyperlink: allowHyperlink,\n                AppendOnly: appendOnly,\n                FieldTypeKind: 3,\n                NumberOfLines: numberOfLines,\n                RestrictedMode: restrictedMode,\n                RichText: richText,\n            };\n\n        return this.add(title, \"SP.FieldMultiLineText\", Util.extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: TypedHash<string | number | boolean>,\n    ): Promise<FieldAddResult> {\n\n        const props: { DisplayFormat: UrlFieldFormatType; FieldTypeKind: number } = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", Util.extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": fieldType },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Forms extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Fields class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"forms\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a form by id\n     *\n     * @param id The guid id of the item to retrieve\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Subscriptions class\n     *\n     * @param baseUrl - The url or SharePointQueryable which forms the parent of this webhook subscriptions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"subscriptions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const subscription = new Subscription(this);\n        subscription.concat(`('${subscriptionId}')`);\n        return subscription;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (defaults to pnp-js-core-subscription when omitted)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody = JSON.stringify({\n            \"clientState\": clientState || \"pnp-js-core-subscription\",\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        });\n\n        return this.postCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     */\n    public update(expirationDate: string): Promise<SubscriptionUpdateResult> {\n\n        const postBody = JSON.stringify({\n            \"expirationDateTime\": expirationDate,\n        });\n\n        return this.patchCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n            return { data: data, subscription: this };\n        });\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { Util, TypedHash } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the UserCustomActions class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user custom actions collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"usercustomactions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Returns the user custom action with the specified id\n     *\n     * @param id The GUID id of the user custom action to retrieve\n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionAddResult> {\n\n        const postBody = JSON.stringify(Util.extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update(properties: TypedHash<string | boolean | number>): Promise<UserCustomActionUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.UserCustomAction\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                action: this,\n                data: data,\n            };\n        });\n    }\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { NotSupportedInBatchException } from \"./exceptions\";\nimport { Folder } from \"./folders\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"lists\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = Util.extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: JSON.stringify(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw new NotSupportedInBatchException(\"The ensure list method\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = Util.extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(spExtractODataId(json));\n        });\n    }\n}\n\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (properties.hasOwnProperty(\"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (data.hasOwnProperty(\"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.add(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"RenderListData\")) {\n                return data.RenderListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     * \n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null): Promise<any> {\n\n        const postBody = {\n            overrideParameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataOverrideParameters\" },\n            }, overrideParameters),\n            parameters: Util.extend({\n                \"__metadata\": { \"type\": \"SP.RenderListDataParameters\" },\n            }, parameters),\n        };\n\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\n            body: JSON.stringify(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            data = JSON.parse(data);\n            if (data.hasOwnProperty(\"ListData\")) {\n                return data.ListData;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (data.hasOwnProperty(\"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").getAs<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { Util, TypedHash } from \"@pnp/common\";\nimport { ListItemFormUpdateValue } from \"./types\";\nimport { ODataParserBase } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\n\n/**\n * Describes a collection of Item objects\n *\n */\nexport class Items extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Items class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"items\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets an Item by id\n     *\n     * @param id The integer id of the item to retrieve\n     */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     */\n    public skip(skip: number): this {\n        this._query.add(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged(): Promise<PagedItemCollection<any>> {\n        return this.getAs(new PagedItemCollectionParser());\n    }\n\n    //\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = JSON.stringify(Util.extend({\n                \"__metadata\": { \"type\": listItemEntityType },\n            }, properties));\n\n            const promise = this.clone(Items, null).postAsCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = JSON.stringify(Util.extend({\n                    \"__metadata\": { \"type\": listItemEntityType },\n                }, properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i._query.add(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (data.hasOwnProperty(\"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: JSON.stringify({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\"))).getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<any>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null);\n            return items.getPaged();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser extends ODataParserBase<PagedItemCollection<any>> {\n    public parse(r: Response): Promise<PagedItemCollection<any>> {\n\n        return new Promise<PagedItemCollection<any>>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = json.hasOwnProperty(\"d\") && json.d.hasOwnProperty(\"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection(nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public parse(r: Response): Promise<ItemUpdateResultData> {\n\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { TextFileParser, BlobFileParser, JSONFileParser, BufferFileParser } from \"@pnp/odata\";\nimport { Util } from \"@pnp/common\";\nimport { MaxCommentLengthException } from \"./exceptions\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { spGetEntityUrl } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Files class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"files\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\n        return adder.postCore().then(() => this.getByName(url)).then(file => file.setContentChunked(content, progress, chunkSize)).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(url),\n            };\n        });\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw new MaxCommentLengthException();\n        }\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONFileParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(\n        file: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        chunkSize = 10485760): Promise<File> {\n\n        if (typeof progress === \"undefined\") {\n            progress = () => null;\n        }\n\n        const self = this;\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = Util.getGUID();\n\n        // start the chain with the first fragment\n        progress({ blockNumber: 1, chunkSize: chunkSize, currentPointer: 0, fileSize: fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = self.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n\n            chain = chain.then(pointer => {\n\n                progress({ blockNumber: i, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"continue\", totalBlocks: blockCount });\n\n                return self.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n\n            progress({ blockNumber: blockCount, chunkSize: chunkSize, currentPointer: pointer, fileSize: fileSize, stage: \"finishing\", totalBlocks: blockCount });\n\n            return self.finishUpload(uploadId, pointer, file.slice(pointer));\n\n        }).then(_ => {\n\n            return self;\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false).postAsCore<string>({ body: fragment }).then(n => parseFloat(n));\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    private continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false).postAsCore<string>({ body: fragment }).then(n => parseFloat(n));\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    private finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postAsCore<{ ServerRelativeUrl: string }>({ body: fragment }).then((response) => {\n                return {\n                    data: response,\n                    file: new File(response.ServerRelativeUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the File class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"versions\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a version by id\n     *\n     * @param versionId The id of the version to retrieve\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel='${label}')`).postCore();\n    }\n}\n\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { spGetEntityUrl } from \"./odata\";\nimport { Item } from \"./items\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Folders class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"folders\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((response) => {\n            return {\n                data: response,\n                folder: this.getByName(url),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update(properties: TypedHash<string | number | boolean>): Promise<FolderUpdateResult> {\n        const postBody: string = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Folder\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                folder: this,\n            };\n        });\n    }\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return Util.extend(new Item(spGetEntityUrl(d)), d);\n        });\n    }\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Result from udpdating a navigation node\n *\n */\nexport interface NavigationNodeUpdateResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\n     * Gets a navigation node by id\n     *\n     * @param id The id of the node\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = JSON.stringify({\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        });\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = JSON.stringify({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Updates this node based on the supplied properties\n     *\n     * @param properties The hash of key/value pairs to update\n     */\n    public update(properties: TypedHash<boolean | string | number>): Promise<NavigationNodeUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                node: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n\n/**\n * Exposes the navigation components\n *\n */\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Creates a new instance of the Navigation class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of these navigation components\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"navigation\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Util, mergeHeaders } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { HttpClient } from \"./net/httpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { SPBatchParseException } from \"./exceptions\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new HttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = Util.getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = Util.isUrlAbsolute(reqInfo.url) ? reqInfo.url : Util.combinePaths(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (reqInfo.hasOwnProperty(\"options\") && reqInfo.options.hasOwnProperty(\"headers\") && typeof castHeaders[\"X-HTTP-Method\"] !== \"undefined\") {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(Util.combinePaths(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(this._parseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw new SPBatchParseException(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    private _parseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw new SPBatchParseException(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw new SPBatchParseException(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(new SPBatchParseException(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of List objects\n *\n */\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Lists class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this fields collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"features\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the feature (GUID)\n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: JSON.stringify({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: JSON.stringify({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.getAs<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/SP.RelatedItemManager\") {\n        super(baseUrl, path);\n    }\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: JSON.stringify({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n","import { Util, TypedHash } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\n\n/**\n * Describes a collection of webs\n *\n */\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the Webs class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webs\") {\n        super(baseUrl, webPath);\n    }\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = JSON.stringify({\n            \"parameters\":\n            Util.extend({\n                \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n            }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(spExtractODataId(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\nexport class WebInfos extends SharePointQueryableCollection {\n\n    /**\n     * Creates a new instance of the WebInfos class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web infos collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, webPath = \"webinfos\") {\n        super(baseUrl, webPath);\n    }\n}\n\n/**\n * Describes a web\n *\n */\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new instance of the Web class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = JSON.stringify(Util.extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = JSON.stringify({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.add(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = JSON.stringify({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(spExtractODataId(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(spExtractODataId(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = JSON.stringify({ \"query\": Util.extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n","import { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation } from \"./types\";\nimport { spExtractODataId } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\n\n/**\n * Describes a site collection\n *\n */\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Creates a new instance of the Site class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this site collection\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/site\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (data.hasOwnProperty(\"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.add(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.add(\"@v\", \"'\" + absolutePageUrl + \"'\");\n        return q.get().then(data => {\n            if (data.hasOwnProperty(\"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => {\n\n            return {\n                data: d,\n                web: Web.fromUrl(spExtractODataId(d)),\n            };\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { HashTagCollection, UserProfile } from \"./types\";\nimport { readBlobAsArrayBuffer } from \"@pnp/common\";\nimport { ODataValue } from \"@pnp/odata\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.profileLoader = new ProfileLoader(baseUrl);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").getAs(ODataValue<string>());\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").getAs(ODataValue<boolean>());\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.add(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.add(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.add(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n            readBlobAsArrayBuffer(profilePicSource).then((buffer) => {\n                const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n                request.postCore({\n                    body: String.fromCharCode.apply(null, new Uint16Array(buffer)),\n                }).then(_ => resolve());\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n}\n\nclass ProfileLoader extends SharePointQueryable {\n\n      /**\n     * Creates a new instance of the ProfileLoader class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this profile loader\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.profileloader.getprofileloader\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: JSON.stringify({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postAsCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postAsCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { Util } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { spExtractODataId } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n    usingCaching(options?: ICachingOptions): this;\n    inBatch(batch: SPBatch): this;\n    sendEmail(props: EmailProperties): Promise<void>;\n    getCurrentUserEmailAddresses(): Promise<string>;\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n    searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]>;\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n    createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n\n    /**\n     * Creates a new instance of the Utility method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n\n        return this.postAsCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Sends an email based on the supplied properties\n     *\n     * @param props The properties of the email to send\n     */\n    public sendEmail(props: EmailProperties): Promise<void> {\n\n        const params = {\n            properties: {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n                \"__metadata\": { \"type\": \"SP.Utilities.EmailProperties\" },\n            },\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = Util.extend(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n            params.properties = Util.extend(params.properties, {\n                AdditionalHeaders: props.AdditionalHeaders,\n            });\n        }\n\n        return this.create(\"SendEmail\", true).excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n\n        return this.create(\"GetCurrentUserEmailAddresses\", true).excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<PrincipalInfo> {\n\n        const params = {\n            addToUserInfoList: addToUserInfoList,\n            input: input,\n            inputIsEmailOnly: inputIsEmailOnly,\n            matchUserInfoList: matchUserInfoList,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.create(\"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]> {\n\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.create(\"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        return this.create(\"CreateEmailBodyForInvitation\", true).excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        return this.create(\"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params);\n    }\n\n    public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n        return this.create(\"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n            parameters: info,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(spExtractODataId(r)),\n            };\n        });\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected create(methodName: string, includeBatch: boolean): UtilityMethod {\n        let clone = new UtilityMethod(this.parentUrl, methodName);\n        const target = this.query.get(\"@target\");\n        if (target !== null) {\n            clone.query.add(\"@target\", target);\n        }\n        if (includeBatch && this.hasBatch) {\n            clone = clone.inBatch(this.batch);\n        }\n        return clone;\n    }\n}\n\nexport interface CreateWikiPageResult {\n    data: any;\n    file: File;\n}\n","import { SPRest } from \"./src/rest\";\r\n\r\nexport * from \"./src/sp\";\r\n\r\nexport let sp = new SPRest();\r\n","import { Search, SearchQuery, SearchResults, SearchQueryBuilder } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { Util, UrlException, ConfigOptions } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { SPBatch } from \"./batch\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /**\n     * Additional options to be set before sending actual http requests\n     */\n    private _options: ConfigOptions;\n\n    /**\n     * A string that should form the base part of the url\n     */\n    private _baseUrl: string;\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(options: ConfigOptions = {}, baseUrl = \"\") {\n        this._options = options;\n        this._baseUrl = baseUrl;\n    }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return new SearchSuggest(this._baseUrl).configure(this._options).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: string | SearchQuery | SearchQueryBuilder): Promise<SearchResults> {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if (query instanceof SearchQueryBuilder) {\n            finalQuery = (query as SearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = query;\n        }\n\n        return new Search(this._baseUrl).configure(this._options).execute(finalQuery);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return new Site(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return new Web(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return new UserProfileQuery(this._baseUrl).configure(this._options);\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return new UtilityMethod(this._baseUrl, \"\").configure(this._options);\n    }\n\n    /**\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): Site {\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\n    }\n\n    /**\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): Web {\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\n    }\n\n    /**\n     * Implements the creation of cross domain REST urls\n     *\n     * @param factory The constructor of the object to create Site | Web\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     * @param urlPart String part to append to the url \"site\" | \"web\"\n     */\n    private _cdImpl<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        addInWebUrl: string,\n        hostWebUrl: string,\n        urlPart: string): T {\n\n        if (!Util.isUrlAbsolute(addInWebUrl)) {\n            throw new UrlException(\"The addInWebUrl parameter must be an absolute url.\");\n        }\n\n        if (!Util.isUrlAbsolute(hostWebUrl)) {\n            throw new UrlException(\"The hostWebUrl parameter must be an absolute url.\");\n        }\n\n        const url = Util.combinePaths(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\n\n        const instance = new factory(url, urlPart);\n        instance.query.add(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\n        return instance.configure(this._options);\n    }\n}\n"]}