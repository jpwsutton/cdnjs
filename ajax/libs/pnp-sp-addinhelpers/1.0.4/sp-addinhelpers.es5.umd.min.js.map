{"version":3,"sources":["../../../../packages/sp-addinhelpers/src/exceptions.ts","../../../../packages/sp-addinhelpers/src/sprequestexecutorclient.ts","../../../../packages/sp-addinhelpers/src/sprestaddin.ts"],"names":["SPRequestExecutorUndefinedException","_this","this","msg","join","_super","call","name","Logger","error","tslib_1.__extends","Error","SPRequestExecutorClient","convertToResponse","spResponse","responseHeaders","Headers","headers","h","append","body","statusCode","Response","status","statusText","prototype","fetch","url","options","SP","RequestExecutor","iterator","temp","addinWebUrl","substring","indexOf","executor","entries","next","done","value","Promise","resolve","reject","requestOptions","method","success","response","extend","binaryStringRequestBody","executeAsync","SPRestAddIn","crossDomainSite","addInWebUrl","hostWebUrl","_cdImpl","Site","crossDomainWeb","Web","factory","urlPart","isUrlAbsolute","UrlException","instance","combinePaths","query","add","encodeURIComponent","configure","_options","SPRest","sp"],"mappings":"iaAII,SAAAA,IAAA,IAAAC,EAAAC,KACUC,EAAM,CACR,oCACA,uHACFC,KAAK,YACPH,EAAAI,EAAAC,KAAAJ,KAAMC,IAAID,MACLK,KAAO,sCACZC,EAAAA,OAAOC,MAAMR,KAErB,OAXyDS,EAAAA,UAAAA,EAAAA,GAWzDV,GAXyDW,OCIzDC,EAAA,WAAA,SAAAA,IAqDYV,KAAAW,kBAAoB,SAACC,GACzB,IAAMC,EAAkB,IAAIC,QAE5B,QAAkC,IAAvBF,EAAWG,QAClB,IAAK,IAAMC,KAAKJ,EAAWG,QACnBH,EAAWG,QAAQC,IACnBH,EAAgBI,OAAOD,EAAGJ,EAAWG,QAAQC,IAMzD,IAAME,EAAiC,MAA1BN,EAAWO,WAAqB,KAAOP,EAAWM,KAE/D,OAAO,IAAIE,SAASF,EAAM,CACtBH,QAASF,EACTQ,OAAQT,EAAWO,WACnBG,WAAYV,EAAWU,cAGnC,OArEWZ,EAAAa,UAAAC,MAAP,SAAaC,EAAaC,GAA1B,IAAA3B,EAAAC,KACI,GAAkB,oBAAP2B,SAAoD,IAAvBA,GAAGC,gBACvC,MAAM,IAAI9B,EAGd,IAII+B,EACAC,EALEC,EAAcN,EAAIO,UAAU,EAAGP,EAAIQ,QAAQ,UAC7CC,EAAW,IAAIP,GAAGC,gBAAgBG,GAElChB,EAAsC,GAI1C,GAAIW,EAAQX,SAAWW,EAAQX,mBAAmBD,QAG9C,IADAgB,GADAD,EAA+CH,EAAQX,QAAQoB,WAC/CC,QACRN,EAAKO,MACTtB,EAAQe,EAAKQ,MAAM,IAAMR,EAAKQ,MAAM,GACpCR,EAAOD,EAASO,YAGpBrB,EAAeW,EAAQX,QAG3B,OAAO,IAAIwB,QAAQ,SAACC,EAASC,GAEzB,IAAIC,EAAiB,CACjBnC,MAAO,SAACA,GACJkC,EAAO1C,EAAKY,kBAAkBJ,KAElCQ,QAASA,EACT4B,OAAQjB,EAAQiB,OAChBC,QAAS,SAACC,GACNL,EAAQzC,EAAKY,kBAAkBkC,KAEnCpB,IAAKA,GAILiB,EADAhB,EAAQR,KACS4B,EAAAA,OAAOJ,EAAgB,CAAExB,KAAMQ,EAAQR,OAEvC4B,EAAAA,OAAOJ,EAAgB,CAAEK,yBAAyB,IAEvEb,EAASc,aAAaN,MA2BlChC,EAzEA,iBCQA,SAAAuC,mDAkDA,OAlDiCzC,EAAAA,UAAAA,EAAAA,GAQtByC,EAAA1B,UAAA2B,gBAAP,SAAuBC,EAAqBC,GACxC,OAAOpD,KAAKqD,QAAQC,EAAAA,KAAMH,EAAaC,EAAY,SAShDH,EAAA1B,UAAAgC,eAAP,SAAsBJ,EAAqBC,GACvC,OAAOpD,KAAKqD,QAAQG,EAAAA,IAAKL,EAAaC,EAAY,QAW9CH,EAAA1B,UAAA8B,QAAR,SACII,EACAN,EACAC,EACAM,GAEA,IAAKC,EAAAA,cAAcR,GACf,MAAM,IAAIS,EAAAA,aAAa,sDAG3B,IAAKD,EAAAA,cAAcP,GACf,MAAM,IAAIQ,EAAAA,aAAa,qDAG3B,IAEMC,EAAW,IAAIJ,EAFTK,EAAAA,aAAaX,EAAa,mCAEJO,GAElC,OADAG,EAASE,MAAMC,IAAI,UAAW,IAAMC,mBAAmBb,GAAc,KAC9DS,EAASK,UAAUlE,KAAKmE,WAEvClB,GAlDiCmB,EAAAA,QAoDpBC,EAAK,IAAIpB","sourcesContent":["import { Logger } from \"@pnp/logging\";\n\nexport class SPRequestExecutorUndefinedException extends Error {\n\n    constructor() {\n        const msg = [\n            \"SP.RequestExecutor is undefined. \",\n            \"Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\",\n        ].join(\" \");\n        super(msg);\n        this.name = \"SPRequestExecutorUndefinedException\";\n        Logger.error(this);\n    }\n}\n","import { extend, HttpClientImpl } from \"@pnp/common\";\nimport { SPRequestExecutorUndefinedException } from \"./exceptions\";\n\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nexport class SPRequestExecutorClient implements HttpClientImpl {\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    public fetch(url: string, options: any): Promise<Response> {\n        if (typeof SP === \"undefined\" || typeof SP.RequestExecutor === \"undefined\") {\n            throw new SPRequestExecutorUndefinedException();\n        }\n\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\n            executor = new SP.RequestExecutor(addinWebUrl);\n\n        let headers: { [key: string]: string; } = {},\n            iterator: IterableIterator<[string, string]>,\n            temp: IteratorResult<[string, string]>;\n\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        } else {\n            headers = <any>options.headers;\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let requestOptions = {\n                error: (error: SP.ResponseInfo) => {\n                    reject(this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: (response: SP.ResponseInfo) => {\n                    resolve(this.convertToResponse(response));\n                },\n                url: url,\n            };\n\n            if (options.body) {\n                requestOptions = extend(requestOptions, { body: options.body });\n            } else {\n                requestOptions = extend(requestOptions, { binaryStringRequestBody: true });\n            }\n            executor.executeAsync(requestOptions);\n        });\n    }\n\n    /**\n     * Converts a SharePoint REST API response to a fetch API response.\n     */\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\n        const responseHeaders = new Headers();\n\n        if (typeof spResponse.headers !== \"undefined\") {\n            for (const h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n        }\n\n        // Cannot have an empty string body when creating a Response with status 204\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\n\n        return new Response(body, {\n            headers: responseHeaders,\n            status: spResponse.statusCode,\n            statusText: spResponse.statusText,\n        });\n    }\n}\n","import {\n    SPRest,\n    Web,\n    Site,\n    SharePointQueryable,\n    SharePointQueryableConstructor,\n} from \"@pnp/sp\";\n\nimport {\n    isUrlAbsolute,\n    combinePaths,\n    UrlException,\n} from \"@pnp/common\";\n\nexport class SPRestAddIn extends SPRest {\n\n    /**\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): Site {\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\n    }\n\n    /**\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): Web {\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\n    }\n\n    /**\n     * Implements the creation of cross domain REST urls\n     *\n     * @param factory The constructor of the object to create Site | Web\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     * @param urlPart String part to append to the url \"site\" | \"web\"\n     */\n    private _cdImpl<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        addInWebUrl: string,\n        hostWebUrl: string,\n        urlPart: string): T {\n\n        if (!isUrlAbsolute(addInWebUrl)) {\n            throw new UrlException(\"The addInWebUrl parameter must be an absolute url.\");\n        }\n\n        if (!isUrlAbsolute(hostWebUrl)) {\n            throw new UrlException(\"The hostWebUrl parameter must be an absolute url.\");\n        }\n\n        const url = combinePaths(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\n\n        const instance = new factory(url, urlPart);\n        instance.query.add(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\n        return instance.configure(this._options);\n    }\n}\n\nexport const sp = new SPRestAddIn();\n"]}