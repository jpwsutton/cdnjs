{"version":3,"sources":["../../../../packages/sp-addinhelpers/src/exceptions.ts","../../../../packages/sp-addinhelpers/src/sprequestexecutorclient.ts"],"names":["SPRequestExecutorUndefinedException","_super","_this","this","msg","join","call","name","Logger","log","data","level","LogLevel","Error","message","__extends","SPRequestExecutorClient","convertToResponse","spResponse","responseHeaders","Headers","headers","h","append","body","statusCode","Response","status","statusText","prototype","fetch","url","options","SP","RequestExecutor","iterator","temp","addinWebUrl","substring","indexOf","executor","entries","next","done","value","Promise","resolve","reject","requestOptions","error","method","success","response","Util","extend","binaryStringRequestBody","executeAsync"],"mappings":"0kBAAAA,EAAA,SAAAC,GAII,SAAAD,IAAA,IAAAE,EAAAC,KACUC,GACF,oCACA,uHACFC,KAAK,YACPH,EAAAD,EAAAK,KAAAH,KAAMC,IAAID,KACVD,EAAKK,KAAO,sCACZC,EAAAA,OAAOC,KAAMC,QAAUC,MAAOC,EAAAA,SAASC,MAAOC,QAAS,IAAIZ,EAAKK,KAAI,MAAML,EAAKY,YAEvF,OAXyDC,EAAAf,EAAAC,GAWzDD,EAbA,CAEyDa,OCKzDG,EAAA,WAAA,SAAAA,IAqDYb,KAAAc,kBAAoB,SAACC,GACzB,IAAMC,EAAkB,IAAIC,QAE5B,QAAkC,IAAvBF,EAAWG,QAClB,IAAK,IAAMC,KAAKJ,EAAWG,QACnBH,EAAWG,QAAQC,IACnBH,EAAgBI,OAAOD,EAAGJ,EAAWG,QAAQC,IAMzD,IAAME,EAAiC,MAA1BN,EAAWO,WAAqB,KAAOP,EAAWM,KAE/D,OAAO,IAAIE,SAASF,GAChBH,QAASF,EACTQ,OAAQT,EAAWO,WACnBG,WAAYV,EAAWU,cAGnC,OArEWZ,EAAAa,UAAAC,MAAP,SAAaC,EAAaC,GAA1B,IAAA9B,EAAAC,KACI,GAAkB,oBAAP8B,SAAoD,IAAvBA,GAAGC,gBACvC,MAAM,IAAIlC,EAGd,IAIImC,EACAC,EALEC,EAAcN,EAAIO,UAAU,EAAGP,EAAIQ,QAAQ,UAC7CC,EAAW,IAAIP,GAAGC,gBAAgBG,GAElChB,KAIJ,GAAIW,EAAQX,SAAWW,EAAQX,mBAAmBD,QAG9C,IADAgB,GADAD,EAA+CH,EAAQX,QAAQoB,WAC/CC,QACRN,EAAKO,MACTtB,EAAQe,EAAKQ,MAAM,IAAMR,EAAKQ,MAAM,GACpCR,EAAOD,EAASO,YAGpBrB,EAAeW,EAAQX,QAG3B,OAAO,IAAIwB,QAAQ,SAACC,EAASC,GAEzB,IAAIC,GACAC,MAAO,SAACA,GACJF,EAAO7C,EAAKe,kBAAkBgC,KAElC5B,QAASA,EACT6B,OAAQlB,EAAQkB,OAChBC,QAAS,SAACC,GACNN,EAAQ5C,EAAKe,kBAAkBmC,KAEnCrB,IAAKA,GAILiB,EADAhB,EAAQR,KACS6B,EAAAA,KAAKC,OAAON,GAAkBxB,KAAMQ,EAAQR,OAE5C6B,EAAAA,KAAKC,OAAON,GAAkBO,yBAAyB,IAE5Ef,EAASgB,aAAaR,MA2BlChC,EAzEA","sourcesContent":["import { LogLevel, Logger } from \"@pnp/logging\";\r\n\r\nexport class SPRequestExecutorUndefinedException extends Error {\r\n\r\n    constructor() {\r\n        const msg = [\r\n            \"SP.RequestExecutor is undefined. \",\r\n            \"Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\",\r\n        ].join(\" \");\r\n        super(msg);\r\n        this.name = \"SPRequestExecutorUndefinedException\";\r\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\r\n    }\r\n}\r\n","import { HttpClientImpl } from \"@pnp/sp\";\r\nimport { Util } from \"@pnp/common\";\r\nimport { SPRequestExecutorUndefinedException } from \"./exceptions\";\r\n\r\n/**\r\n * Makes requests using the SP.RequestExecutor library.\r\n */\r\nexport class SPRequestExecutorClient implements HttpClientImpl {\r\n    /**\r\n     * Fetches a URL using the SP.RequestExecutor library.\r\n     */\r\n    public fetch(url: string, options: any): Promise<Response> {\r\n        if (typeof SP === \"undefined\" || typeof SP.RequestExecutor === \"undefined\") {\r\n            throw new SPRequestExecutorUndefinedException();\r\n        }\r\n\r\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\r\n            executor = new SP.RequestExecutor(addinWebUrl);\r\n\r\n        let headers: { [key: string]: string; } = {},\r\n            iterator: IterableIterator<[string, string]>,\r\n            temp: IteratorResult<[string, string]>;\r\n\r\n        if (options.headers && options.headers instanceof Headers) {\r\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\r\n            temp = iterator.next();\r\n            while (!temp.done) {\r\n                headers[temp.value[0]] = temp.value[1];\r\n                temp = iterator.next();\r\n            }\r\n        } else {\r\n            headers = <any>options.headers;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let requestOptions = {\r\n                error: (error: SP.ResponseInfo) => {\r\n                    reject(this.convertToResponse(error));\r\n                },\r\n                headers: headers,\r\n                method: options.method,\r\n                success: (response: SP.ResponseInfo) => {\r\n                    resolve(this.convertToResponse(response));\r\n                },\r\n                url: url,\r\n            };\r\n\r\n            if (options.body) {\r\n                requestOptions = Util.extend(requestOptions, { body: options.body });\r\n            } else {\r\n                requestOptions = Util.extend(requestOptions, { binaryStringRequestBody: true });\r\n            }\r\n            executor.executeAsync(requestOptions);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts a SharePoint REST API response to a fetch API response.\r\n     */\r\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\r\n        const responseHeaders = new Headers();\r\n\r\n        if (typeof spResponse.headers !== \"undefined\") {\r\n            for (const h in spResponse.headers) {\r\n                if (spResponse.headers[h]) {\r\n                    responseHeaders.append(h, spResponse.headers[h]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // issue #256, Cannot have an empty string body when creating a Response with status 204\r\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\r\n\r\n        return new Response(body, {\r\n            headers: responseHeaders,\r\n            status: spResponse.statusCode,\r\n            statusText: spResponse.statusText,\r\n        });\r\n    }\r\n}\r\n"]}