{"version":3,"sources":["webpack://VideojsWavesurfer/webpack/universalModuleDefinition","webpack://VideojsWavesurfer/webpack/bootstrap","webpack://VideojsWavesurfer/external \"WaveSurfer\"","webpack://VideojsWavesurfer/external \"videojs\"","webpack://VideojsWavesurfer/./src/js/tech.js","webpack://VideojsWavesurfer/(webpack)/buildin/global.js","webpack://VideojsWavesurfer/./node_modules/global/window.js","webpack://VideojsWavesurfer/./src/js/defaults.js","webpack://VideojsWavesurfer/./src/js/utils/format-time.js","webpack://VideojsWavesurfer/./src/js/utils/log.js","webpack://VideojsWavesurfer/./src/js/videojs.wavesurfer.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Html5","videojs","getTech","WavesurferTech","options","ready","_classCallCheck","this","nativeTextTracks","_possibleConstructorReturn","__proto__","getPrototypeOf","player","_this2","activePlayer","waveready","on","playerIsUsingWavesurfer","activeWavesurferPlugin","trigger","availablePlugins","getPlugins","play","_get","pause","getCurrentTime","getDuration","time","surfer","seekTo","rate","setPlaybackRate","isSupported","g","Function","eval","e","global","win","self","debug","msDisplayMax","seconds","guide","Math","floor","h","gm","gh","ms","isNaN","Infinity","args","logType","log","error","warn","Plugin","_video2","default","getPlugin","Wavesurfer","_this","addClass","mergeOptions","_defaults2","waveReady","waveFinished","liveMode","toString","parseFloat","src","undefined","_wavesurfer2","microphone","onWaveError","one","initialize","bind","tech_","setActivePlayer","bigPlayButton","hide","usingNativeControls_","el_","controls","options_","controlBar","show","style","display","progressControl","currentTimeDisplay","timeDivider","durationDisplay","forEach","element","remainingTimeDisplay","playToggle","onPlayToggle","mergedOptions","parseOptions","plugins","wavesurfer","create","onWaveFinish","surferReady","onWaveReady","surferProgress","onWaveProgress","surferSeek","onWaveSeek","setupPlaybackEvents","onVolumeChange","onScreenChange","muted","setVolume","fluid","drawer","wrapper","className","responsiveWave","util","debounce","onResizeChange","_window2","addEventListener","startPlayers","surferOpts","rect","getBoundingClientRect","originalWidth","width","originalHeight","height","controlBarHeight","container","waveformHeight","playerHeight","opts","splitChannels","loadingSpinner","load","peaks","enable","un","url","Blob","File","JSON","stringify","loadBlob","Array","isArray","ajaxOptions","responseType","xhr","ajax","data","target","status","handlePlay","active","paused","start","contentEl","handlePause","setCurrentTime","destroy","children","dispose","volume","format","quality","exportImage","deviceId","_this3","setSinkId","then","result","catch","err","currentTime","duration","min","formattedTime_","lastChild","textContent","_formatTime2","setDuration","autoplay","_this4","loop","stop","once","removeClass","hasClass","isPlaying","_this5","fullscreenDelay","setInterval","newWidth","newHeight","isFullscreen","redrawWaveform","clearInterval","isDestroyed","params","createDrawer","drawBuffer","progress","backend","getPlayedPercents","_log3","VERSION","registerPlugin","registerTech","_tech2"],"mappings":"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","file":"videojs.wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"WaveSurfer\"), require(\"videojs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsWavesurfer\", [\"WaveSurfer\", \"videojs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsWavesurfer\"] = factory(require(\"WaveSurfer\"), require(\"videojs\"));\n\telse\n\t\troot[\"VideojsWavesurfer\"] = factory(root[\"WaveSurfer\"], root[\"videojs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","/**\n * @file tech.js\n * @since 2.1.0\n */\n\nconst Html5 = videojs.getTech('Html5');\n\nclass WavesurferTech extends Html5 {\n    /**\n     * Create an instance of this Tech.\n     *\n     * @param {Object} [options]\n     *        The key/value store of player options.\n     *\n     * @param {Component~ReadyCallback} ready\n     *        Callback function to call when the `Flash` Tech is ready.\n     */\n    constructor(options, ready) {\n        // never allow for native text tracks, because this isn't actually\n        // HTML5 audio. Native tracks fail because we are using wavesurfer\n        options.nativeTextTracks = false;\n\n        super(options, ready);\n    }\n\n    setActivePlayer(player) {\n        // we need the player instance so that we can access the current\n        // wavesurfer plugin attached to that player\n        this.activePlayer = player;\n        this.waveready = false;\n\n        // track when wavesurfer is fully initialized (ready)\n        this.activePlayer.on('waveReady', () => {\n            this.waveready = true;\n        });\n\n        if (!this.playerIsUsingWavesurfer()) {\n            // the plugin hasn't been initialized for this player, so it\n            // likely doesn't need our html5 tech modifications\n            return;\n        }\n\n        // proxy timeupdate events so that the tech emits them too. This will\n        // allow the rest of videoJS to work (including text tracks)\n        this.activePlayer.activeWavesurferPlugin.on('timeupdate', () => {\n            this.trigger('timeupdate');\n        });\n    }\n\n    /**\n     * Determine whether or not the player is trying use the wavesurfer plugin\n     * @returns {boolean}\n     */\n    playerIsUsingWavesurfer()\n    {\n        let availablePlugins = videojs.getPlugins();\n        let usingWavesurferPlugin = 'wavesurfer' in availablePlugins;\n        let usingRecordPlugin = 'record' in availablePlugins;\n\n        return usingWavesurferPlugin && !usingRecordPlugin;\n    }\n\n    /**\n     * Start playback.\n     */\n    play() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.play();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.play();\n    }\n\n    /**\n     * Pause playback.\n     */\n    pause() {\n        if (!this.playerIsUsingWavesurfer()) {\n            //fall back to html5 tech functionality\n            return super.pause();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.pause();\n    }\n\n    /**\n     * Get the current time\n     * @return {number}\n     */\n    currentTime() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getCurrentTime();\n    }\n\n    /**\n     * Get the current duration\n     *\n     * @return {number}\n     *         The duration of the media or 0 if there is no duration.\n     */\n    duration() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.duration();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getDuration();\n    }\n\n    /**\n     * Set the current time\n     *\n     * @since 2.1.1\n     * @param {number} time\n     * @returns {*}\n     */\n    setCurrentTime(time) {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime(time);\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.surfer.seekTo(\n            time / this.activePlayer.activeWavesurferPlugin.surfer.getDuration());\n    }\n\n    /**\n     * Sets the current playback rate. A playback rate of\n     * 1.0 represents normal speed and 0.5 would indicate half-speed\n     * playback, for instance.\n     *\n     * @since 2.1.1\n     * @param {number} [rate]\n     *       New playback rate to set.\n     *\n     * @return {number}\n     *         The current playback rate when getting or 1.0\n     */\n    setPlaybackRate(rate) {\n        if (this.playerIsUsingWavesurfer()) {\n            this.activePlayer.activeWavesurferPlugin.surfer.setPlaybackRate(rate);\n        }\n\n        return super.setPlaybackRate(rate);\n    }\n}\n\nWavesurferTech.isSupported = function() {\n    return true;\n};\n\nexport default WavesurferTech;\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nconst pluginDefaultOptions = {\n    // Display console log messages.\n    debug: false,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3\n};\n\nexport default pluginDefaultOptions;\n","/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nconst formatTime = function(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    let s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = (h > 0 || gh > 0) ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = ((s < 10) ? '0' + s : s);\n\n    return h + m + s + ms;\n};\n\nexport default formatTime;\n","/**\n * @file log.js\n * @since 2.0.0\n */\n\nconst ERROR = 'error';\nconst WARN = 'warn';\n\n/**\n * Log message (if the debug option is enabled).\n */\nconst log = function(args, logType, debug)\n{\n    if (debug === true) {\n        if (logType === ERROR) {\n            videojs.log.error(args);\n        } else if (logType === WARN) {\n            videojs.log.warn(args);\n        } else {\n            videojs.log(args);\n        }\n    }\n};\n\nexport default log;\n","/**\n * @file videojs.wavesurfer.js\n *\n * The main file for the videojs-wavesurfer project.\n * MIT license: https://github.com/collab-project/videojs-wavesurfer/blob/master/LICENSE\n */\n\nimport log from './utils/log';\nimport formatTime from './utils/format-time';\nimport pluginDefaultOptions from './defaults';\nimport window from 'global/window';\nimport WavesurferTech from './tech';\n\nimport videojs from 'video.js';\nimport WaveSurfer from 'wavesurfer.js';\n\nconst Plugin = videojs.getPlugin('plugin');\n\nconst wavesurferClassName = 'vjs-wavedisplay';\n\n/**\n * Draw a waveform for audio and video files in a video.js player.\n *\n * @class Wavesurfer\n * @extends videojs.Plugin\n */\nclass Wavesurfer extends Plugin {\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        // add plugin style\n        player.addClass('vjs-wavesurfer');\n\n        // parse options\n        options = videojs.mergeOptions(pluginDefaultOptions, options);\n        this.waveReady = false;\n        this.waveFinished = false;\n        this.liveMode = false;\n        this.debug = (options.debug.toString() === 'true');\n        this.msDisplayMax = parseFloat(options.msDisplayMax);\n\n        // attach this instance to the current player so that the tech can\n        // access it\n        this.player.activeWavesurferPlugin = this;\n\n        // microphone plugin\n        if (options.src === 'live') {\n            // check if the wavesurfer.js microphone plugin can be enabled\n            if (WaveSurfer.microphone !== undefined) {\n                // enable audio input from a microphone\n                this.liveMode = true;\n                this.waveReady = true;\n            } else {\n                this.onWaveError('Could not find wavesurfer.js ' +\n                    'microphone plugin!');\n                return;\n            }\n        }\n\n        // wait until player ui is ready\n        this.player.one('ready', this.initialize.bind(this));\n    }\n\n    /**\n     * Player UI is ready: customize controls.\n     */\n    initialize() {\n        // setup tech\n        this.player.tech_.setActivePlayer(this.player);\n\n        // hide big play button\n        this.player.bigPlayButton.hide();\n\n        // the native controls don't work for this UI so disable\n        // them no matter what\n        if (this.player.usingNativeControls_ === true) {\n            if (this.player.tech_.el_ !== undefined) {\n                this.player.tech_.el_.controls = false;\n            }\n        }\n\n        // controls\n        if (this.player.options_.controls === true) {\n            // make sure controlBar is showing\n            this.player.controlBar.show();\n            this.player.controlBar.el_.style.display = 'flex';\n\n            // progress control isn't used by this plugin\n            this.player.controlBar.progressControl.hide();\n\n            // make sure time displays are visible\n            let uiElements = [this.player.controlBar.currentTimeDisplay,\n                              this.player.controlBar.timeDivider,\n                              this.player.controlBar.durationDisplay];\n            uiElements.forEach((element) => {\n                // ignore and show when essential elements have been disabled\n                // by user\n                if (element !== undefined) {\n                    element.el_.style.display = 'block';\n                    element.show();\n                }\n            });\n            if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n                this.player.controlBar.remainingTimeDisplay.hide();\n            }\n\n            // handle play toggle interaction\n            this.player.controlBar.playToggle.on(['tap', 'click'],\n                this.onPlayToggle.bind(this));\n\n            // disable play button until waveform is ready\n            // (except when in live mode)\n            if (!this.liveMode) {\n                this.player.controlBar.playToggle.hide();\n            }\n        }\n\n        // wavesurfer.js setup\n        let mergedOptions = this.parseOptions(this.player.options_.plugins.wavesurfer);\n        this.surfer = WaveSurfer.create(mergedOptions);\n        this.surfer.on('error', this.onWaveError.bind(this));\n        this.surfer.on('finish', this.onWaveFinish.bind(this));\n        if (this.liveMode === true) {\n            // listen for wavesurfer.js microphone plugin events\n            this.surfer.microphone.on('deviceError', this.onWaveError.bind(this));\n        }\n        this.surferReady = this.onWaveReady.bind(this);\n        this.surferProgress = this.onWaveProgress.bind(this);\n        this.surferSeek = this.onWaveSeek.bind(this);\n\n        // only listen to these wavesurfer.js playback events when not\n        // in live mode\n        if (!this.liveMode) {\n            this.setupPlaybackEvents(true);\n        }\n\n        // video.js player events\n        this.player.on('volumechange', this.onVolumeChange.bind(this));\n        this.player.on('fullscreenchange', this.onScreenChange.bind(this));\n\n        // make sure volume is muted when requested\n        if (this.player.muted()) {\n            this.setVolume(0);\n        }\n\n        // video.js fluid option\n        if (this.player.options_.fluid === true) {\n            // give wave element a classname so it can be styled\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            // listen for window resize events\n            this.responsiveWave = WaveSurfer.util.debounce(\n                this.onResizeChange.bind(this), 150);\n            window.addEventListener('resize', this.responsiveWave);\n        }\n\n        // kick things off\n        this.startPlayers();\n    }\n\n    /**\n     * Initializes the waveform options.\n     *\n     * @param {Object} surferOpts - Plugin options.\n     * @private\n     */\n    parseOptions(surferOpts) {\n        let rect = this.player.el_.getBoundingClientRect();\n        this.originalWidth = this.player.options_.width || rect.width;\n        this.originalHeight = this.player.options_.height || rect.height;\n\n        // controlbar\n        let controlBarHeight = this.player.controlBar.height();\n        if (this.player.options_.controls === true && controlBarHeight === 0) {\n            // the dimensions of the controlbar are not known yet, but we\n            // need it now, so we can calculate the height of the waveform.\n            // The default height is 30px, so use that instead.\n            controlBarHeight = 30;\n        }\n\n        // set waveform element and dimensions\n        // Set the container to player's container if \"container\" option is\n        // not provided. If a waveform needs to be appended to your custom\n        // element, then use below option. For example:\n        // container: document.querySelector(\"#vjs-waveform\")\n        if (surferOpts.container === undefined) {\n            surferOpts.container = this.player.el_;\n        }\n\n        // set the height of generated waveform if user has provided height\n        // from options. If height of waveform need to be customized then use\n        // option below. For example: waveformHeight: 30\n        if (surferOpts.waveformHeight === undefined) {\n            let playerHeight = rect.height;\n            surferOpts.height = playerHeight - controlBarHeight;\n        } else {\n            surferOpts.height = opts.waveformHeight;\n        }\n\n        // split channels\n        if (surferOpts.splitChannels && surferOpts.splitChannels === true) {\n            surferOpts.height /= 2;\n        }\n\n        // enable wavesurfer.js microphone plugin\n        if (this.liveMode === true) {\n            surferOpts.plugins = [\n                WaveSurfer.microphone.create(surferOpts)\n            ];\n            this.log('wavesurfer.js microphone plugin enabled.');\n        }\n\n        return surferOpts;\n    }\n\n    /**\n     * Start the players.\n     * @private\n     */\n    startPlayers() {\n        let options = this.player.options_.plugins.wavesurfer;\n        if (options.src !== undefined) {\n            if (this.surfer.microphone === undefined) {\n                // show loading spinner\n                this.player.loadingSpinner.show();\n\n                // start loading file\n                this.load(options.src, options.peaks);\n            } else {\n                // hide loading spinner\n                this.player.loadingSpinner.hide();\n\n                // connect microphone input to our waveform\n                options.wavesurfer = this.surfer;\n            }\n        } else {\n            // no valid src found, hide loading spinner\n            this.player.loadingSpinner.hide();\n        }\n    }\n\n    /**\n     * Starts or stops listening to events related to audio-playback.\n     *\n     * @param {boolean} enable - Start or stop listening to playback\n     *     related events.\n     * @private\n     */\n    setupPlaybackEvents(enable) {\n        if (enable === false) {\n            this.surfer.un('ready', this.surferReady);\n            this.surfer.un('audioprocess', this.surferProgress);\n            this.surfer.un('seek', this.surferSeek);\n        } else if (enable === true) {\n            this.surfer.on('ready', this.surferReady);\n            this.surfer.on('audioprocess', this.surferProgress);\n            this.surfer.on('seek', this.surferSeek);\n        }\n    }\n\n    /**\n     * Start loading waveform data.\n     *\n     * @param {string|blob|file} url - Either the URL of the audio file,\n     *     a Blob or a File object.\n     * @param {string|?number[]|number[][]} peaks - Either the URL of peaks\n     *     data for the audio file, or an array with peaks data.\n     */\n    load(url, peaks) {\n        if (url instanceof Blob || url instanceof File) {\n            this.log('Loading object: ' + JSON.stringify(url));\n            this.surfer.loadBlob(url);\n        } else {\n            // load peak data from file\n            if (peaks !== undefined) {\n                if (Array.isArray(peaks)) {\n                    // use supplied peaks data\n                    this.log('Loading URL: ' + url);\n                    this.surfer.load(url, peaks);\n                } else {\n                    // load peak data from file\n                    let ajaxOptions = {\n                        url: peaks,\n                        responseType: 'json'\n                    };\n                    // supply xhr options, if any\n                    if (this.player.options_.plugins.wavesurfer.xhr !== undefined) {\n                        ajaxOptions.xhr = this.player.options_.plugins.wavesurfer.xhr;\n                    }\n                    let ajax = WaveSurfer.util.ajax(ajaxOptions);\n\n                    ajax.on('success', (data, e) => {\n                        this.log('Loaded Peak Data URL: ' + peaks);\n                        this.surfer.load(url, data.data);\n                    });\n                    ajax.on('error', (e) => {\n                        this.log('Unable to retrieve peak data from ' + peaks +\n                            '. Status code: ' + e.target.status, 'warn');\n                        this.log('Loading URL: ' + url);\n                        this.surfer.load(url);\n                    });\n                }\n            } else {\n                // no peaks\n                this.log('Loading URL: ' + url);\n                this.surfer.load(url);\n            }\n        }\n    }\n\n    /**\n     * Start/resume playback or microphone.\n     */\n    play() {\n        // show pause button\n        this.player.controlBar.playToggle.handlePlay();\n\n        if (this.liveMode) {\n            // start/resume microphone visualization\n            if (!this.surfer.microphone.active)\n            {\n                this.log('Start microphone');\n                this.surfer.microphone.start();\n            } else {\n                // toggle paused\n                let paused = !this.surfer.microphone.paused;\n\n                if (paused) {\n                    this.pause();\n                } else {\n                    this.log('Resume microphone');\n                    this.surfer.microphone.play();\n                }\n            }\n        } else {\n            this.log('Start playback');\n\n            // put video.js player UI in playback mode\n            this.player.play();\n\n            // start surfer playback\n            this.surfer.play();\n        }\n    }\n\n    /**\n     * Pauses playback or microphone visualization.\n     */\n    pause() {\n        // show play button\n        if (this.player.controlBar.playToggle.contentEl()) {\n            this.player.controlBar.playToggle.handlePause();\n        }\n\n        if (this.liveMode) {\n            // pause microphone visualization\n            this.log('Pause microphone');\n            this.surfer.microphone.pause();\n        } else {\n            // pause playback\n            this.log('Pause playback');\n\n            if (!this.waveFinished) {\n                // pause wavesurfer playback\n                this.surfer.pause();\n            } else {\n                this.waveFinished = false;\n            }\n\n            this.setCurrentTime();\n        }\n    }\n\n    /**\n     * @private\n     */\n    dispose() {\n        if (this.surfer) {\n            if (this.liveMode && this.surfer.microphone) {\n                // destroy microphone plugin\n                this.surfer.microphone.destroy();\n                this.log('Destroyed microphone plugin');\n            }\n            // destroy wavesurfer instance\n            this.surfer.destroy();\n        }\n        this.log('Destroyed plugin');\n    }\n\n    /**\n     * Indicates whether the plugin is destroyed or not.\n     *\n     * @return {boolean} Plugin destroyed or not.\n     */\n    isDestroyed() {\n        return this.player && (this.player.children() === null);\n    }\n\n    /**\n     * Remove the player and waveform.\n     */\n    destroy() {\n        this.player.dispose();\n    }\n\n    /**\n     * Set the volume level.\n     *\n     * @param {number} volume - The new volume level.\n     */\n    setVolume(volume) {\n        if (volume !== undefined) {\n            this.log('Changing volume to: ' + volume);\n\n            // update player volume\n            this.player.volume(volume);\n        }\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is 'image/png'. Other supported types are\n     * 'image/jpeg' and 'image/webp'.\n     *\n     * @param {string} [format=image/png] - String indicating the image format.\n     * @param {number} [quality=1] - Number between 0 and 1 indicating image\n     *     quality if the requested type is 'image/jpeg' or 'image/webp'.\n     * @returns {string} The data URI of the image data.\n     */\n    exportImage(format, quality) {\n        return this.surfer.exportImage(format, quality);\n    }\n\n    /**\n     * Change the audio output device.\n     *\n     * @param {string} sinkId - Id of audio output device.\n     */\n    setAudioOutput(deviceId) {\n        if (deviceId) {\n            this.surfer.setSinkId(deviceId).then((result) => {\n                // notify listeners\n                this.player.trigger('audioOutputReady');\n            }).catch((err) => {\n                // notify listeners\n                this.player.trigger('error', err);\n\n                this.log(err, 'error');\n            });\n        }\n    }\n\n    /**\n     * Get the current time (in seconds) of the stream during playback.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getCurrentTime() {\n        let currentTime = this.surfer.getCurrentTime();\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n\n        return currentTime;\n    }\n\n    /**\n     * Updates the player's element displaying the current time.\n     *\n     * @param {number} [currentTime] - Current position of the playhead\n     *     (in seconds).\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setCurrentTime(currentTime, duration) {\n        // emit the timeupdate event so that the tech knows about the time change\n        this.trigger('timeupdate');\n\n        if (currentTime === undefined) {\n            currentTime = this.surfer.getCurrentTime();\n        }\n\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n        duration = isNaN(duration) ? 0 : duration;\n        let time = Math.min(currentTime, duration);\n\n        // update current time display component\n        if (this.player.controlBar.currentTimeDisplay.contentEl()) {\n            this.player.controlBar.currentTimeDisplay.formattedTime_ =\n                this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\n                    formatTime(time, duration, this.msDisplayMax);\n        }\n    }\n\n    /**\n     * Get the duration of the stream in seconds.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getDuration() {\n        let duration = this.surfer.getDuration();\n        duration = isNaN(duration) ? 0 : duration;\n\n        return duration;\n    }\n\n    /**\n     * Updates the player's element displaying the duration time.\n     *\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setDuration(duration) {\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n        duration = isNaN(duration) ? 0 : duration;\n\n        // update duration display component\n        if (this.player.controlBar.durationDisplay.contentEl()) {\n            this.player.controlBar.durationDisplay.formattedTime_ =\n                this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\n                    formatTime(duration, duration, this.msDisplayMax);\n        }\n    }\n\n    /**\n     * Audio is loaded, decoded and the waveform is drawn.\n     *\n     * @fires waveReady\n     * @private\n     */\n    onWaveReady() {\n        this.waveReady = true;\n        this.waveFinished = false;\n        this.liveMode = false;\n\n        this.log('Waveform is ready');\n        this.player.trigger('waveReady');\n\n        // update time display\n        this.setCurrentTime();\n        this.setDuration();\n\n        // enable and show play button\n        if (this.player.controlBar.playToggle.contentEl()) {\n            this.player.controlBar.playToggle.show();\n        }\n\n        // hide loading spinner\n        if (this.player.loadingSpinner.contentEl()) {\n            this.player.loadingSpinner.hide();\n        }\n\n        // auto-play when ready (if enabled)\n        if (this.player.options_.autoplay === true) {\n            this.play();\n        }\n    }\n\n    /**\n     * Fires when audio playback completed.\n     *\n     * @fires playbackFinish\n     * @private\n     */\n    onWaveFinish() {\n        this.log('Finished playback');\n\n        // notify listeners\n        this.player.trigger('playbackFinish');\n\n        // check if loop is enabled\n        if (this.player.options_.loop === true) {\n            // reset waveform\n            this.surfer.stop();\n            this.play();\n        } else {\n            // finished\n            this.waveFinished = true;\n\n            // pause player\n            this.pause();\n\n            // show the replay state of play toggle\n            this.player.trigger('ended');\n\n            // this gets called once after the clip has ended and the user\n            // seeks so that we can change the replay button back to a play\n            // button\n            this.surfer.once('seek', () => {\n                this.player.controlBar.playToggle.removeClass('vjs-ended');\n                this.player.trigger('pause');\n            });\n        }\n    }\n\n    /**\n     * Fires continuously during audio playback.\n     *\n     * @param {number} time - Current time/location of the playhead.\n     * @private\n     */\n    onWaveProgress(time) {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Fires during seeking of the waveform.\n     * @private\n     */\n    onWaveSeek() {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Waveform error.\n     *\n     * @param {string} error - The wavesurfer error.\n     * @private\n     */\n    onWaveError(error) {\n        // notify listeners\n        this.player.trigger('error', error);\n\n        this.log(error, 'error');\n    }\n\n    /**\n     * Fired when the play toggle is clicked.\n     * @private\n     */\n    onPlayToggle() {\n        // workaround for video.js 6.3.1 and newer\n        if (this.player.controlBar.playToggle.hasClass('vjs-ended')) {\n            this.player.controlBar.playToggle.removeClass('vjs-ended');\n        }\n        if (this.surfer.isPlaying()) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n\n    /**\n     * Fired when the volume in the video.js player changes.\n     * @private\n     */\n    onVolumeChange() {\n        let volume = this.player.volume();\n        if (this.player.muted()) {\n            // muted volume\n            volume = 0;\n        }\n\n        // update wavesurfer.js volume\n        this.surfer.setVolume(volume);\n    }\n\n    /**\n     * Fired when the video.js player switches in or out of fullscreen mode.\n     * @private\n     */\n    onScreenChange() {\n        // execute with tiny delay so the player element completes\n        // rendering and correct dimensions are reported\n        var fullscreenDelay = this.player.setInterval(() => {\n            let isFullscreen = this.player.isFullscreen();\n            let newWidth, newHeight;\n            if (!isFullscreen) {\n                // restore original dimensions\n                newWidth = this.originalWidth;\n                newHeight = this.originalHeight;\n            }\n\n            if (this.waveReady) {\n                if (this.liveMode && !this.surfer.microphone.active) {\n                    // we're in live mode but the microphone hasn't been\n                    // started yet\n                    return;\n                }\n                // redraw\n                this.redrawWaveform(newWidth, newHeight);\n            }\n\n            // stop fullscreenDelay interval\n            this.player.clearInterval(fullscreenDelay);\n\n        }, 100);\n    }\n\n    /**\n     * Fired when the video.js player is resized.\n     *\n     * @private\n     */\n    onResizeChange() {\n        if (this.surfer !== undefined) {\n            // redraw waveform\n            this.redrawWaveform();\n        }\n    }\n\n    /**\n     * Redraw waveform.\n     *\n     * @param {number} [newWidth] - New width for the waveform.\n     * @param {number} [newHeight] - New height for the waveform.\n     * @private\n     */\n    redrawWaveform(newWidth, newHeight) {\n        if (!this.isDestroyed()) {\n            if (this.player.el_) {\n                let rect = this.player.el_.getBoundingClientRect();\n                if (newWidth === undefined) {\n                    // get player width\n                    newWidth = rect.width;\n                }\n                if (newHeight === undefined) {\n                    // get player height\n                    newHeight = rect.height;\n                }\n            }\n\n            // destroy old drawing\n            this.surfer.drawer.destroy();\n\n            // set new dimensions\n            this.surfer.params.width = newWidth;\n            this.surfer.params.height = newHeight - this.player.controlBar.height();\n\n            // redraw waveform\n            this.surfer.createDrawer();\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            this.surfer.drawBuffer();\n\n            // make sure playhead is restored at right position\n            this.surfer.drawer.progress(this.surfer.backend.getPlayedPercents());\n        }\n    }\n\n    /**\n     * @private\n     */\n    log(args, logType) {\n        log(args, logType, this.debug);\n    }\n}\n\n// version nr is injected during build\nWavesurfer.VERSION = __VERSION__;\n\n// register plugin once\nvideojs.Wavesurfer = Wavesurfer;\nif (videojs.getPlugin('wavesurfer') === undefined) {\n    videojs.registerPlugin('wavesurfer', Wavesurfer);\n}\n\n// register the WavesurferTech as 'Html5' to override the default html5 tech.\n// If we register it as anything other then 'Html5', the <audio> element will\n// be removed by VJS and caption tracks will be lost in the Safari browser.\nvideojs.registerTech('Html5', WavesurferTech);\n\nmodule.exports = {\n    Wavesurfer\n};\n"],"sourceRoot":""}