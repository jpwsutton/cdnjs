{"version":3,"file":"logging.js","sources":["../../../../packages/logging/src/loglevel.ts","../../../../packages/logging/src/logger.ts","../../../../packages/logging/src/listeners.ts"],"sourcesContent":["/**\r\n * A set of logging levels\r\n *\r\n */\r\nexport enum LogLevel {\r\n    Verbose = 0,\r\n    Info = 1,\r\n    Warning = 2,\r\n    Error = 3,\r\n    Off = 99,\r\n}\r\n","import { LogLevel } from \"./loglevel\";\r\nimport { LogListener } from \"./listeners\";\r\nimport { LogEntry } from \"./logentry\";\r\n\r\n/**\r\n * Class used to subscribe ILogListener and log messages throughout an application\r\n *\r\n */\r\nexport class Logger {\r\n\r\n    private static _instance: LoggerImpl;\r\n\r\n    /**\r\n     * Gets or sets the active log level to apply for log filtering\r\n     */\r\n    public static get activeLogLevel(): LogLevel {\r\n        return Logger.instance.activeLogLevel;\r\n    }\r\n\r\n    public static set activeLogLevel(value: LogLevel) {\r\n        Logger.instance.activeLogLevel = value;\r\n    }\r\n\r\n    private static get instance(): LoggerImpl {\r\n        if (typeof Logger._instance === \"undefined\" || Logger._instance === null) {\r\n            Logger._instance = new LoggerImpl();\r\n        }\r\n        return Logger._instance;\r\n    }\r\n\r\n    /**\r\n     * Adds ILogListener instances to the set of subscribed listeners\r\n     *\r\n     * @param listeners One or more listeners to subscribe to this log\r\n     */\r\n    public static subscribe(...listeners: LogListener[]): void {\r\n        listeners.map(listener => Logger.instance.subscribe(listener));\r\n    }\r\n\r\n    /**\r\n     * Clears the subscribers collection, returning the collection before modifiction\r\n     */\r\n    public static clearSubscribers(): LogListener[] {\r\n        return Logger.instance.clearSubscribers();\r\n    }\r\n\r\n    /**\r\n     * Gets the current subscriber count\r\n     */\r\n    public static get count(): number {\r\n        return Logger.instance.count;\r\n    }\r\n\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param message The message to write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\r\n     */\r\n    public static write(message: string, level: LogLevel = LogLevel.Verbose) {\r\n        Logger.instance.log({ level: level, message: message });\r\n    }\r\n\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param json The json object to stringify and write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\r\n     */\r\n    public static writeJSON(json: any, level: LogLevel = LogLevel.Verbose) {\r\n        Logger.instance.log({ level: level, message: JSON.stringify(json) });\r\n    }\r\n\r\n    /**\r\n     * Logs the supplied entry to the subscribed listeners\r\n     *\r\n     * @param entry The message to log\r\n     */\r\n    public static log(entry: LogEntry) {\r\n        Logger.instance.log(entry);\r\n    }\r\n\r\n    /**\r\n     * Logs performance tracking data for the the execution duration of the supplied function using console.profile\r\n     *\r\n     * @param name The name of this profile boundary\r\n     * @param f The function to execute and track within this performance boundary\r\n     */\r\n    public static measure<T>(name: string, f: () => T): T {\r\n        return Logger.instance.measure(name, f);\r\n    }\r\n}\r\n\r\nclass LoggerImpl {\r\n\r\n    constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: LogListener[] = []) { }\r\n\r\n    public subscribe(listener: LogListener): void {\r\n        this.subscribers.push(listener);\r\n    }\r\n\r\n    public clearSubscribers(): LogListener[] {\r\n        const s = this.subscribers.slice(0);\r\n        this.subscribers.length = 0;\r\n        return s;\r\n    }\r\n\r\n    public get count(): number {\r\n        return this.subscribers.length;\r\n    }\r\n\r\n    public write(message: string, level: LogLevel = LogLevel.Verbose) {\r\n        this.log({ level: level, message: message });\r\n    }\r\n\r\n    public log(entry: LogEntry) {\r\n        if (typeof entry === \"undefined\" || entry.level < this.activeLogLevel) {\r\n            return;\r\n        }\r\n\r\n        this.subscribers.map(subscriber => subscriber.log(entry));\r\n    }\r\n\r\n    public measure<T>(name: string, f: () => T): T {\r\n        console.profile(name);\r\n        try {\r\n            return f();\r\n        } finally {\r\n            console.profileEnd();\r\n        }\r\n    }\r\n}\r\n","import { LogEntry } from \"./logentry\";\r\nimport { LogLevel } from \"./loglevel\";\r\n\r\n/**\r\n * Interface that defines a log listner\r\n *\r\n */\r\nexport interface LogListener {\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    log(entry: LogEntry): void;\r\n}\r\n\r\n/**\r\n * Implementation of ILogListener which logs to the browser console\r\n *\r\n */\r\nexport class ConsoleListener implements LogListener {\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: LogEntry): void {\r\n\r\n        const msg = this.format(entry);\r\n\r\n        switch (entry.level) {\r\n            case LogLevel.Verbose:\r\n            case LogLevel.Info:\r\n                console.log(msg);\r\n                break;\r\n            case LogLevel.Warning:\r\n                console.warn(msg);\r\n                break;\r\n            case LogLevel.Error:\r\n                console.error(msg);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the message\r\n     *\r\n     * @param entry The information to format into a string\r\n     */\r\n    private format(entry: LogEntry): string {\r\n        const msg = [];\r\n        msg.push(\"Message: \" + entry.message);\r\n        if (typeof entry.data !== \"undefined\") {\r\n            msg.push(\" Data: \" + JSON.stringify(entry.data));\r\n        }\r\n\r\n        return msg.join(\"\");\r\n    }\r\n}\r\n\r\n/**\r\n * Implementation of ILogListener which logs to the supplied function\r\n *\r\n */\r\nexport class FunctionListener implements LogListener {\r\n\r\n    /**\r\n     * Creates a new instance of the FunctionListener class\r\n     *\r\n     * @constructor\r\n     * @param  method The method to which any logging data will be passed\r\n     */\r\n    constructor(private method: (entry: LogEntry) => void) { }\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: LogEntry): void {\r\n        this.method(entry);\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}