{"version":3,"sources":["../../../../packages/logging/src/loglevel.ts","../../../../packages/logging/src/logger.ts","../../../../packages/logging/src/listeners.ts"],"names":["LogLevel","Logger","Object","defineProperty","instance","activeLogLevel","value","_instance","LoggerImpl","subscribe","listeners","_i","arguments","length","map","listener","clearSubscribers","count","write","message","level","Verbose","log","writeJSON","json","JSON","stringify","entry","measure","name","f","subscribers","Warning","this","prototype","push","s","slice","subscriber","console","profile","profileEnd","ConsoleListener","msg","format","Info","warn","Error","error","data","join","FunctionListener","method"],"mappings":"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","sourcesContent":["/**\r\n * A set of logging levels\r\n *\r\n */\r\nexport enum LogLevel {\r\n    Verbose = 0,\r\n    Info = 1,\r\n    Warning = 2,\r\n    Error = 3,\r\n    Off = 99,\r\n}\r\n","import { LogLevel } from \"./loglevel\";\r\nimport { LogListener } from \"./listeners\";\r\nimport { LogEntry } from \"./logentry\";\r\n\r\n/**\r\n * Class used to subscribe ILogListener and log messages throughout an application\r\n *\r\n */\r\nexport class Logger {\r\n\r\n    private static _instance: LoggerImpl;\r\n\r\n    /**\r\n     * Gets or sets the active log level to apply for log filtering\r\n     */\r\n    public static get activeLogLevel(): LogLevel {\r\n        return Logger.instance.activeLogLevel;\r\n    }\r\n\r\n    public static set activeLogLevel(value: LogLevel) {\r\n        Logger.instance.activeLogLevel = value;\r\n    }\r\n\r\n    private static get instance(): LoggerImpl {\r\n        if (typeof Logger._instance === \"undefined\" || Logger._instance === null) {\r\n            Logger._instance = new LoggerImpl();\r\n        }\r\n        return Logger._instance;\r\n    }\r\n\r\n    /**\r\n     * Adds ILogListener instances to the set of subscribed listeners\r\n     *\r\n     * @param listeners One or more listeners to subscribe to this log\r\n     */\r\n    public static subscribe(...listeners: LogListener[]): void {\r\n        listeners.map(listener => Logger.instance.subscribe(listener));\r\n    }\r\n\r\n    /**\r\n     * Clears the subscribers collection, returning the collection before modifiction\r\n     */\r\n    public static clearSubscribers(): LogListener[] {\r\n        return Logger.instance.clearSubscribers();\r\n    }\r\n\r\n    /**\r\n     * Gets the current subscriber count\r\n     */\r\n    public static get count(): number {\r\n        return Logger.instance.count;\r\n    }\r\n\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param message The message to write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\r\n     */\r\n    public static write(message: string, level: LogLevel = LogLevel.Verbose) {\r\n        Logger.instance.log({ level: level, message: message });\r\n    }\r\n\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param json The json object to stringify and write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Verbose)\r\n     */\r\n    public static writeJSON(json: any, level: LogLevel = LogLevel.Verbose) {\r\n        Logger.instance.log({ level: level, message: JSON.stringify(json) });\r\n    }\r\n\r\n    /**\r\n     * Logs the supplied entry to the subscribed listeners\r\n     *\r\n     * @param entry The message to log\r\n     */\r\n    public static log(entry: LogEntry) {\r\n        Logger.instance.log(entry);\r\n    }\r\n\r\n    /**\r\n     * Logs performance tracking data for the the execution duration of the supplied function using console.profile\r\n     *\r\n     * @param name The name of this profile boundary\r\n     * @param f The function to execute and track within this performance boundary\r\n     */\r\n    public static measure<T>(name: string, f: () => T): T {\r\n        return Logger.instance.measure(name, f);\r\n    }\r\n}\r\n\r\nclass LoggerImpl {\r\n\r\n    constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: LogListener[] = []) { }\r\n\r\n    public subscribe(listener: LogListener): void {\r\n        this.subscribers.push(listener);\r\n    }\r\n\r\n    public clearSubscribers(): LogListener[] {\r\n        const s = this.subscribers.slice(0);\r\n        this.subscribers.length = 0;\r\n        return s;\r\n    }\r\n\r\n    public get count(): number {\r\n        return this.subscribers.length;\r\n    }\r\n\r\n    public write(message: string, level: LogLevel = LogLevel.Verbose) {\r\n        this.log({ level: level, message: message });\r\n    }\r\n\r\n    public log(entry: LogEntry) {\r\n        if (typeof entry === \"undefined\" || entry.level < this.activeLogLevel) {\r\n            return;\r\n        }\r\n\r\n        this.subscribers.map(subscriber => subscriber.log(entry));\r\n    }\r\n\r\n    public measure<T>(name: string, f: () => T): T {\r\n        console.profile(name);\r\n        try {\r\n            return f();\r\n        } finally {\r\n            console.profileEnd();\r\n        }\r\n    }\r\n}\r\n","import { LogEntry } from \"./logentry\";\r\nimport { LogLevel } from \"./loglevel\";\r\n\r\n/**\r\n * Interface that defines a log listner\r\n *\r\n */\r\nexport interface LogListener {\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    log(entry: LogEntry): void;\r\n}\r\n\r\n/**\r\n * Implementation of ILogListener which logs to the browser console\r\n *\r\n */\r\nexport class ConsoleListener implements LogListener {\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: LogEntry): void {\r\n\r\n        const msg = this.format(entry);\r\n\r\n        switch (entry.level) {\r\n            case LogLevel.Verbose:\r\n            case LogLevel.Info:\r\n                console.log(msg);\r\n                break;\r\n            case LogLevel.Warning:\r\n                console.warn(msg);\r\n                break;\r\n            case LogLevel.Error:\r\n                console.error(msg);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the message\r\n     *\r\n     * @param entry The information to format into a string\r\n     */\r\n    private format(entry: LogEntry): string {\r\n        const msg = [];\r\n        msg.push(\"Message: \" + entry.message);\r\n        if (typeof entry.data !== \"undefined\") {\r\n            msg.push(\" Data: \" + JSON.stringify(entry.data));\r\n        }\r\n\r\n        return msg.join(\"\");\r\n    }\r\n}\r\n\r\n/**\r\n * Implementation of ILogListener which logs to the supplied function\r\n *\r\n */\r\nexport class FunctionListener implements LogListener {\r\n\r\n    /**\r\n     * Creates a new instance of the FunctionListener class\r\n     *\r\n     * @constructor\r\n     * @param  method The method to which any logging data will be passed\r\n     */\r\n    constructor(private method: (entry: LogEntry) => void) { }\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: LogEntry): void {\r\n        this.method(entry);\r\n    }\r\n}\r\n"]}